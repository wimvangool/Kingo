<?xml version="1.0"?>
<package >
  <metadata>   
    <id>System.ComponentModel.Messaging.TestEngine</id>
    <version>$version$</version>
    <title>$title$</title>
    <authors>$author$</authors>
    <owners>Wim van Gool</owners>
    <licenseUrl>http://opensource.org/licenses/mit-license.php</licenseUrl>
    <projectUrl>https://github.com/wimvangool/MessageProcessor</projectUrl>
    <requireLicenseAcceptance>true</requireLicenseAcceptance>
    <description>
      With the rise of messaging-patterns in enterprise application development, we gathered some best practices
      and put them into a set of libraries.

      This library contains a framework that can be used to create Scenario-tests. Scenario's are Unit Tests that
      are implemented using the Given-When-Then pattern in the form of methods to override and/or implement.

      The Given-method returns a sequence of messages, represented by a IMessageSequence-instance, to bring the system
      into a desired state. The When-method then returns a single message of which all effects (raised events) are
      captured and can then be verified in custom test-methods representing the various Then-statements.

      Since the Scenario-class implements IMessageSequence, different scenario's can be composed to create a new, more
      complex one, which provides developers with a powerful mechanism to use the state-changing effects of previous
      (succesfull) scenario's as the precondition state of newer ones.

      Source code and general guidance on how to use this framework can be found here:
      https://github.com/wimvangool/MessageProcessor/wiki
    </description>
    <summary>Contains components to build applications based on messaging patterns.</summary>
    <releaseNotes />
    <copyright>Wim van Gool, 2014</copyright>
    <language>en-US</language>
    <tags>CQRS DDD Domain Driven Design BDD Event-Driven Architecture</tags>
  </metadata>
</package>