<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kingo.Server</name>
    </assembly>
    <members>
        <member name="T:Kingo.Messaging.LayerConfiguration">
            <summary>
            Represents a set of logically distinguished <see cref="T:Kingo.Messaging.Layer">Layers</see> of an application.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.LayerConfiguration.ReplaceApiLayer(System.Reflection.Assembly[])">
            <summary>
            Replaces the <see cref="P:Kingo.Messaging.LayerConfiguration.ApiLayer"/> with a layer that consists of the specified <paramref name="assemblies"/>.
            </summary>
            <param name="assemblies">A collection of assemblies.</param>
            <returns>A new configuration with the updated layer.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assemblies"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.LayerConfiguration.ReplaceApiLayer(Kingo.Messaging.Layer)">
            <summary>
            Replaces the <see cref="P:Kingo.Messaging.LayerConfiguration.ApiLayer"/> with the specified <paramref name="layer"/>.
            </summary>
            <param name="layer">The new API layer.</param>
            <returns>A new configuration with the updated layer.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="layer"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.LayerConfiguration.ReplaceServiceLayer(System.Reflection.Assembly[])">
            <summary>
            Replaces the <see cref="P:Kingo.Messaging.LayerConfiguration.ServiceLayer"/> with a layer that consists of the specified <paramref name="assemblies"/>.
            </summary>
            <param name="assemblies">A collection of assemblies.</param>
            <returns>A new configuration with the updated layer.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assemblies"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.LayerConfiguration.ReplaceServiceLayer(Kingo.Messaging.Layer)">
            <summary>
            Replaces the <see cref="P:Kingo.Messaging.LayerConfiguration.ServiceLayer"/> with the specified <paramref name="layer"/>.
            </summary>
            <param name="layer">The new service layer.</param>
            <returns>A new configuration with the updated layer.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="layer"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.LayerConfiguration.ReplaceApplicationLayer(System.Reflection.Assembly[])">
            <summary>
            Replaces the <see cref="P:Kingo.Messaging.LayerConfiguration.ApplicationLayer"/> with a layer that consists of the specified <paramref name="assemblies"/>.
            </summary>
            <param name="assemblies">A collection of assemblies.</param>
            <returns>A new configuration with the updated layer.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assemblies"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.LayerConfiguration.ReplaceApplicationLayer(Kingo.Messaging.Layer)">
            <summary>
            Replaces the <see cref="P:Kingo.Messaging.LayerConfiguration.ApplicationLayer"/> with the specified <paramref name="layer"/>.
            </summary>
            <param name="layer">The new application layer.</param>
            <returns>A new configuration with the updated layer.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="layer"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.LayerConfiguration.ReplaceDomainLayer(System.Reflection.Assembly[])">
            <summary>
            Replaces the <see cref="P:Kingo.Messaging.LayerConfiguration.DomainLayer"/> with a layer that consists of the specified <paramref name="assemblies"/>.
            </summary>
            <param name="assemblies">A collection of assemblies.</param>
            <returns>A new configuration with the updated layer.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assemblies"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.LayerConfiguration.ReplaceDomainLayer(Kingo.Messaging.Layer)">
            <summary>
            Replaces the <see cref="P:Kingo.Messaging.LayerConfiguration.DomainLayer"/> with the specified <paramref name="layer"/>.
            </summary>
            <param name="layer">The new domain layer.</param>
            <returns>A new configuration with the updated layer.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="layer"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.LayerConfiguration.ReplaceDataAccessLayer(System.Reflection.Assembly[])">
            <summary>
            Replaces the <see cref="P:Kingo.Messaging.LayerConfiguration.DataAccessLayer"/> with a layer that consists of the specified <paramref name="assemblies"/>.
            </summary>
            <param name="assemblies">A collection of assemblies.</param>
            <returns>A new configuration with the updated layer.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assemblies"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.LayerConfiguration.ReplaceDataAccessLayer(Kingo.Messaging.Layer)">
            <summary>
            Replaces the <see cref="P:Kingo.Messaging.LayerConfiguration.DataAccessLayer"/> with the specified <paramref name="layer"/>.
            </summary>
            <param name="layer">The new data access layer.</param>
            <returns>A new configuration with the updated layer.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="layer"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.Messaging.LayerConfiguration.ApiLayer">
            <summary>
            Returns the layer that contains the API of the application,
            inclusing all messages that are received, published and returned through the API.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.LayerConfiguration.ServiceLayer">
            <summary>
            Returns the layer that contains the implementation of the API.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.LayerConfiguration.ApplicationLayer">
            <summary>
            Returns the layer that contains all message handlers.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.LayerConfiguration.DomainLayer">
            <summary>
            Returns the layer that contains all domain objects, including any repository interfaces.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.LayerConfiguration.DataAccessLayer">
            <summary>
            Returns the layer that contains all data access logic, including all repository implementations.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.DependencyConfiguration">
            <summary>
            Contains all configuration settings for a dependency.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.IDependencyConfiguration">
            <summary>
            When implemented by a class, contains all configuration settings for a dependency.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.IDependencyConfiguration.Lifetime">
            <summary>
            The lifetime of the dependency.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.DependencyConfiguration.Default">
            <summary>
            The default configuration that is applied for dependencies.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.DependencyConfiguration.#ctor(Kingo.Messaging.InstanceLifetime)">
            <summary>
            Initializes a new instance of a <see cref="T:Kingo.Messaging.DependencyConfiguration"/> structure.
            </summary>
            <param name="lifetime">The lifetime of the dependency.</param>
        </member>
        <member name="M:Kingo.Messaging.DependencyConfiguration.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is an instance of <see cref="T:Kingo.Messaging.DependencyConfiguration"/>
            and equals the value of this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.DependencyConfiguration.Equals(Kingo.Messaging.DependencyConfiguration)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Kingo.Messaging.DependencyConfiguration"/> value.
            </summary>
            <param name="other">A <see cref="T:Kingo.Messaging.DependencyConfiguration"/> value to compare to this instance.</param>
            <returns>
            <c>true</c> if <paramref name="other"/> has the same value as this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.DependencyConfiguration.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Kingo.Messaging.DependencyConfiguration.ToString">
            <summary>Converts this value to its equivalent string-representation.</summary>
            <returns>The string-representation of this value.</returns>
        </member>
        <member name="M:Kingo.Messaging.DependencyConfiguration.op_Equality(Kingo.Messaging.DependencyConfiguration,Kingo.Messaging.DependencyConfiguration)">
            <summary>Determines whether two specified <see cref="T:Kingo.Messaging.DependencyConfiguration"/>-instances have the same value.</summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare</param>
            <returns><c>true</c> if both instances have the same value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Messaging.DependencyConfiguration.op_Inequality(Kingo.Messaging.DependencyConfiguration,Kingo.Messaging.DependencyConfiguration)">
            <summary>Determines whether two specified <see cref="T:Kingo.Messaging.DependencyConfiguration"/>-instances do not have the same value.</summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare</param>
            <returns><c>true</c> if both instances do not have the same value; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Kingo.Messaging.DependencyConfiguration.Lifetime">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.Domain.DelegateTypeToContractMap">
            <summary>
            Represents a <see cref="T:Kingo.Messaging.ITypeToContractMap"/> that has been implemented through a set of delegates.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.ITypeToContractMap">
            <summary>
            When implemented by a class, represents a mapping between the types of events and snapshots
            and a contract or schema, which can be used to support versioning and upcasting of these types.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.ITypeToContractMap.GetContract(System.Type)">
            <summary>
            Retrieves the contract to which the specified <paramref name="type "/> is mapped.
            </summary>
            <param name="type">The type to get the contract for.</param>
            <returns>The contract to which the type is mapped.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            No mapping was found for the specified <paramref name="type"/>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.ITypeToContractMap.GetType(System.String)">
            <summary>
            Retrieved the type to which the specified <paramref name="contract"/> is mapped.
            </summary>
            <param name="contract">The contract to get the type for.</param>
            <returns>The type to which the contract is mapped.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="contract"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            No mapping was found for the specified <paramref name="contract"/>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.DelegateTypeToContractMap.#ctor(System.Func{System.Type,System.String},System.Func{System.String,System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.DelegateTypeToContractMap"/> class.
            </summary>
            <param name="getContract">
            Delegate that returns a contract based on a specific type.
            </param>
            <param name="getType">
            Delegate that returns a type base on a specific contract.
            </param>
        </member>
        <member name="M:Kingo.Messaging.Domain.DelegateTypeToContractMap.GetContract(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Domain.DelegateTypeToContractMap.GetType(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.Domain.EventStream">
            <summary>
            Represents an aggregate that is modeled as a stream of events and can also be restored as such.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.Domain.EventStream`2">
            <summary>
            Represents an aggregate that is modeled as a stream of events and can also be restored as such.
            </summary>
            <typeparam name="TKey">Type of the aggregate-key.</typeparam>
            <typeparam name="TVersion">Type of the aggregate-version.</typeparam>        
        </member>
        <member name="T:Kingo.Messaging.Domain.AggregateRoot`2">
            <summary>
            Represents an aggregate root as defined by the principles of Domain Driven Design.
            </summary>
            <typeparam name="TKey">Type of the aggregate-key.</typeparam>
            <typeparam name="TVersion">Type of the aggregate-version.</typeparam>      
        </member>
        <member name="T:Kingo.Messaging.Domain.Entity`1">
            <summary>
            Represents an entity that can be identified by it's key.
            </summary>
            <typeparam name="TKey">Type of the key of this entity.</typeparam>
        </member>
        <member name="P:Kingo.Messaging.Domain.Entity`1.Id">
            <summary>
            Identifier of this entity.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.Domain.IAggregateRoot`2">
            <summary>
            When implemented by a class, represents an aggregate root.
            </summary>
            <typeparam name="TKey">Type of the aggregate-key.</typeparam>
            <typeparam name="TVersion">Type of the aggregate-version.</typeparam>     
        </member>
        <member name="T:Kingo.Messaging.Domain.IReadableEventStream`2">
            <summary>
            Represents a buffered stream of events that can be flushed to another stream.
            </summary>
            <typeparam name="TKey">Type of the aggregate's key.</typeparam>
            <typeparam name="TVersion">Type of the aggregate's version.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.Domain.IReadableEventStream`2.WriteTo(Kingo.Messaging.Domain.IWritableEventStream{`0,`1})">
            <summary>
            Writes the contents of this stream to the specified <paramref name="stream"/>.
            </summary>
            <param name="stream">The stream to flush to.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.IAggregateRoot`2.CreateSnapshot">
            <summary>
            Creates and returns a <see cref="T:Kingo.Messaging.Domain.ISnapshot`2"/> of this aggregate.
            </summary>
            <returns>A new snapshot of this aggregate.</returns>
        </member>
        <member name="T:Kingo.Messaging.Domain.ISnapshot`2">
            <summary>
            Represents a snapshot of a certain type of aggregate.
            </summary>
            <typeparam name="TKey">Type of the aggregate-key.</typeparam>
            <typeparam name="TVersion">Type of the aggregate-version.</typeparam>    
        </member>
        <member name="M:Kingo.Messaging.Domain.ISnapshot`2.RestoreAggregate``1">
            <summary>
            Restores an aggregate from this snapshot.
            </summary>
            <returns>The restored aggregate.</returns>
            <exception cref="T:System.InvalidOperationException">
            This snapshot could not restore the instance of the specified type.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateRoot`2.#ctor(Kingo.Messaging.Domain.IHasKeyAndVersion{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.AggregateRoot`2"/> class.
            </summary>
            <param name="event">The event of that represents the creation of this aggregate.</param>        
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateRoot`2.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateRoot`2.NextVersion">
            <summary>
            Returns a incremented version number relative to the current version.
            </summary>
            <returns>The increment version of the current version.</returns>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateRoot`2.CreateSnapshot">
            <summary>
            When overridden, creates and returns a <see cref="T:Kingo.Messaging.Domain.ISnapshot`2"/> of this aggregate.        
            </summary>
            <returns>A new snapshot of this aggregate.</returns>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateRoot`2.Publish``1(``0)">
            <summary>
            Publishes the specified <paramref name="event"/>.
            </summary>
            <typeparam name="TEvent">Type of the event that is published.</typeparam>
            <param name="event">The event to publish.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="event"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="P:Kingo.Messaging.Domain.AggregateRoot`2.EventCount">
            <summary>
            Returns the number of events that were published by this aggregate.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Domain.AggregateRoot`2.Version">
            <summary>
            Gets or sets the version of this aggregate.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.Domain.IWritableEventStream`2">
            <summary>
            Represents a stream of <see cref="T:Kingo.Messaging.Domain.IHasKeyAndVersion`2"/> that can be written to.
            </summary>
            <typeparam name="TKey">Type of the aggregate's key.</typeparam>
            <typeparam name="TVersion">Type of the aggregate's version.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.Domain.IWritableEventStream`2.Write``1(``0)">
            <summary>
            Writes the specified <paramref name="event"/> to the current stream.
            </summary>
            <typeparam name="TEvent">Type of the event.</typeparam>
            <param name="event">The event to write to this stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="event"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.EventStream`2.#ctor(Kingo.Messaging.Domain.IHasKeyAndVersion{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.EventStream`2"/> class.
            </summary>
            <param name="event">The event of that represents the creation of this aggregate.</param>        
        </member>
        <member name="M:Kingo.Messaging.Domain.EventStream`2.RegisterEventHandlers">
            <summary>
            When overridden, registers all event handlers of this aggregate through the <see cref="M:Kingo.Messaging.Domain.EventStream`2.RegisterEventHandler``1(System.Action{``0})"/> method.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.EventStream`2.RegisterEventHandler``1(System.Action{``0})">
            <summary>
            Registers a handler that is invoked when the aggregate writes an event of the specified type.
            </summary>
            <typeparam name="TEvent">Type of the event to handle.</typeparam>
            <param name="eventHandler">The handler of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="eventHandler"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            A handler for the specified event-type <paramtyperef name="TDomainEvent"/> has already been registered.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.EventStream.#ctor(Kingo.Messaging.Domain.IHasKeyAndVersion{System.Guid,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.AggregateRoot`2"/> class.
            </summary>
            <param name="event">The event of that represents the creation of this aggregate.</param>        
        </member>
        <member name="M:Kingo.Messaging.Domain.EventStream.NextVersion">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.Domain.EventStreamFactory`2">
            <summary>
            Represents a factory that restores an <see cref="T:Kingo.Messaging.Domain.EventStream`2"/> from a history of events
            and (optionally) one of its snapshots.
            </summary>
            <typeparam name="TKey">Key-type of the aggregate.</typeparam>
            <typeparam name="TVersion">Version-type of the aggregate.</typeparam>    
        </member>
        <member name="M:Kingo.Messaging.Domain.EventStreamFactory`2.#ctor(System.Collections.Generic.IEnumerable{Kingo.Messaging.Domain.IHasKeyAndVersion{`0,`1}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.EventStreamFactory`2"/> class.
            </summary>
            <param name="events">A collection of historic events.</param>
            <param name="useDefaultConstructor">
            Indicates whether or not this factory should invoke the default constructor of the aggregate to create the instance.
            Note that this constructor does not have to be public for the factory to find it. If <c>false</c>, this factory will create an
            instance of the aggregate without calling any constructor.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="events"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.EventStreamFactory`2.#ctor(System.Collections.Generic.IEnumerable{Kingo.Messaging.Domain.IHasKeyAndVersion{`0,`1}},Kingo.Messaging.Domain.ISnapshot{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.EventStreamFactory`2"/> class.
            </summary>
            <param name="events">A collection of historic events.</param>
            <param name="snapshot">An (optional) snapshot of the aggregate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="events"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.EventStreamFactory`2.RestoreAggregate``1">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.Domain.AggregateRoot">
            <summary>
            Represents an aggregate root as defined by the principles of Domain Driven Design.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateRoot.#ctor(Kingo.Messaging.Domain.IHasKeyAndVersion{System.Guid,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.AggregateRoot`2"/> class.
            </summary>
            <param name="event">The event of that represents the creation of this aggregate.</param>        
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateRoot.NextVersion">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.Domain.ConcurrencyException">
            <summary>
            This exception is thrown when an aggregate could not be updated because of a concurrency conflict.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.ConcurrencyException.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.ConcurrencyException"/> class.
            </summary>
            <param name="aggregate">The aggregate that could not be updated.</param>
            <param name="originalVersion">Version of the aggregate before it was updated.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="aggregate"/> or <paramref name="originalVersion"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.ConcurrencyException.#ctor(System.Object,System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.ConcurrencyException"/> class.
            </summary>
            <param name="aggregate">The aggregate that could not be updated.</param>
            <param name="originalVersion">Version of the aggregate before it was updated.</param>
            <param name="message">Message of the exception.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="aggregate"/> or <paramref name="originalVersion"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.Messaging.Domain.ConcurrencyException.#ctor(System.Object,System.Object,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.ConcurrencyException"/> class.
            </summary>        
            <param name="aggregate">The aggregate that could not be updated.</param>
            <param name="originalVersion">Version of the aggregate before it was updated.</param>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="aggregate"/> or <paramref name="originalVersion"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.ConcurrencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.ConcurrencyException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Kingo.Messaging.Domain.ConcurrencyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.Domain.ConcurrencyException.Aggregate">
            <summary>
            The aggregate that could not be updated.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Domain.ConcurrencyException.OriginalVersion">
            <summary>
            Version of the aggregate before it was updated.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.Domain.DuplicateKeyException`1">
            <summary>
            This exception is thrown when ....
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.DuplicateKeyException`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.DuplicateKeyException`1"/> class.
            </summary>		
            <param name="key">The key that was already assigned to another aggregate.</param>
            <param name="message">Message of the exception.</param>
        </member>
        <member name="M:Kingo.Messaging.Domain.DuplicateKeyException`1.#ctor(`0,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.DuplicateKeyException`1"/> class.
            </summary>		
            <param name="key">The key that was already assigned to another aggregate.</param>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>
        </member>
        <member name="M:Kingo.Messaging.Domain.DuplicateKeyException`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.DuplicateKeyException`1"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Kingo.Messaging.Domain.DuplicateKeyException`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.Domain.EventStore`3">
            <summary>
            Represents a repository that stores its aggregates as a stream of events.
            </summary>
            <typeparam name="TKey">Type of the key that identifies an aggregate.</typeparam>
            <typeparam name="TVersion">Type of the version of the aggregate.</typeparam>
            <typeparam name="TAggregate">Type of aggregates that are managed.</typeparam>
        </member>
        <member name="T:Kingo.Messaging.Domain.Repository`3">
            <summary>
            Represents a repository of a certain type of aggregate. Besides the basic
            read- and write-operations, this call also implements an Identity Map so that
            implementers can focus on implementing serialization and deserialization of the
            aggregates to and from a backing store.
            </summary>
            <typeparam name="TKey">Type of the key that identifies an aggregate.</typeparam>
            <typeparam name="TVersion">Type of the version of the aggregate.</typeparam>
            <typeparam name="TAggregate">Type of aggregates that are managed.</typeparam>
        </member>
        <member name="T:Kingo.Messaging.IUnitOfWork">
            <summary>
            When implemented by a class, represents a unit of work that can be flushed.
            </summary>    
        </member>
        <member name="M:Kingo.Messaging.IUnitOfWork.RequiresFlush">
            <summary>
            Indicates whether or not the unit of work maintains any changes that need to flushed.
            </summary>
            <returns>
            <c>true</c> if the current instance needs to be flushed; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.IUnitOfWork.FlushAsync">
            <summary>
            Flushes any pending changes to the underlying infrastructure.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.Repository`3"/> class.
            </summary>                
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`3.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`3.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">
            Indicates if the method was called by the application explicitly (<c>true</c>), or by the finalizer
            (<c>false</c>).
            </param>
            <remarks>
            If <paramref name="disposing"/> is <c>true</c>, this method will dispose any managed resources immediately.
            Otherwise, only unmanaged resources will be released.
            </remarks>
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`3.NewObjectDisposedException">
            <summary>
            Creates and returns a new <see cref="T:System.ObjectDisposedException"/>.
            </summary>
            <returns>A new <see cref="T:System.ObjectDisposedException"/>.</returns>
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`3.Enlist">
            <summary>
            Enlists this repository with the <see cref="T:Kingo.Messaging.MessageProcessor"/> to schedule it for a flush.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`3.RequiresFlush">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`3.FlushAsync">
            <summary>
            Flushes any pending changes to the underlying infrastructure.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`3.FlushAsync(Kingo.Messaging.Domain.IWritableEventStream{`0,`1})">
            <summary>
            Flushes all pending changes of the aggregates while at the same time writing all pending events to
            the specified <paramref name="domainEventStream"/>.
            </summary>
            <param name="domainEventStream">The event stream to write the aggregate's events to.</param>
            <returns>A task representing the flush action.</returns>
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`3.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`3.GetByKeyAsync(`0)">
            <summary>
            Retrieves an <see cref="T:Kingo.Messaging.Domain.IHasKeyAndVersion`2"/> by its key.
            </summary>
            <param name="key">The key of the aggregate to return.</param>
            <returns>The aggregate with the specified <paramref name="key"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
            <exception cref="T:Kingo.Messaging.Domain.AggregateNotFoundByKeyException`1">
            No aggregate of type <typeparamref name="TAggregate"/> with the specified <paramref name="key"/> was found.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`3.SelectByKeyAsync(`0,Kingo.Messaging.ITypeToContractMap)">
            <summary>
            Loads a snapshot from the repository.
            </summary>
            <param name="key">Key of the aggregate.</param>
            <param name="map">
            The mapping from each contract to a specific type that can be used to deserialize the retrieved data to its correct type.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> representing the load operation. The task should return <c>null</c> if the aggregate was not found.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`3.OnAggregateSelected(`2)">
            <summary>
            This method is called just before an aggregate is returned to clients, either from cache or from the repository.
            If you override this method, make sure you call the base implementation.
            </summary>
            <param name="aggregate">The aggregate that was requested.</param>
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`3.HasBeenUpdated(`2,`1)">
            <summary>
            Determines whether or not the specified <paramref name="aggregate"/> has been updated.
            </summary>
            <param name="aggregate">The aggregate to check.</param>
            <param name="originalVersion">The version of the aggregate when it was first retrieved.</param>
            <returns>
            <c>true</c> if this aggregate was updated; otherwise <c>false</c>.
            </returns>
            <remarks>
            The default implementation will simply compare the <paramref name="originalVersion"/>
            with the current version of the aggregate to determine if it was updated, assuming that
            with every update the version was incremented. If you use another versioning-approach
            when updating aggregates, you need to override this method and implement your own strategy.
            </remarks>
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`3.NewAggregateNotFoundByKeyException``1(``0)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Messaging.Domain.AggregateNotFoundByKeyException`1"/> that indicates that this repository
            was unable to retrieve an aggregate of type <typeparamref name="TAggregate"/> with the specified <paramref name="key"/>.
            </summary>
            <param name="key">Key of the aggregate that was not found.</param>
            <returns>A new <see cref="T:Kingo.Messaging.Domain.AggregateNotFoundByKeyException`1"/>.</returns>
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`3.Add(`2)">
            <summary>
            Marks the specified aggregate as 'inserted' or 'updated', depending on context.
            </summary>
            <param name="aggregate">The aggregate to add.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="aggregate"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`3.OnAggregateAdded(`2)">
            <summary>
            This method is called just after a new aggregate was added to this repository. If you override
            this method, make sure you call the base implementation.
            </summary>
            <param name="aggregate">The aggregate that was in.</param>
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`3.NewDuplicateKeyException``1(``0)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Messaging.Domain.DuplicateKeyException`1"/> indicating that an aggregate could not
            be added to the repository because an aggregate with the same key already exists.
            </summary>
            <typeparam name="T">Type of the key.</typeparam>
            <param name="key">The key that was already present.</param>
            <returns>A new <see cref="T:Kingo.Messaging.Domain.DuplicateKeyException`1"/> that can be thrown when an insert failed.</returns>
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`3.RemoveByKey(`0)">
            <summary>
            Marks the aggregate with the specified <paramref name="key"/> as deleted.
            </summary>
            <param name="key">Key of the aggregate to remove.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`3.OnAggregateRemoved``1(``0)">
            <summary>
            This method is called just after a new aggregate was removed from this repository. If you override
            this method, make sure you call the base implementation.
            </summary>
            <param name="key">Key of the aggregate that was removed.</param>
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`3.DeleteAsync(`0,Kingo.Messaging.Domain.IWritableEventStream{`0,`1})">
            <summary>
            Deletes / removes a certain instance from the underlying Data Store.
            </summary>
            <param name="key">Key of the aggregate to remove.</param> 
            <param name="domainEventStream">
            Stream that can be used to publish any events that result from an aggregate being deleted.
            </param>       
        </member>
        <member name="P:Kingo.Messaging.Domain.Repository`3.TypeToContractMap">
            <summary>
            Returns the map that maps each type to a specific contract, which is used to serialize and deserialize snapshots and events.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Domain.Repository`3.IsDisposed">
            <summary>
            Indicates whether not this instance has been disposed.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Domain.Repository`3.EnlistAutomatically">
            <summary>
            Indicates whether or not this repository must enlist with the <see cref="T:Kingo.Messaging.MessageProcessor"/>
            automatically when (possible) changes are detected. Default is <c>true</c>.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.EventStore`3.InsertEventsAsync(Kingo.Messaging.Domain.Snapshot{`0,`1},System.Nullable{`1},System.Collections.Generic.IEnumerable{Kingo.Messaging.Domain.Event{`0,`1}})">
            <summary>
            When implemented, appends all specified <paramref name="events"/> to the event store. As an optimization technique,
            this method can also be used to store a snapshot of the specified <paramref name="snapshot"/>, so that the number of
            events required to read from the event store can be maximized.
            </summary>
            <param name="snapshot">The aggregate that was created or updated.</param>
            <param name="originalVersion">The original version of the aggregate. Will be <c>null</c> if the aggregate is new.</param>
            <param name="events">A collection of events that were published during this session and need to be stored in the event store.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> representing the insert operation. This task should return
            <c>true</c> if the flush succeeded or <c>false</c> if a concurrency conflict was detected.
            </returns>
        </member>
        <member name="T:Kingo.Messaging.Domain.Event`2">
            <summary>
            Represents an event that is mapped to its contract.
            </summary>
            <typeparam name="TKey">Key-type of an aggregate.</typeparam>
            <typeparam name="TVersion">Version-type of an aggregate.</typeparam>
        </member>
        <member name="T:Kingo.Messaging.Domain.SnapshotOrEvent`2">
            <summary>
            Represents either a snapshot or an event that is mapped to its contract.
            </summary>
            <typeparam name="TKey">Key-type of an aggregate.</typeparam>
            <typeparam name="TVersion">Version-type of an aggregate.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.Domain.SnapshotOrEvent`2.ToString">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.Domain.SnapshotOrEvent`2.Contract">
            <summary>
            Returns the contract to which the snapshot or event is mapped.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Domain.Event`2.Value">
            <summary>
            Returns the event that was published by the aggregate.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.Domain.IRepository`2">
            <summary>
            When implemented by a class, represents a generic repository of a certain type of aggregate.
            </summary>
            <typeparam name="TKey">Type of the primary key of the aggregate.</typeparam>
            <typeparam name="TAggregate">Type of the aggregate,</typeparam>
        </member>
        <member name="M:Kingo.Messaging.Domain.IRepository`2.GetByIdAsync(`0)">
            <summary>
            Retrieves the aggregate with the specified <paramref name="key"/> from the repository.
            </summary>
            <param name="key">Key (id) of the aggregate to retrieve.</param>
            <returns>A task that will yield the aggregate.</returns>
            <exception cref="T:Kingo.Messaging.Domain.AggregateNotFoundByKeyException`1">
            No aggregate with the specified <paramref name="key"/> was found in the repository.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.IRepository`2.Add(`1)">
            <summary>
            Adds the specified <paramref name="aggregate"/> to the repository so that it can later be persisted.
            </summary>
            <param name="aggregate">The aggregate to add.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="aggregate"/> is <c>null</c>.
            </exception>
            <exception cref="T:Kingo.Messaging.Domain.DuplicateKeyException`1">
            Another aggregate with the same key is already present in the repository.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.IRepository`2.RemoveById(`0)">
            <summary>
            Removes the aggregate with the specified <paramref name="key"/> from the repository, so that
            it can later be deleted.
            </summary>
            <param name="key">Key (id) of the aggregate to remove.</param>
        </member>
        <member name="T:Kingo.Messaging.Domain.SnapshotRepository`3">
            <summary>
            Represents a repository that stores its aggregates as snapshots.
            </summary>
            <typeparam name="TKey">Type of the key that identifies an aggregate.</typeparam>
            <typeparam name="TVersion">Type of the version of the aggregate.</typeparam>
            <typeparam name="TAggregate">Type of aggregates that are managed.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.Domain.SnapshotRepository`3.InsertAsync(Kingo.Messaging.Domain.Snapshot{`0,`1})">
            <summary>
            Inserts a new snapshot into this repository.
            </summary>
            <param name="snapshot">Snapshot of the aggregate to insert.</param>                         
        </member>
        <member name="M:Kingo.Messaging.Domain.SnapshotRepository`3.UpdateAsync(Kingo.Messaging.Domain.Snapshot{`0,`1},`1)">
            <summary>
            When overridden, updates / overwrites a previous version with a new version.
            </summary>
            <param name="snapshot">Snapshot of the aggregate to update.</param>        
            <param name="originalVersion">
            The version of the aggregate before it was updated.
            </param>        
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> representing the update operation. This task should return
            <c>true</c> if the update succeeded or <c>false</c> if a concurrency conflict was detected.
            </returns>
        </member>
        <member name="T:Kingo.Messaging.IMessageHandlerOrQueryWrapper">
            <summary>
            When implemented by a class, represents a provider of attributes that are declared
            on a class or interface method implementation of a <see cref="T:Kingo.Messaging.IMessageHandler`1"/>
            or a <see cref="T:Kingo.Messaging.Query`2"/>.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.IMessageHandlerOrQueryWrapper.TryGetClassAttributeOfType``1(``0@)">
            <summary>
            Attempts to retrieve a single attribute of type <typeparamref name="TAttribute"/> defined on the class of this instance.
            </summary>
            <typeparam name="TAttribute">Type of the attribute to retrieve.</typeparam>
            <param name="attribute">
            When this method returns <c>true</c>, this parameter will refer to the retrieved attribute;
            otherwise it will be <c>null</c>.
            </param>
            <returns><c>true</c> if the attribute was retrieved; otherwise <c>false</c>.</returns>
            <exception cref="T:System.InvalidOperationException">
            Multiple attribute defined of the class are assignable to type <typeparamref name="TAttribute"/>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.IMessageHandlerOrQueryWrapper.TryGetMethodAttributeOfType``1(``0@)">
            <summary>
            Attempts to retrieve a single attribute of type <typeparamref name="TAttribute"/> defined on the method on this instance.
            </summary>
            <typeparam name="TAttribute">Type of the attribute to retrieve.</typeparam>
            <param name="attribute">
            When this method returns <c>true</c>, this parameter will refer to the retrieved attribute;
            otherwise it will be <c>null</c>.
            </param>
            <returns><c>true</c> if the attribute was retrieved; otherwise <c>false</c>.</returns>
            <exception cref="T:System.InvalidOperationException">
            Multiple attribute defined of the method are assignable to type <typeparamref name="TAttribute"/>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.IMessageHandlerOrQueryWrapper.GetClassAttributesOfType``1">
            <summary>
            Retrieves all attributes of type <typeparamref name="TAttribute"/> that are declared on the class of this instance.
            </summary>
            <typeparam name="TAttribute">Type of the attribute to retrieve.</typeparam>
            <returns>A collection of attributes.</returns>
        </member>
        <member name="M:Kingo.Messaging.IMessageHandlerOrQueryWrapper.GetMethodAttributesOfType``1">
            <summary>
            Retrieves all attributes of type <typeparamref name="TAttribute"/> that are declared on the method of this instance.
            </summary>
            <typeparam name="TAttribute">Type of the attribute to retrieve.</typeparam>
            <returns>A collection of attributes.</returns>
        </member>
        <member name="M:Kingo.Messaging.ClassAndMethodAttributeProvider.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.ClassAndMethodAttributeProvider.Equals(Kingo.Messaging.ClassAndMethodAttributeProvider)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.ClassAndMethodAttributeProvider.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.Domain.AggregateNotFoundByKeyException`1">
            <summary>
            This type of exception is thrown when a <see cref="T:Kingo.Messaging.Domain.Repository`3"/> was unable to retrieve,
            an <see cref="T:Kingo.Messaging.Domain.IHasKeyAndVersion`2"/> by its key.
            </summary>    
            <typeparam name="TKey">Type of the key of the aggregate.</typeparam>
        </member>
        <member name="T:Kingo.Messaging.Domain.AggregateNotFoundException">
            <summary>
            This type of exception is thrown when a <see cref="T:Kingo.Messaging.Domain.Repository`3"/> was unable to retrieve,
            insert, update or delete an <see cref="T:Kingo.Messaging.Domain.IHasKeyAndVersion`2"/>.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateNotFoundException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.AggregateNotFoundException"/> class.
            </summary>        
            <param name="aggregateType">Type of the aggregate that was not found.</param>        
            <param name="message">Message of the exception.</param>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="aggregateType"/> is <c>null</c>.
            </exception>      
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateNotFoundException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.AggregateNotFoundException"/> class.
            </summary>        
            <param name="aggregateType">Type of the aggregate that was not found.</param>        
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of the exception.</param>   
            <exception cref="T:System.ArgumentNullException">
            <paramref name="aggregateType"/> is <c>null</c>.
            </exception>     
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.AggregateNotFoundException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.Domain.AggregateNotFoundException.AggregateType">
            <summary>
            Returns the <see cref="T:System.Type"/> of the aggregate that was not found.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateNotFoundByKeyException`1.#ctor(System.Type,`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.AggregateNotFoundByKeyException`1"/> class.
            </summary>
            <param name="aggregateType">Type of the aggregate that was not found.</param>
            <param name="aggregateKey">Key of the aggregate that was not found.</param>
            <param name="message">Message of the exception.</param>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="aggregateType"/> or <paramref name="aggregateKey"/> is <c>null</c>.
            </exception>      
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateNotFoundByKeyException`1.#ctor(System.Type,`0,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.AggregateNotFoundByKeyException`1"/> class.
            </summary>
            <param name="aggregateType">Type of the aggregate that was not found.</param>
            <param name="aggregateKey">Key of the aggregate that was not found.</param>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of the exception.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="aggregateType"/> or <paramref name="aggregateKey"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateNotFoundByKeyException`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.AggregateNotFoundByKeyException`1"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateNotFoundByKeyException`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.Domain.AggregateNotFoundByKeyException`1.AggregateKey">
            <summary>
            Key of the aggregate that was not found.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.Domain.Snapshot`2">
            <summary>
            Represents a snapshot that is mapped to its contract.
            </summary>
            <typeparam name="TKey">Key-type of an aggregate.</typeparam>
            <typeparam name="TVersion">Version-type of an aggregate.</typeparam>
        </member>
        <member name="P:Kingo.Messaging.Domain.Snapshot`2.Value">
            <summary>
            Returns the snapshot of the aggregate.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.TypeToContractMap">
            <summary>
            Provides a default implementation of the <see cref="T:Kingo.Messaging.ITypeToContractMap"/> interface.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.TypeToContractMap.#ctor(System.Collections.Generic.IEnumerable{System.Type},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.TypeToContractMap"/> class.
            </summary>
            <param name="typesToScan">A collection of types to scan for event and snapshot types.</param>
            <param name="contractDelimiter">Delimiter used to separate the namespace and name of a type in the contract.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="typesToScan"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.TypeToContractMap.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.TypeToContractMap.GetContract(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.TypeToContractMap.GetType(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.TypeToContractMap.Filter(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Places a filter on the specified <paramref name="typesToScan"/>. The default implementation
            only selects non-abstract, non-generic class types.       
            </summary>
            <param name="typesToScan">The total set of types to scan.</param>
            <returns>A filtered collection of types to scan.</returns>
        </member>
        <member name="M:Kingo.Messaging.TypeToContractMap.MapToContract(System.Type,System.String)">
            <summary>
            Maps a type to a specific contract.
            </summary>
            <param name="type">The type to map.</param>
            <param name="contractDelimiter">Delimiter used to separate the namespace and name of a type in the contract.</param>        
            <returns>The contract to which the specified <paramref name="type"/> is mapped.</returns>
        </member>
        <member name="M:Kingo.Messaging.TypeToContractMap.FromLayerConfiguration(Kingo.Messaging.LayerConfiguration,System.String)">
            <summary>
            Scans all types from the <see cref="P:Kingo.Messaging.LayerConfiguration.ApiLayer"/>, <see cref="P:Kingo.Messaging.LayerConfiguration.DomainLayer"/>
            and <see cref="P:Kingo.Messaging.LayerConfiguration.DataAccessLayer"/> and auto-maps all messages and aggregates found in those
            layers.
            </summary>
            <param name="layers">A collection of logical application layers.</param>
            <param name="contractDelimiter">Delimiter used to separate the namespace and name of a type in the contract.</param>
            <returns>A mapping between all relevant types of the specified layers and their contract.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="layers"/> is <c>null</c>.
            </exception>
        </member>
        <member name="F:Kingo.Messaging.TypeToContractMap.Empty">
            <summary>
            Represents an empty map.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.TypeToContractMap.FullyQualifiedName">
            <summary>
            Represents a map that maps each type to its fully qualified name and back.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.TypeToContractMapException">
            <summary>
            This exception is thrown when a two or more types were mapped to the same contract
            inside a <see cref="T:Kingo.Messaging.ITypeToContractMap"/>.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.TypeToContractMapException.#ctor(System.Type,System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.TypeToContractMapException"/> class.
            </summary>
            <param name="type1">The first type that maps to the specified <paramref name="contract"/>.</param>
            <param name="type2">The second type that maps to the specified <paramref name="contract"/>.</param>
            <param name="contract">The contract that both types are mapped to.</param>
            <param name="message">The exception message.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type1"/>, <paramref name="type2"/> or <paramref name="contract"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.TypeToContractMapException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.TypeToContractMapException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Kingo.Messaging.TypeToContractMapException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.TypeToContractMapException.Type1">
            <summary>
            The first type that maps to the specified <see cref="P:Kingo.Messaging.TypeToContractMapException.Contract"/>.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.TypeToContractMapException.Type2">
            <summary>
            The second type that maps to the specified <see cref="P:Kingo.Messaging.TypeToContractMapException.Contract"/>.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.TypeToContractMapException.Contract">
            <summary>
            The contract that both types are mapped to.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.MessageSequence">
            <summary>
            Represents a sequence of messages, ready to be executed.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.IMessageSequence">
            <summary>
            When implemented by a class, represents a sequence of messages, ready to be executed.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.IMessageSequence.ProcessWith(Kingo.Messaging.IMessageProcessor)">
            <summary>
            Processes all messages of this sequence using the specified processor.
            </summary>
            <param name="processor">Processor that will be used to execute this sequence.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="processor"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.IMessageSequence.ProcessWithAsync(Kingo.Messaging.IMessageProcessor)">
            <summary>
            Processes all messages of this sequence using the specified processor asynchronously.
            </summary>
            <param name="processor">Processor that will be used to execute this sequence.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="processor"/> is <c>null</c>.
            </exception>
            <returns>A task carrying out this operation.</returns>
        </member>
        <member name="M:Kingo.Messaging.IMessageSequence.ProcessWithAsync(Kingo.Messaging.IMessageProcessor,System.Threading.CancellationToken)">
            <summary>
            Processes all messages of this sequence using the specified processor asynchronously.
            </summary>
            <param name="processor">Processor that will be used to execute this sequence.</param>
            <param name="token">Token that can be used to cancel the operation.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="processor"/> is <c>null</c>.
            </exception>
            <returns>A task carrying out this operation.</returns>
        </member>
        <member name="M:Kingo.Messaging.IMessageSequence.Append(Kingo.Messaging.IMessageSequence)">
            <summary>
            Appends the specified sequence to the current sequence and returns the resulting sequence.
            </summary>
            <param name="sequence">The sequence of messages to append.</param>
            <returns>The new, concatenated sequence of messages.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sequence"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.IMessageSequence.Append``1(``0)">
            <summary>
            Appends the specified message to the current sequence and returns the resulting sequence.
            </summary>
            <typeparam name="TMessage">Type of the message to append.</typeparam>
            <param name="message">The message to append.</param>
            <returns>The new, concatenated sequence of messages.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.IMessageSequence.Append``1(``0,System.Action{``0})">
            <summary>
            Appends the specified message to the current sequence and returns the resulting sequence.
            </summary>
            <typeparam name="TMessage">Type of the message to append.</typeparam>
            <param name="message">The message to append.</param>
            <param name="handler">The handler to invoke.</param>
            <returns>The new, concatenated sequence of messages.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.IMessageSequence.Append``1(``0,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Appends the specified message to the current sequence and returns the resulting sequence.
            </summary>
            <typeparam name="TMessage">Type of the message to append.</typeparam>
            <param name="message">The message to append.</param>
            <param name="handler">The handler to invoke.</param>
            <returns>The new, concatenated sequence of messages.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.IMessageSequence.Append``1(``0,Kingo.Messaging.IMessageHandler{``0})">
            <summary>
            Appends the specified message to the current sequence and returns the resulting sequence.
            </summary>
            <typeparam name="TMessage">Type of the message to append.</typeparam>
            <param name="message">The message to append.</param>
            <param name="handler">The handler to invoke.</param>
            <returns>The new, concatenated sequence of messages.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.MessageSequence.ProcessWith(Kingo.Messaging.IMessageProcessor)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageSequence.ProcessWithAsync(Kingo.Messaging.IMessageProcessor)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageSequence.ProcessWithAsync(Kingo.Messaging.IMessageProcessor,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageSequence.Append(Kingo.Messaging.IMessageSequence)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageSequence.Append``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageSequence.Append``1(``0,System.Action{``0})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageSequence.Append``1(``0,System.Func{``0,System.Threading.Tasks.Task})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageSequence.Append``1(``0,Kingo.Messaging.IMessageHandler{``0})">
            <inheritdoc />
        </member>
        <member name="F:Kingo.Messaging.MessageSequence.EmptySequence">
            <summary>
            Represents a sequence with no elements.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.MessageSequence.Concatenate(System.Collections.Generic.IEnumerable{Kingo.Messaging.IMessageSequence})">
            <summary>
            Creates and returns a concatened sequence of messages.
            </summary>
            <param name="messages">The messages to concatenate.</param>
            <returns>A concatened sequence of messages.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messages"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.IMessageHandlerConfiguration">
            <summary>
            When implemented by a class, contains all configuration settings for a <see cref="T:Kingo.Messaging.IMessageHandler`1"/>.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.IMessageHandlerConfiguration.Lifetime">
            <summary>
            The lifetime of the <see cref="T:Kingo.Messaging.IMessageHandler`1"/>.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.IMessageHandlerConfiguration.Sources">
            <summary>
            Specifies which source(s) the message is accepted from.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.InvalidEventException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.InvalidEventException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Kingo.Messaging.InvalidEventException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.IQuery`1">
            <summary>
            When implemented by a class, represents a query that accepts a message
            and returns a result in the form of a <typeparamref name="TMessageOut"/>.
            </summary>    
            <typeparam name="TMessageOut">Type of the message that is returned by this query.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.IQuery`1.ExecuteAsync">
            <summary>
            Executes the query.
            </summary>        
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the operation.</returns>        
        </member>
        <member name="T:Kingo.Messaging.MessageHandlerConfiguration">
            <summary>
            Contains all configuration settings for a <see cref="T:Kingo.Messaging.IMessageHandler`1"/>.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.MessageHandlerConfiguration.Default">
            <summary>
            The default configuration that is applied for message handlers.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerConfiguration.#ctor(Kingo.Messaging.InstanceLifetime)">
            <summary>
            Initializes a new instance of a <see cref="T:Kingo.Messaging.MessageHandlerConfiguration"/> structure.
            </summary>
            <param name="lifetime">The lifetime of the <see cref="T:Kingo.Messaging.IMessageHandler`1"/>.</param>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerConfiguration.#ctor(Kingo.Messaging.InstanceLifetime,Kingo.Messaging.MessageSources)">
            <summary>
            Initializes a new instance of a <see cref="T:Kingo.Messaging.MessageHandlerConfiguration"/> structure.
            </summary>
            <param name="lifetime">The lifetime of the <see cref="T:Kingo.Messaging.IMessageHandler`1"/>.</param>
            <param name="sources">Specifies which source(s) the message is accepted from.</param>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerConfiguration.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is an instance of <see cref="T:Kingo.Messaging.MessageHandlerConfiguration"/>
            and equals the value of this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerConfiguration.Equals(Kingo.Messaging.MessageHandlerConfiguration)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Kingo.Messaging.MessageHandlerConfiguration"/> value.
            </summary>
            <param name="other">A <see cref="T:Kingo.Messaging.MessageHandlerConfiguration"/> value to compare to this instance.</param>
            <returns>
            <c>true</c> if <paramref name="other"/> has the same value as this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerConfiguration.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerConfiguration.ToString">
            <summary>Converts this value to its equivalent string-representation.</summary>
            <returns>The string-representation of this value.</returns>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerConfiguration.op_Equality(Kingo.Messaging.MessageHandlerConfiguration,Kingo.Messaging.MessageHandlerConfiguration)">
            <summary>Determines whether two specified <see cref="T:Kingo.Messaging.MessageHandlerConfiguration"/>-instances have the same value.</summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare</param>
            <returns><c>true</c> if both instances have the same value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerConfiguration.op_Inequality(Kingo.Messaging.MessageHandlerConfiguration,Kingo.Messaging.MessageHandlerConfiguration)">
            <summary>Determines whether two specified <see cref="T:Kingo.Messaging.MessageHandlerConfiguration"/>-instances do not have the same value.</summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare</param>
            <returns><c>true</c> if both instances do not have the same value; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Kingo.Messaging.MessageHandlerConfiguration.Lifetime">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.MessageHandlerConfiguration.Sources">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.IMessageHandlerWrapper">
            <summary>
            When implemented by a class, represents a <see cref="T:Kingo.Messaging.IMessageHandler`1"/> that is
            ready to be invoked with a specific <see cref="P:Kingo.Messaging.IMessageHandlerWrapper.Message"/>.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.IMessageHandlerWrapper.InvokeAsync">
            <summary>
            Invokes the underlying <see cref="T:Kingo.Messaging.IMessageHandler`1"/> with the <see cref="P:Kingo.Messaging.IMessageHandlerWrapper.Message"/>.
            </summary>
            <returns>A task carrying out the invocation.</returns>
        </member>
        <member name="P:Kingo.Messaging.IMessageHandlerWrapper.Message">
            <summary>
            The message that will be passed to the <see cref="T:Kingo.Messaging.IMessageHandler`1"/>.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.IMessageHandler`1">
            <summary>
            When implemented by a class, handles messages of type <paramtyperef name="TMessage" />.
            </summary>
            <typeparam name="TMessage">Type of the message to handle.</typeparam>  
        </member>
        <member name="M:Kingo.Messaging.IMessageHandler`1.HandleAsync(`0)">
            <summary>
            Handles the specified <paramref name="message"/>.
            </summary>
            <param name="message">A message.</param>
            <returns>A task carrying out the invocation.</returns>        
        </member>
        <member name="T:Kingo.Messaging.MessageSequenceNode`1">
            <summary>
            Represents a sequence containing just a single message.
            </summary>
            <typeparam name="TMessage">Type of the message.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.MessageSequenceNode`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.MessageSequenceNode`1"/> class.
            </summary>
            <param name="message">The message of this sequence.</param>          
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.MessageSequenceNode`1.#ctor(`0,System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.MessageSequenceNode`1"/> class.
            </summary>
            <param name="message">The message of this sequence.</param>  
            <param name="handler">The handler that will handle the message. Specify <c>null</c> if the handler is implicit.</param>      
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.MessageSequenceNode`1.#ctor(`0,System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.MessageSequenceNode`1"/> class.
            </summary>
            <param name="message">The message of this sequence.</param>  
            <param name="handler">The handler that will handle the message. Specify <c>null</c> if the handler is implicit.</param>      
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.MessageSequenceNode`1.#ctor(`0,Kingo.Messaging.IMessageHandler{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.MessageSequenceNode`1"/> class.
            </summary>
            <param name="message">The message of this sequence.</param>  
            <param name="handler">The handler that will handle the message. Specify <c>null</c> if the handler is implicit.</param>      
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.MessageSequenceNode`1.ProcessWithAsync(Kingo.Messaging.IMessageProcessor,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.MessageSequenceNode`1.Message">
            <summary>
            The message of this sequence.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.MessageSequencePair">
            <summary>
            Represents a pair of message sequences put together as a single sequence.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.MessageSequencePair.#ctor(Kingo.Messaging.IMessageSequence,Kingo.Messaging.IMessageSequence)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.MessageSequencePair"/> class.
            </summary>
            <param name="left">The first sequence.</param>
            <param name="right">The second sequence.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="left"/> or <paramref name="right"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.MessageSequencePair.ProcessWithAsync(Kingo.Messaging.IMessageProcessor,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.MessageToStrategyMapping">
            <summary>
            Serves as a base class for every <see cref="T:Kingo.Messaging.MessageToStrategyMapping`1"/> instance.
            </summary>
        </member>
        <member name="T:Kingo.Clocks.ClockModule">
            <summary>
            This modules associates a <see cref="T:Kingo.Clocks.IClock"/> to the thread that will be handling the message.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.MessageHandlerModule">
            <summary>
            Serves as the base-class for all modules in a <see cref="T:Kingo.Messaging.IMessageHandler`1"/> pipeline.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerModule.InvokeAsync(Kingo.Messaging.IMessageHandlerWrapper)">
            <summary>
            Invokes the specified <paramref name="handler"/>.
            </summary>
            <returns>A task carrying out the invocation.</returns>        
        </member>
        <member name="M:Kingo.Clocks.ClockModule.#ctor(Kingo.Clocks.IClock)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Clocks.ClockModule"/> class.
            </summary>
            <param name="clock"></param>
        </member>
        <member name="M:Kingo.Clocks.ClockModule.InvokeAsync(Kingo.Messaging.IMessageHandlerWrapper)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.IMessageToStrategyMapping`1">
            <summary>
            When implemented by a class, represents a mapping from specific <see cref="T:Kingo.Messaging.IMessage">Messages</see>
            to certain strategies to use inside a <see cref="T:Kingo.Messaging.IMessageProcessor"/>'s pipeline.
            </summary>
            <typeparam name="TStrategy"></typeparam>
        </member>
        <member name="M:Kingo.Messaging.IMessageToStrategyMapping`1.TryGetStrategy(Kingo.Messaging.IMessage,`0@)">
            <summary>
            Attempts to retrieve a mapped <paramref name="strategy"/> for the specified <paramref name="message"/>.
            </summary>
            <param name="message">A message.</param>
            <param name="strategy">
            If a mapping is found, this parameter will refer to the mapped strategy when the method returns;
            otherwise, it will be <c>null</c>.
            </param>
            <returns><c>true</c> if a mapping exists for <paramref name="message"/>; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.IMessageToStrategyMapping`1.TryGetStrategy(System.Type,`0@)">
            <summary>
            Attempts to retrieve a mapped <paramref name="strategy"/> for the specified <paramref name="messageType"/>.
            </summary>
            <param name="messageType">A message type.</param>
            <param name="strategy">
            If a mapping is found, this parameter will refer to the mapped strategy when the method returns;
            otherwise, it will be <c>null</c>.
            </param>
            <returns><c>true</c> if a mapping exists for <paramref name="messageType"/>; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageType"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.IQueryWrapper`1">
            <summary>
            When implemented by a class, represents a <see cref="T:Kingo.Messaging.IQuery`2"/> ready to be executed.
            </summary>
            <typeparam name="TMessageOut">Type of the result of the query.</typeparam>
        </member>
        <member name="P:Kingo.Messaging.IQueryWrapper`1.MessageIn">
            <summary>
            Message containing the parameters of the query.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.DependencyAttribute">
            <summary>
            This attribute must be put on each dependency class to support auto-registration of it
            by the <see cref="T:Kingo.Messaging.MessageHandlerFactory"/> class.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.DependencyAttribute.#ctor(Kingo.Messaging.InstanceLifetime)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.DependencyAttribute"/> class.
            </summary>
            <param name="lifetime">The lifetime of the dependency.</param>
        </member>
        <member name="P:Kingo.Messaging.DependencyAttribute.Lifetime">
            <summary>
            The lifetime of the dependency.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.MessageHandler`1">
            <summary>
            Serves as a base class for all <see cref="T:Kingo.Messaging.IMessageHandler`1">MessageHandlers</see>.
            </summary>
            <typeparam name="TMessage">Type of message to handle.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.MessageHandler`1.HandleAsync(`0)">
            <inheritdoc />               
        </member>
        <member name="M:Kingo.Messaging.MessageHandler`1.Publish``1(``0)">
            <summary>
            Publishes the specified <paramref name="message"/> as part of the current Unit of Work,
            if a <see cref="T:Kingo.Messaging.UnitOfWorkContext"/> is active.
            </summary>
            <typeparam name="TEvent">Type of the message to publish.</typeparam>
            <param name="message">The message to publish.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="T:Kingo.Messaging.MessageHandlerModule`1">
            <summary>
            Server as a bas class for all <see cref="T:Kingo.Messaging.MessageHandlerModule">MessageHandlerModules</see> that associate
            each message with a specific <typeparamref name="TStrategy"/>.
            </summary>
            <typeparam name="TStrategy">Type of the strategy to associate with each message.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerModule`1.CreateMessageToStrategyMapping">
            <summary>
            Creates and returns a <see cref="T:Kingo.Messaging.IMessageToStrategyMapping`1"/> that contains a strategy
            for certain messages or message types.
            </summary>
            <returns>A <see cref="T:Kingo.Messaging.IMessageToStrategyMapping`1"/>.</returns>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerModule`1.InvokeAsync(Kingo.Messaging.IMessageHandlerWrapper)">
            <summary>
            Attempts to retrieve the associated strategy for the message on the specified <paramref name="handler"/>
            and then invokes <see cref="M:Kingo.Messaging.MessageHandlerModule`1.InvokeAsync(Kingo.Messaging.IMessageHandlerWrapper,`0)"/>.
            </summary>
            <param name="handler">The handler to invoke.</param>
            <returns>A task carrying out the invocation.</returns>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerModule`1.InvokeAsync(Kingo.Messaging.IMessageHandlerWrapper,`0)">
            <summary>
            Invokes the specified <paramref name="handler"/> using the specified <paramref name="strategy"/>.
            </summary>
            <param name="handler">The handler to invoke.</param>
            <param name="strategy">The strategy to use.</param>
            <returns>A task carrying out the invocation.</returns>
        </member>
        <member name="P:Kingo.Messaging.MessageHandlerModule`1.StrategyMapping">
            <summary>
            Returns the mapping of certain messages to specific strategies.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.MessageHandlerModule`1.DefaultStrategy">
            <summary>
            The default strategy to use when the message being handled is not explicitly associated with a specific strategy.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.MessageHandlerWrapper`1">
            <summary>
            Represents a wrapper of a message and it's handler to serve as a <see cref="T:Kingo.Messaging.IMessageHandlerWrapper"/>
            that can be used within a <see cref="T:Kingo.Messaging.IMessageProcessor"/>'s pipeline.
            </summary>
            <typeparam name="TMessage">Type of message to handle.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerWrapper`1.#ctor(`0,Kingo.Messaging.IMessageHandler{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.MessageHandlerWrapper`1"/> class.
            </summary>
            <param name="message">The message to handle.</param>
            <param name="handler">The handler to invoke.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> or <paramref name="handler"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerWrapper`1.TryGetClassAttributeOfType``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerWrapper`1.TryGetMethodAttributeOfType``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerWrapper`1.GetClassAttributesOfType``1">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerWrapper`1.GetMethodAttributesOfType``1">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerWrapper`1.InvokeAsync">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.MessageHandlerWrapper`1.Message">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.MessageSources">
            <summary>
            Represents a (collection of) source(s) a message can originate from.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.MessageSources.Undefined">
            <summary>
            Represents a source that has not been defined.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.MessageSources.InternalMessageBus">
            <summary>
            Represents the <see cref="T:Kingo.Messaging.IMessageProcessorBus">Internal Bus</see>.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.MessageSources.ExternalMessageBus">
            <summary>
            Represents any external source or bus.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.MessageSources.Any">
            <summary>
            Represents all sources.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.NullMessage.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.NullMessage.Copy">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.QueryDelegate`1">
            <summary>
            This type is used to support conversion from a <see cref="T:System.Func`1"/> to a <see cref="T:Kingo.Messaging.IQuery`1"/>.
            </summary>    
            <typeparam name="TMessageOut">Type of the message that is returned by this query.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.QueryDelegate`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.QueryDelegate`1"/> class.
            </summary>
            <param name="query">The query to invoke.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.QueryDelegate`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.QueryDelegate`1"/> class.
            </summary>
            <param name="query">The query to invoke.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.QueryDelegate`1.ExecuteAsync">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.QueryModule">
            <summary>
            Serves as a base class for modules that are part of a <see cref="T:Kingo.Messaging.IQuery`2"/>-pipeline.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.QueryModule.InvokeAsync``1(Kingo.Messaging.IQueryWrapper{``0})">
            <summary>
            Executes the specified <paramref name="query"/> while adding specific pipeline logic.
            </summary>
            <typeparam name="TMessageOut">Type of the result of <paramref name="query"/>.</typeparam>
            <param name="query">The handler to execute.</param>        
            <returns>A task executing the query.</returns>        
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.QueryModule`1">
            <summary>
            Serves as a base class for all <see cref="T:Kingo.Messaging.QueryModule">QueryModules</see> that associate
            each message with a specific <typeparamref name="TStrategy"/>.
            </summary>
            <typeparam name="TStrategy">Type of the strategy to associate with each message.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.QueryModule`1.CreateMessageToStrategyMapping">
            <summary>
            Creates and returns a <see cref="T:Kingo.Messaging.IMessageToStrategyMapping`1"/> that contains a strategy
            for certain messages or message types.
            </summary>
            <returns>A <see cref="T:Kingo.Messaging.IMessageToStrategyMapping`1"/>.</returns>
        </member>
        <member name="M:Kingo.Messaging.QueryModule`1.InvokeAsync``1(Kingo.Messaging.IQueryWrapper{``0})">
            <summary>
            Attempts to retrieve the associated strategy for the message on the specified <paramref name="query"/>
            and then invokes <see cref="M:Kingo.Messaging.QueryModule`1.InvokeAsync``1(Kingo.Messaging.IQueryWrapper{``0},`0)"/>.
            </summary>
            <param name="query">The query to invoke.</param>
            <returns>A task executing the query.</returns>
        </member>
        <member name="M:Kingo.Messaging.QueryModule`1.InvokeAsync``1(Kingo.Messaging.IQueryWrapper{``0},`0)">
            <summary>
            Invokes the specified <paramref name="query"/> using the specified <paramref name="strategy"/>.
            </summary>
            <param name="query">The query to invoke.</param>
            <param name="strategy">The strategy to use.</param>
            <returns>A task executing the query.</returns>
        </member>
        <member name="P:Kingo.Messaging.QueryModule`1.StrategyMapping">
            <summary>
            Returns the mapping of certain messages to specific strategies.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.QueryModule`1.DefaultStrategy">
            <summary>
            The default strategy to use when the message being handled is not explicitly associated with a specific strategy.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.QueryWrapper`1.TryGetClassAttributeOfType``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.QueryWrapper`1.TryGetMethodAttributeOfType``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.QueryWrapper`1.GetClassAttributesOfType``1">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.QueryWrapper`1.GetMethodAttributesOfType``1">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.QueryWrapper`1.ExecuteAsync">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.QueryWrapper`1.MessageIn">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.QueryWrapper`2.TryGetClassAttributeOfType``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.QueryWrapper`2.TryGetMethodAttributeOfType``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.QueryWrapper`2.GetClassAttributesOfType``1">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.QueryWrapper`2.GetMethodAttributesOfType``1">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.QueryWrapper`2.ExecuteAsync">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.QueryWrapper`2.MessageIn">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.MessageHandlerFactory">
            <summary>
            When implemented, represents a factory of all message-handlers that are used to handle the messages
            for the <see cref="T:Kingo.Messaging.MessageProcessor"/>.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.MessageHandlerFactory"/> class.
            </summary>        
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.RegisterMessageHandlers(Kingo.Messaging.LayerConfiguration,System.Predicate{System.Type},System.Func{System.Type,Kingo.Messaging.IMessageHandlerConfiguration})">
            <summary>
            Registers all handlers found in the <see cref="P:Kingo.Messaging.LayerConfiguration.ApplicationLayer"/> and
            <see cref="P:Kingo.Messaging.LayerConfiguration.DataAccessLayer"/> of the specified <paramref name="layers"/>
            and satisfy the specified <paramref name="typeSelector"/> with this factory.
            </summary>
            <param name="layers">A collection of application layers to scan.</param>
            <param name="typeSelector">
            Selector that is used to select specific <see cref="T:Kingo.Messaging.IMessageHandler`1"/> classes.
            </param>
            <param name="configurationFactory">
            Optional delegate that can be used to configure a <see cref="T:Kingo.Messaging.IMessageHandlerWrapper"/> based on its type.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="layers"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.RegisterMessageHandlers(System.Collections.Generic.IEnumerable{System.Type},System.Predicate{System.Type},System.Func{System.Type,Kingo.Messaging.IMessageHandlerConfiguration})">
            <summary>
            Registers all handlers found in the specified collection of <paramref name="types"/> and satisfy
            the specified <paramref name="typeSelector"/> with this factory.
            </summary>
            <param name="types">A collection of types that will be scanned.</param>
            <param name="typeSelector">
            Selector that is used to select specific <see cref="T:Kingo.Messaging.IMessageHandler`1"/> classes.
            </param>
            <param name="configurationFactory">
            Optional delegate that can be used to configure a <see cref="T:Kingo.Messaging.IMessageHandlerWrapper"/> based on its type.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="types"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.CreateMessageHandlersFor``1(``0,Kingo.Messaging.MessageSources)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.Resolve(System.Type)">
            <summary>
            Create an instance of the requested message handler type.
            </summary>
            <param name="type">Type to create.</param>
            <returns>An instance of the requested message handler type.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>                
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.RegisterRepositories(Kingo.Messaging.LayerConfiguration,System.String,System.Func{System.Type,Kingo.Messaging.IDependencyConfiguration})">
            <summary>
            Registers all repository interface types that are found in the <see cref="P:Kingo.Messaging.LayerConfiguration.DomainLayer"/> and
            <see cref="P:Kingo.Messaging.LayerConfiguration.DataAccessLayer"/> of the specified <paramref name="layers"/>,
            along with with their implementations.
            </summary>
            <param name="layers">A collection of types to scan.</param>
            <param name="postfix">The postfix that every repository interface ends with. Default is <c>Repository</c>.</param>
            <param name="configurationFactory">
            Optional delegate that can be used to configure a dependency based on its type.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="layers"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.RegisterRepositories(System.Collections.Generic.IEnumerable{System.Type},System.String,System.Func{System.Type,Kingo.Messaging.IDependencyConfiguration})">
            <summary>
            Registers all repository interface types that are found inside the specified collection of <paramref name="types"/>
            along with their implementations.
            </summary>
            <param name="types">A collection of types to scan.</param>
            <param name="postfix">The postfix that every repository interface ends with. Default is <c>Repository</c>.</param>
            <param name="configurationFactory">
            Optional delegate that can be used to configure a dependency based on its type.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="types"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.RegisterDependencies(System.Collections.Generic.IEnumerable{System.Type},System.Predicate{System.Type},System.Func{System.Type,Kingo.Messaging.IDependencyConfiguration})">
            <summary>
            Registers a set of types that are found in the specified assembies
            and are selected by the specified <paramref name="concreteTypePredicate"/>.
            </summary>
            <param name="types">A collection of types to scan.</param>
            <param name="concreteTypePredicate">A predicate that identifies which types should be registered as dependencies.</param>    
            <param name="configurationFactory">
            Optional delegate that can be used to configure a dependency based on its type.
            </param>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="types"/> or <paramref name="concreteTypePredicate"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.RegisterDependencies(System.Collections.Generic.IEnumerable{System.Type},System.Predicate{System.Type},System.Predicate{System.Type},System.Func{System.Type,Kingo.Messaging.IDependencyConfiguration})">
            <summary>
            Registers a set of abstract types that are mapped to a set of concrete types. Both sets are found in the specified assembies
            and are selected by the specified <paramref name="concreteTypePredicate"/> and <paramref name="abstractTypePredicate"/>.
            </summary>
            <param name="types">A collection of types to scan.</param>
            <param name="concreteTypePredicate">A predicate that identifies which concrete types should be registered as dependencies (optional).</param>
            <param name="abstractTypePredicate">A predicate that identifies which abstract types should be registered as dependencies.</param>
            <param name="configurationFactory">
            Optional delegate that can be used to configure a dependency based on its type.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="types"/> or <paramref name="abstractTypePredicate"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            One or more types specified by <paramref name="abstractTypePredicate"/> match with multiple concrete implementations.
            </exception>                
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.RegisterWithPerResolveLifetime(System.Type,System.Type)">
            <summary>
            Registers a certain type for a specified <paramref name="abstractType"/> of which a new instance is
            created each time it is resolved, for a certain abstract type.
            </summary>
            <param name="concreteType">A concrete type that implements or is a sub-class of <paramref name="abstractType"/>, if specified.</param>
            <param name="abstractType">An abstract type.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="concreteType"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.RegisterWithPerUnitOfWorkLifetime(System.Type,System.Type)">
            <summary>
            Registers a certain type to resolve for a specified <paramref name="abstractType"/>
            with a lifetime that spans a single Unit of Work.
            </summary>
            <param name="concreteType">A concrete type that implements or is a sub-class of <paramref name="abstractType"/>, if specified.</param>
            <param name="abstractType">An abstract type.</param>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="concreteType"/> is <c>null</c>.
            </exception>     
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.RegisterSingleton(System.Type,System.Type)">
            <summary>
            Registers a certain type with a lifetime that reflects that of a singleton for a certain <paramref name="abstractType"/>.
            </summary>
            <param name="concreteType">A concrete type that implements or is a sub-class of <paramref name="abstractType"/>, if specified.</param>
            <param name="abstractType">An abstract type.</param> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="concreteType"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.RegisterSingleton(System.Object,System.Type)">
            <summary>
            Registers a certain type with a lifetime that reflects that of a singleton for a certain <paramref name="abstractType"/>.
            </summary>
            <param name="concreteType">A concrete type that implements or is a sub-class of <paramref name="abstractType"/>, if specified.</param>
            <param name="abstractType">An abstract type.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="concreteType"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="P:Kingo.Messaging.MessageHandlerFactory.MessageHandlerCount">
            <summary>
            Returns the number of classes implementing the <see cref="T:Kingo.Messaging.IMessageHandler`1"/> interface have been registered in this factory.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.UnityFactory.RegisterWithPerResolveLifetime(System.Type,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.UnityFactory.RegisterWithPerUnitOfWorkLifetime(System.Type,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.UnityFactory.RegisterSingleton(System.Type,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.UnityFactory.RegisterSingleton(System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.UnityFactory.Resolve(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.UnityFactory.PerUnitOfWorkLifetimeManager">
            <summary>
            A LifetimeManager for Unity that registers it's dependencies at the current <see cref="T:Kingo.Messaging.UnitOfWorkContext"/>.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.UnityFactory.PerUnitOfWorkLifetimeManager.GetValue">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.UnityFactory.PerUnitOfWorkLifetimeManager.RemoveValue">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.UnityFactory.PerUnitOfWorkLifetimeManager.SetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Transactions.ITransactionScopeFactory">
            <summary>
            When implemented by a class, represents a factory for <see cref="T:System.Transactions.TransactionScope">TransactionScopes</see>.
            </summary>
        </member>
        <member name="M:Kingo.Transactions.ITransactionScopeFactory.CreateTransactionScope">
            <summary>
            Creates and returns a new <see cref="T:System.Transactions.TransactionScope"/>.
            </summary>
            <returns>A new <see cref="T:System.Transactions.TransactionScope"/>.</returns>
        </member>
        <member name="T:Kingo.Transactions.TransactionScopeAttribute">
            <summary>
            This attribute can be applied to messages to specify how a <see cref="T:System.Transactions.TransactionScope"/> should be created.
            </summary>
        </member>
        <member name="M:Kingo.Transactions.TransactionScopeAttribute.#ctor(System.Transactions.TransactionScopeOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Transactions.TransactionScopeAttribute"/> class.
            </summary>
            <param name="scopeOption">The <see cref="T:System.Transactions.TransactionScopeOption"/> to use.</param>        
        </member>
        <member name="M:Kingo.Transactions.TransactionScopeAttribute.#ctor(System.Transactions.TransactionScopeOption,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Transactions.TransactionScopeAttribute"/> class.
            </summary>
            <param name="scopeOption">The <see cref="T:System.Transactions.TransactionScopeOption"/> to use.</param>
            <param name="timeout">The timeout for the transaction.</param>        
        </member>
        <member name="M:Kingo.Transactions.TransactionScopeAttribute.#ctor(System.Transactions.TransactionScopeOption,System.String,System.Transactions.IsolationLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Transactions.TransactionScopeAttribute"/> class.
            </summary>
            <param name="scopeOption">The <see cref="T:System.Transactions.TransactionScopeOption"/> to use.</param>
            <param name="timeout">The timeout for the transaction.</param>
            <param name="isolationLevel">The <see cref="P:Kingo.Transactions.TransactionScopeAttribute.IsolationLevel"/> to use.</param>        
        </member>
        <member name="P:Kingo.Transactions.TransactionScopeAttribute.ScopeOption">
            <summary>
            Returns the <see cref="T:System.Transactions.TransactionScopeOption"/> that is used for the <see cref="T:System.Transactions.TransactionScope"/> to be created.
            </summary>
        </member>
        <member name="P:Kingo.Transactions.TransactionScopeAttribute.Timeout">
            <summary>
            Returns the timeout that is used for the <see cref="T:System.Transactions.TransactionScope"/> to be created.
            </summary>
        </member>
        <member name="P:Kingo.Transactions.TransactionScopeAttribute.IsolationLevel">
            <summary>
            Returns the <see cref="P:Kingo.Transactions.TransactionScopeAttribute.IsolationLevel"/> that is used for the <see cref="T:System.Transactions.TransactionScope"/> to be created.
            </summary>
        </member>
        <member name="T:Kingo.Transactions.TransactionScopeFactory">
            <summary>
            Represents a factory for <see cref="T:System.Transactions.TransactionScope">TransactionScopes</see>.
            </summary>
        </member>
        <member name="M:Kingo.Transactions.TransactionScopeFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Transactions.TransactionScopeFactory"/> class.
            </summary>        
        </member>
        <member name="M:Kingo.Transactions.TransactionScopeFactory.#ctor(System.Transactions.TransactionScopeOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Transactions.TransactionScopeFactory"/> class.
            </summary>        
            <param name="scopeOption">The default <see cref="T:System.Transactions.TransactionScopeOption"/> to use.</param>                
        </member>
        <member name="M:Kingo.Transactions.TransactionScopeFactory.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.IsolationLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Transactions.TransactionScopeFactory"/> class.
            </summary>        
            <param name="scopeOption">The default <see cref="T:System.Transactions.TransactionScopeOption"/> to use.</param>
            <param name="timeout">The default timeout to use.</param>
            <param name="isolationLevel">
            The default <see cref="T:System.Transactions.IsolationLevel"/> to use. If <see cref="F:System.Transactions.IsolationLevel.Unspecified"/> is specified,
            the actual <see cref="T:System.Transactions.IsolationLevel"/> applied will be that of any running <see cref="T:System.Transactions.Transaction"/> or
            of the .NET Framework's default <see cref="T:System.Transactions.IsolationLevel"/> setting, <see cref="F:System.Transactions.IsolationLevel.Serializable"/>.
            </param>                
        </member>
        <member name="M:Kingo.Transactions.TransactionScopeFactory.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Transactions.TransactionScopeFactory"/> class.
            </summary>        
            <param name="scopeOption">The default <see cref="T:System.Transactions.TransactionScopeOption"/> to use.</param>
            <param name="transactionOptions">The default <see cref="T:System.Transactions.TransactionOptions"/> to use.</param>        
        </member>
        <member name="M:Kingo.Transactions.TransactionScopeFactory.CreateTransactionScope">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Transactions.TransactionScopeModule">
            <summary>
            Represents a module that creates a <see cref="T:System.Transactions.TransactionScope"/> before calling the next handler.
            </summary>        
        </member>
        <member name="M:Kingo.Transactions.TransactionScopeModule.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.IsolationLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Transactions.TransactionScopeModule"/> class.
            </summary>              
            <param name="scopeOption">The default <see cref="T:System.Transactions.TransactionScopeOption"/> to use.</param>
            <param name="timeout">The default timeout to use.</param>
            <param name="isolationLevel">
            The default <see cref="T:System.Transactions.IsolationLevel"/> to use. If <see cref="F:System.Transactions.IsolationLevel.Unspecified"/> is specified,
            the actual <see cref="T:System.Transactions.IsolationLevel"/> applied will be that of any running <see cref="T:System.Transactions.Transaction"/> or
            of the .NET Framework's default <see cref="T:System.Transactions.IsolationLevel"/> setting, <see cref="F:System.Transactions.IsolationLevel.Serializable"/>.
            </param>                
        </member>
        <member name="M:Kingo.Transactions.TransactionScopeModule.#ctor(Kingo.Transactions.ITransactionScopeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Transactions.TransactionScopeModule"/> class.
            </summary>        
            <param name="defaultFactory">
            The default <see cref="T:Kingo.Transactions.ITransactionScopeFactory"/> to use to create a new <see cref="T:System.Transactions.TransactionScope"/>.
            </param>        
        </member>
        <member name="M:Kingo.Transactions.TransactionScopeModule.InvokeAsync(Kingo.Messaging.IMessageHandlerWrapper,Kingo.Transactions.ITransactionScopeFactory)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Transactions.TransactionScopeModule.DefaultStrategy">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.Query`2">
            <summary>
            Serves as a base class for all <see cref="T:Kingo.Messaging.IMessageHandler`1">MessageHandlers</see>.
            </summary>
            <typeparam name="TMessageIn">Type of the message that is consumed by this query.</typeparam>
            <typeparam name="TMessageOut">Type of the message that is returned by this query.</typeparam>
        </member>
        <member name="T:Kingo.Messaging.IQuery`2">
            <summary>
            When implemented by a class, represents a query that accepts a message
            and returns a result in the form of a <typeparamref name="TMessageOut"/>.
            </summary>
            <typeparam name="TMessageIn">Type of the message that is consumed by this query.</typeparam>
            <typeparam name="TMessageOut">Type of the message that is returned by this query.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.IQuery`2.ExecuteAsync(`0)">
            <summary>
            Executes the query.
            </summary>
            <param name="message">Message containing the parameters of this query.</param>
            <returns>The result of this query.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Query`2.ExecuteAsync(`0)">
            <inheritdoc />     
        </member>
        <member name="T:Kingo.Messaging.Layer">
            <summary>
            Represents a set of <see cref="T:System.Reflection.Assembly">Assemblies</see> that make up a conceptual layer of an application.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Layer.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Layer.ToString">
            <inheritdoc />
        </member>
        <member name="F:Kingo.Messaging.Layer.Empty">
            <summary>
            Represents an empty layer.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Layer.FromCurrentDirectory(System.String,System.IO.SearchOption)">
            <summary>
            Creates and returns a layer made up of all assemblies that are found in the directory in which the calling assembly
            has been deployed.
            </summary>
            <param name="searchPattern">The pattern that is used to match specified files/assemblies.</param>
            <param name="searchOption">
            Indicates whether or not only the top-level directory is to be searched.        
            </param>
            <returns>A new layer.</returns>
            <exception cref="T:System.IO.IOException">
            An error occurred while reading files from the specified location(s).
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Layer.FromDirectory(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Creates and returns a layer made up of all assemblies that are found in the specified directory or directories,
            using the specified <paramref name="searchPattern"/>.
            </summary>
            <param name="path">A path pointing to a specific directory.</param>
            <param name="searchPattern">The pattern that is used to match specified files/assemblies.</param>
            <param name="searchOption">
            Indicates whether or not only the top-level directory specified by <paramref name="path"/> is to be searched.        
            </param>
            <returns>A new layer.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> or <paramref name="searchPattern"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is not a valid path, <paramref name="searchPattern"/> is not a valid search-pattern,
            or <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/>.
            </exception>
            <exception cref="T:System.IO.IOException">
            An error occurred while reading files from the specified location(s).
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Layer.FromAssemblies(System.Reflection.Assembly[])">
            <summary>
            Creates and returns a layer made up of all specified assemblies.
            </summary>
            <param name="assemblies">A collection of assemblies</param>
            <returns>A new layer.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assemblies"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Layer.FromAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Creates and returns a layer made up of all specified assemblies.
            </summary>
            <param name="assemblies">A collection of assemblies</param>
            <returns>A new layer.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assemblies"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Layer.Join(Kingo.Messaging.Layer[])">
            <summary>
            Creates and returns a union of the specified <paramref name="sets"/>.
            </summary>
            <param name="sets">The sets to unite into a single set.</param>
            <returns>A union of the specified <paramref name="sets"/>.</returns>
            <remarks>
            This method will ignore <c>null</c>-references in <paramref name="sets"/>.
            </remarks>
        </member>
        <member name="M:Kingo.Messaging.Layer.Join(System.Collections.Generic.IEnumerable{Kingo.Messaging.Layer})">
            <summary>
            Creates and returns a union of the specified <paramref name="sets"/>.
            </summary>
            <param name="sets">The sets to unite into a single set.</param>
            <returns>A union of the specified <paramref name="sets"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sets"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Layer.op_Addition(Kingo.Messaging.Layer,Kingo.Messaging.Layer)">
            <summary>
            Joins to sets of assemblies into one.
            </summary>
            <param name="left">Left operator.</param>
            <param name="right">Right operator.</param>
            <returns>A joined assembly.</returns>
        </member>
        <member name="T:Kingo.Messaging.MessageHandlerDelegate`1">
            <summary>
            This type is used to support implicit type conversion from a <see cref="T:System.Action"/> to a
            <see cref="T:Kingo.Messaging.IMessageHandler`1"/>.
            </summary>
            <typeparam name="TMessage">Type of the message that is handled by this handler.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerDelegate`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.MessageHandlerDelegate`1"/> class.
            </summary>
            <param name="handler">The handler to invoke.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="handler"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerDelegate`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.MessageHandlerDelegate`1"/> class.
            </summary>
            <param name="handler">The handler to invoke.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="handler"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Connection">
            <summary>
            Provides a basic implementation of the <see cref="T:Kingo.IConnection"/> interface and can be used
            as a base-class for concrete implementations.
            </summary>
        </member>
        <member name="T:Kingo.IConnection">
            <summary>
            Represents a connection that can be made with an event-bus, for example.
            </summary>
        </member>
        <member name="M:Kingo.IConnection.Open">
            <summary>
            Opens the connection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The connection is already open.
            </exception>
        </member>
        <member name="M:Kingo.IConnection.Close">
            <summary>
            Closes the connection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The connection is already closed.
            </exception>
        </member>
        <member name="M:Kingo.Connection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Kingo.Connection.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">
            Indicates if the method was called by the application explicitly (<c>true</c>), or by the finalizer
            (<c>false</c>).
            </param>
            <remarks>
            If <paramref name="disposing"/> is <c>true</c>, this method will dispose any managed resources immediately.
            Otherwise, only unmanaged resources will be released.
            </remarks>
        </member>
        <member name="M:Kingo.Connection.Open">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Connection.OpenConnection">
            <summary>
            Opens this connections.
            </summary>
        </member>
        <member name="M:Kingo.Connection.Close">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Connection.CloseConnection">
            <summary>
            Closes this connection.
            </summary>
        </member>
        <member name="P:Kingo.Connection.IsDisposed">
            <summary>
            Indicates whether or not this instance has been disposed.
            </summary>
        </member>
        <member name="P:Kingo.Connection.IsOpen">
            <summary>
            Indicates whether or not this connected has been opened.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.QueryDelegate`2">
            <summary>
            This type is used to support conversion from a <see cref="T:System.Func`2"/> to a <see cref="T:Kingo.Messaging.IQuery`2"/>.
            </summary>
            <typeparam name="TMessageIn">Type of the message that is consumed by this query.</typeparam>
            <typeparam name="TMessageOut">Type of the message that is returned by this query.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.QueryDelegate`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.QueryDelegate`2"/> class.
            </summary>
            <param name="query">The query to invoke.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.QueryDelegate`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.QueryDelegate`2"/> class.
            </summary>
            <param name="query">The query to invoke.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.QueryDelegate`2.ExecuteAsync(`0)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.MessageValidationModule">
            <summary>
            Represents a module that validates a message and throws an <see cref="T:Kingo.Messaging.InvalidMessageException"/> if
            a message is invalid.
            </summary>   
        </member>
        <member name="M:Kingo.Messaging.MessageValidationModule.InvokeAsync(Kingo.Messaging.IMessageHandlerWrapper)">
            <summary>
            Validates a message before it invokes the specified <paramref name="handler"/>.
            </summary>
            <param name="handler">The handler to invoke.</param>               
            <exception cref="T:Kingo.Messaging.InvalidMessageException">
            <paramref name="handler"/> is invalid.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.MessageValidationModule.Validate(Kingo.Messaging.IMessage)">
            <summary>
            Validates the specified <paramref name="message"/> and returns the resulting <see cref="T:Kingo.Messaging.ErrorInfo"/>.
            </summary>
            <param name="message">The message to validate.</param>
            <returns>The resulting <see cref="T:Kingo.Messaging.ErrorInfo"/>.</returns>
        </member>
        <member name="M:Kingo.Messaging.MessageValidationModule.NewInvalidMessageException(Kingo.Messaging.IMessage,Kingo.Messaging.ErrorInfo)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Messaging.InvalidMessageException"/> indicating that the specified
            <paramref name="message"/> is not valid.
            </summary>
            <param name="message">The invalid message.</param>
            <param name="errorInfo">A <see cref="T:Kingo.Messaging.ErrorInfo"/> instance containing all validation errors.</param>
            <returns>A new <see cref="T:Kingo.Messaging.InvalidMessageException"/>.</returns>
        </member>
        <member name="T:Kingo.Messaging.Domain.MemoryEventStream`2">
            <summary>
            Represents an in-memory stream of <see cref="T:Kingo.Messaging.Domain.IHasKeyAndVersion`2">aggregate events</see>.
            </summary>
            <typeparam name="TKey">Type of the aggregate's key.</typeparam>
            <typeparam name="TVersion">Type of the aggregate's version.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.Domain.MemoryEventStream`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.MemoryEventStream`2"/> class.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.MemoryEventStream`2.Write(Kingo.Messaging.Domain.IHasKeyAndVersion{`0,`1})">
            <summary>
            Appends the specified event to this stream.
            </summary>
            <param name="event">Event to append.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="event"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.MemoryEventStream`2.Write``1(``0)">
            <summary>
            Appends the specified event to this stream.
            </summary>
            <typeparam name="TEvent">Type of event to append.</typeparam>
            <param name="event">Event to append.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="event"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.MemoryEventStream`2.WriteTo(Kingo.Messaging.Domain.IWritableEventStream{`0,`1})">
            <summary>
            Flushes all events of this stream to the specified stream.
            </summary>
            <param name="stream">The stream to flush to.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.MemoryEventStream`2.ToList">
            <summary>
            Converts this stream to a list of events.
            </summary>
            <returns>A list of events.</returns>
        </member>
        <member name="P:Kingo.Messaging.Domain.MemoryEventStream`2.Count">
            <summary>
            Returns the number of events stored in this stream.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.IEventBuffer">
            <summary>
            Represents a buffer of events.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.IEventBuffer.FlushAsync">
            <summary>
            Flushes the event.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.IMessageProcessor">
            <summary>
            When implemented by a class, represents a handler of any message.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.CreateUnitOfWorkScope">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Messaging.UnitOfWorkScope"/> that is associated to this processor.
            </summary>
            <returns>A new <see cref="T:Kingo.Messaging.UnitOfWorkScope"/>.</returns>
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.Handle(System.Object)">
            <summary>
            Processes the specified message by invoking all registered message handlers.
            </summary>        
            <param name="message">Message to handle.</param>                        
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.Handle``1(``0)">
            <summary>
            Processes the specified message by invoking all registered message handlers.
            </summary>
            <typeparam name="TMessage">Type of the message.</typeparam>
            <param name="message">Message to handle.</param>                        
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>              
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.Handle``1(``0,System.Action{``0})">
            <summary>
            Processes the specified message by invoking the specified handler.
            </summary>
            <typeparam name="TMessage">Type of the message.</typeparam>
            <param name="message">Message to handle.</param>
            <param name="handler">
            Optional handler that will be used to handle the message.
            If <c>null</c>, the processor will attempt to resolve any registered handlers for the specified <paramref name="message"/>.
            </param>                        
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>                
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.Handle``1(``0,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Processes the specified message by invoking the specified handler.
            </summary>
            <typeparam name="TMessage">Type of the message.</typeparam>
            <param name="message">Message to handle.</param>
            <param name="handler">
            Optional handler that will be used to handle the message.
            If <c>null</c>, the processor will attempt to resolve any registered handlers for the specified <paramref name="message"/>.
            </param>                        
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>               
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.Handle``1(``0,Kingo.Messaging.IMessageHandler{``0})">
            <summary>
            Processes the specified message by invoking the specified handler.
            </summary>
            <typeparam name="TMessage">Type of the message.</typeparam>
            <param name="message">Message to handle.</param>
            <param name="handler">
            Optional handler that will be used to handle the message.
            If <c>null</c>, the processor will attempt to resolve any registered handlers for the specified <paramref name="message"/>.
            </param>                       
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>               
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.HandleAsync``1(``0)">
            <summary>
            Processes the specified message by invoking all registered message handlers asynchronously.
            </summary>
            <typeparam name="TMessage">Type of the message.</typeparam>
            <param name="message">Message to handle.</param>                        
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that is handling the <paramref name="message"/>.</returns>               
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.HandleAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Processes the specified message by invoking all registered message handlers asynchronously.
            </summary>
            <typeparam name="TMessage">Type of the message.</typeparam>
            <param name="message">Message to handle.</param>                
            <param name="token">Optional token that can be used to cancel the operation.</param>  
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that is handling the <paramref name="message"/>.</returns>               
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.HandleAsync``1(``0,System.Action{``0})">
            <summary>
            Processes the specified message by invoking the specified handler asynchronously.
            </summary>
            <typeparam name="TMessage">Type of the message.</typeparam>
            <param name="message">Message to handle.</param>
            <param name="handler">
            Optional handler that will be used to handle the message.
            If <c>null</c>, the processor will attempt to resolve any registered handlers for the specified <paramref name="message"/>.
            </param>                      
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that is handling the <paramref name="message"/>.</returns>               
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.HandleAsync``1(``0,System.Action{``0},System.Threading.CancellationToken)">
            <summary>
            Processes the specified message by invoking the specified handler asynchronously.
            </summary>
            <typeparam name="TMessage">Type of the message.</typeparam>
            <param name="message">Message to handle.</param>
            <param name="handler">
            Optional handler that will be used to handle the message.
            If <c>null</c>, the processor will attempt to resolve any registered handlers for the specified <paramref name="message"/>.
            </param>              
            <param name="token">Optional token that can be used to cancel the operation.</param>  
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that is handling the <paramref name="message"/>.</returns>               
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.HandleAsync``1(``0,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Processes the specified message by invoking the specified handler asynchronously.
            </summary>
            <typeparam name="TMessage">Type of the message.</typeparam>
            <param name="message">Message to handle.</param>
            <param name="handler">
            Optional handler that will be used to handle the message.
            If <c>null</c>, the processor will attempt to resolve any registered handlers for the specified <paramref name="message"/>.
            </param>                      
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that is handling the <paramref name="message"/>.</returns>               
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.HandleAsync``1(``0,System.Func{``0,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Processes the specified message by invoking the specified handler asynchronously.
            </summary>
            <typeparam name="TMessage">Type of the message.</typeparam>
            <param name="message">Message to handle.</param>
            <param name="handler">
            Optional handler that will be used to handle the message.
            If <c>null</c>, the processor will attempt to resolve any registered handlers for the specified <paramref name="message"/>.
            </param>              
            <param name="token">Optional token that can be used to cancel the operation.</param>  
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that is handling the <paramref name="message"/>.</returns>               
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.HandleAsync``1(``0,Kingo.Messaging.IMessageHandler{``0})">
            <summary>
            Processes the specified message by invoking the specified handler asynchronously.
            </summary>
            <typeparam name="TMessage">Type of the message.</typeparam>
            <param name="message">Message to handle.</param>
            <param name="handler">
            Optional handler that will be used to handle the message.
            If <c>null</c>, the processor will attempt to resolve any registered handlers for the specified <paramref name="message"/>.
            </param>                      
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that is handling the <paramref name="message"/>.</returns>               
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>  
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.HandleAsync``1(``0,Kingo.Messaging.IMessageHandler{``0},System.Threading.CancellationToken)">
            <summary>
            Processes the specified message by invoking the specified handler asynchronously.
            </summary>
            <typeparam name="TMessage">Type of the message.</typeparam>
            <param name="message">Message to handle.</param>
            <param name="handler">
            Optional handler that will be used to handle the message.
            If <c>null</c>, the processor will attempt to resolve any registered handlers for the specified <paramref name="message"/>.
            </param>              
            <param name="token">Optional token that can be used to cancel the operation.</param>  
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that is handling the <paramref name="message"/>.</returns>               
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>  
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.Execute``1(System.Func{``0})">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result.
            </summary>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>        
            <param name="query">The query to execute.</param>                        
            <returns>The result of the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>  
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.Execute``1(Kingo.Messaging.IQuery{``0})">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result.
            </summary>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>        
            <param name="query">The query to execute.</param>                        
            <returns>The result of the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>  
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.Execute``2(System.Func{``0,``1},``0)">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result.
            </summary>
            <typeparam name="TMessageIn">Type of the message going into the query.</typeparam>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>        
            <param name="query">The query to execute.</param>                        
            <param name="message">Message containing the parameters of this query.</param>
            <returns>The result of the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> or <paramref name="query"/> is <c>null</c>.
            </exception>                
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.Execute``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0)">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result.
            </summary>
            <typeparam name="TMessageIn">Type of the message going into the query.</typeparam>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>        
            <param name="query">The query to execute.</param>                        
            <param name="message">Message containing the parameters of this query.</param>
            <returns>The result of the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> or <paramref name="query"/> is <c>null</c>.
            </exception>               
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.Execute``2(Kingo.Messaging.IQuery{``0,``1},``0)">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result.
            </summary>
            <typeparam name="TMessageIn">Type of the message going into the query.</typeparam>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>        
            <param name="query">The query to execute.</param>                          
            <param name="message">Message containing the parameters of this query.</param>
            <returns>The result of the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> or <paramref name="query"/> is <c>null</c>.
            </exception>               
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>        
            <param name="query">The query to execute.</param>                        
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> that is executing the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>  
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>        
            <param name="query">The query to execute.</param>               
            <param name="token">
            Optional token that can be used to cancel the operation.
            </param>          
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> that is executing the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>  
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.ExecuteAsync``1(Kingo.Messaging.IQuery{``0})">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>        
            <param name="query">The query to execute.</param>                        
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> that is executing the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>  
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.ExecuteAsync``1(Kingo.Messaging.IQuery{``0},System.Threading.CancellationToken)">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>        
            <param name="query">The query to execute.</param> 
            <param name="token">
            Optional token that can be used to cancel the operation.
            </param>                        
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> that is executing the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>  
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.ExecuteAsync``2(System.Func{``0,``1},``0)">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TMessageIn">Type of the message going into the query.</typeparam>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>        
            <param name="query">The query to execute.</param>                         
            <param name="message">Message containing the parameters of this query.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> that is executing the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> or <paramref name="message"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.ExecuteAsync``2(System.Func{``0,``1},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TMessageIn">Type of the message going into the query.</typeparam>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>        
            <param name="query">The query to execute.</param>                
            <param name="message">Message containing the parameters of this query.</param>
            <param name="token">
            Optional token that can be used to cancel the operation.
            </param> 
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> that is executing the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> or <paramref name="message"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.ExecuteAsync``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0)">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TMessageIn">Type of the message going into the query.</typeparam>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>        
            <param name="query">The query to execute.</param>                         
            <param name="message">Message containing the parameters of this query.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> that is executing the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> or <paramref name="message"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.ExecuteAsync``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TMessageIn">Type of the message going into the query.</typeparam>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>        
            <param name="query">The query to execute.</param>                
            <param name="message">Message containing the parameters of this query.</param>
            <param name="token">
            Optional token that can be used to cancel the operation.
            </param> 
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> that is executing the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> or <paramref name="message"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.ExecuteAsync``2(Kingo.Messaging.IQuery{``0,``1},``0)">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TMessageIn">Type of the message going into the query.</typeparam>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>
            <param name="message">Message containing the parameters of this query.</param>
            <param name="query">The query to execute.</param>                        
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> that is executing the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> or <paramref name="message"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessor.ExecuteAsync``2(Kingo.Messaging.IQuery{``0,``1},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TMessageIn">Type of the message going into the query.</typeparam>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>        
            <param name="query">The query to execute.</param>                
            <param name="message">Message containing the parameters of this query.</param>
            <param name="token">
            Optional token that can be used to cancel the operation.
            </param> 
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> that is executing the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> or <paramref name="message"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="P:Kingo.Messaging.IMessageProcessor.EventBus">
            <summary>
            Returns the <see cref="T:Kingo.Messaging.IMessageProcessorBus"/> of this processor.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.IMessageProcessorBus">
            <summary>
            When implemented by a class, represents a <see cref="T:Kingo.Messaging.MessageProcessorBus"/> to which event-handlers can subscribe.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.IDomainEventBus">
            <summary>
            Represents an internal message-bus that can be used to publish domain events and let all subscribers,
            direct or indirect, handle these events within the same session/transaction they were raised in.
            </summary> 
        </member>
        <member name="M:Kingo.Messaging.IDomainEventBus.PublishAsync``1(``0)">
            <summary>
            Publishes the specified event on this bus.
            </summary>
            <typeparam name="TMessage">Type of event to publish.</typeparam>
            <param name="message">The event to publish.</param>                
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessorBus.Connect(System.Object,System.Boolean)">
            <summary>
            Connects the specified handler to the bus.
            </summary>
            <param name="handler">The handler to connect.</param>
            <param name="openConnection">
            Indicates whether or not the returned <see cref="T:Kingo.IConnection"/> must be immediately opened.
            </param>
            <returns>The created connection.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="handler"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessorBus.Connect``1(System.Action{``0},System.Boolean)">
            <summary>
            Connects the specified callback to the bus.
            </summary>
            <typeparam name="TMessage">Type of event to listen to.</typeparam>
            <param name="handler">
            Callback that will handle any events of type <paramtyperef name="TMessage"/>.
            </param>
            <param name="openConnection">
            Indicates whether or not the returned <see cref="T:Kingo.IConnection"/> must be immediately opened.
            </param>
            <returns>The created connection.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="handler"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.IMessageProcessorBus.Connect``1(Kingo.Messaging.IMessageHandler{``0},System.Boolean)">
            <summary>
            Connects the specified handler to the bus.
            </summary>
            <typeparam name="TMessage">Type of event to listen to.</typeparam>
            <param name="handler">
            Handler that will handle any events of type <paramtyperef name="TMessage"/>.
            </param>
            <param name="openConnection">
            Indicates whether or not the returned <see cref="T:Kingo.IConnection"/> must be immediately opened.
            </param>
            <returns>The created connection.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="handler"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.InstanceLifetime">
            <summary>
            A value that is used to specify the lifetime of a certain instance that is resolved at runtime.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.InstanceLifetime.PerResolve">
            <summary>
            Specifies that a new instance of a type should be created each time it is resolved.
            </summary>        
        </member>
        <member name="F:Kingo.Messaging.InstanceLifetime.PerUnitOfWork">
            <summary>
            Specifies that the lifetime of the instance is bound to a single <see cref="T:Kingo.Messaging.UnitOfWorkContext"/>.       
            </summary>        
        </member>
        <member name="F:Kingo.Messaging.InstanceLifetime.Singleton">
            <summary>
            Specifies that only one instance of the handler is to be created by the container it was registered in.
            </summary>        
        </member>
        <member name="T:Kingo.Messaging.MessageHandlerAttribute">
            <summary>
            This attribute must be put on each <see cref="T:Kingo.Messaging.IMessageHandler`1"/> class to support auto-registration of it
            by the <see cref="T:Kingo.Messaging.MessageHandlerFactory"/> class.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerAttribute.#ctor(Kingo.Messaging.InstanceLifetime)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.MessageHandlerAttribute"/> class.
            </summary>
            <param name="lifetime">The lifetime of the <see cref="T:Kingo.Messaging.IMessageHandler`1"/>.</param>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerAttribute.#ctor(Kingo.Messaging.InstanceLifetime,Kingo.Messaging.MessageSources)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.MessageHandlerAttribute"/> class.
            </summary>
            <param name="lifetime">The lifetime of the <see cref="T:Kingo.Messaging.IMessageHandler`1"/>.</param>
            <param name="sources">Specifies which source(s) the message is accepted from.</param>
        </member>
        <member name="P:Kingo.Messaging.MessageHandlerAttribute.Lifetime">
            <summary>
            The lifetime of the <see cref="T:Kingo.Messaging.IMessageHandler`1"/>.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.MessageHandlerAttribute.Sources">
            <summary>
            Specifies which source(s) the message is accepted from.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.MessageProcessor">
            <summary>
            Represents a handler of arbitrary messages.
            </summary>    
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.MessageProcessor"/> class.
            </summary>        
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.CreateLayerConfiguration">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Messaging.LayerConfiguration"/> that is used by this processor.
            </summary>
            <returns>A new <see cref="T:Kingo.Messaging.LayerConfiguration"/>.</returns>
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.Customize(Kingo.Messaging.LayerConfiguration)">
            <summary>
            When overridden, customizes the specified <paramref name="layers"/> and returns the result.
            </summary>
            <param name="layers">The configuration to customize.</param>
            <returns>The customized configuration.</returns>
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.CreateMessageHandlerFactory(Kingo.Messaging.LayerConfiguration)">
            <summary>
            Creates and returns a <see cref="P:Kingo.Messaging.MessageProcessor.MessageHandlerFactory"/> for this processor. By default, this method
            auto-registers all message handlers and repositories found in the appropriate <paramref name="layers"/>.
            </summary>
            <param name="layers">
            A configuration of all logical layers of the application, which can be used to
            auto-register all messagehandlers, repositories and other dependencies.
            </param>
            <returns>
            A new <see cref="P:Kingo.Messaging.MessageProcessor.MessageHandlerFactory"/> to be used by this processor,
            or <c>null</c> if this processor does not use any factory.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.CreateDefaultMessageHandlerFactory">
            <summary>
            Creates and return a new instance of the built-in, default message handler factory.
            </summary>
            <returns>A new instance of the built-in, default message handler factory.</returns>
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.CreateTypeToContractMap(Kingo.Messaging.LayerConfiguration)">
            <summary>
            Creates and returns a mapping between types and their contracts.
            This map will be registered with the <see cref="P:Kingo.Messaging.MessageProcessor.MessageHandlerFactory"/> of this processor.        
            </summary>
            <param name="layers">
            A configuration of all logical layers of the application, which can be used to obtain all types
            that must be mapped to a contract.
            </param>
            <returns>A mapping between types and their contracts.</returns>
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.PublishAsync``1(``0)">
            <summary>
            This method is invoked just before an event is published and subsequently handled by this processor.
            </summary>
            <typeparam name="TEvent">Type of the event that is about to be published.</typeparam>
            <param name="event">The event that is about to be published.</param>   
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> carrying out the operation.</returns>     
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.CreateUnitOfWorkScope">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.Handle(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.Handle``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.Handle``1(``0,System.Action{``0})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.Handle``1(``0,System.Func{``0,System.Threading.Tasks.Task})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.Handle``1(``0,Kingo.Messaging.IMessageHandler{``0})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.HandleAsync``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.HandleAsync``1(``0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.HandleAsync``1(``0,System.Action{``0})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.HandleAsync``1(``0,System.Action{``0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.HandleAsync``1(``0,System.Func{``0,System.Threading.Tasks.Task})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.HandleAsync``1(``0,System.Func{``0,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.HandleAsync``1(``0,Kingo.Messaging.IMessageHandler{``0})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.HandleAsync``1(``0,Kingo.Messaging.IMessageHandler{``0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.IsCommand(System.Object)">
            <summary>
            Determines whether or not the specified message is a Command. By default,
            this method returns <c>true</c> when the type-name ends with 'Command'.
            </summary>
            <param name="message">The message to analyze.</param>
            <returns>
            <c>true</c> if the specified <paramref name="message"/> is a command; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.Execute``1(System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.Execute``1(Kingo.Messaging.IQuery{``0})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.Execute``2(System.Func{``0,``1},``0)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.Execute``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.Execute``2(Kingo.Messaging.IQuery{``0,``1},``0)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.ExecuteAsync``1(Kingo.Messaging.IQuery{``0})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.ExecuteAsync``1(Kingo.Messaging.IQuery{``0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.ExecuteAsync``2(System.Func{``0,``1},``0)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.ExecuteAsync``2(System.Func{``0,``1},``0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.ExecuteAsync``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.ExecuteAsync``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.ExecuteAsync``2(Kingo.Messaging.IQuery{``0,``1},``0)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.ExecuteAsync``2(Kingo.Messaging.IQuery{``0,``1},``0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.CreateMessageEntryPipeline">
            <summary>
            Creates and returns a collection of <see cref="T:Kingo.Messaging.MessageHandlerModule">modules</see>
            that will be used to create a pipeline for every incoming message.
            </summary>                
            <returns>A collection of <see cref="T:Kingo.Messaging.MessageHandlerModule">modules</see>.</returns>              
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.CreateCommandOrEventHandlerPipeline">
            <summary>
            Creates and returns a collection of <see cref="T:Kingo.Messaging.MessageHandlerModule">modules</see> that will be used to
            create a pipeline for every <see cref="T:Kingo.Messaging.IMessageHandler`1"/> handling a certain message.
            </summary>               
            <returns>A pipeline that will handle a message.</returns>              
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.CreateQueryExecutionPipeline">
            <summary>
            Creates and returns a collection of <see cref="T:Kingo.Messaging.QueryModule">modules</see> that will be used to
            create a pipeline for every query that is executed.
            </summary>                     
            <returns>A query pipeline.</returns>             
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.InvokePostCommit(System.Action{System.Boolean})">
            <summary>
            Invokes the specified <paramref name="action"/> when the current transaction
            has completed succesfully, or immediately if no transaction is active.
            The passed in boolean indicates whether or invocation was postponed until
            an active transaction committed.
            </summary>
            <param name="action">The action to invoke.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.MessageProcessor.InvokePostCommit(System.Action{System.Boolean},System.Transactions.Transaction)">
            <summary>
            Invokes the specified <paramref name="action"/> when the specified <paramref name="transaction"/>
            has completed succesfully, or immediately if <paramref name="transaction"/> is <c>null</c>.
            The passed in boolean indicates whether or invocation was postponed until
            an active transaction committed.
            </summary>
            <param name="action">The action to invoke.</param>
            <param name="transaction">The transaction to observe.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.Messaging.MessageProcessor.EventBus">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.MessageProcessor.MessageHandlerFactory">
            <summary>
            Returns the <see cref="P:Kingo.Messaging.MessageProcessor.MessageHandlerFactory"/> of this processor.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.MessageProcessor.CurrentMessage">
            <summary>
            Returns a <see cref="T:Kingo.Messaging.MessagePointer">pointer</see> to the message that is currently being handled.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.MessagePointer">
            <summary>
            Represents the stack of messages that is being handled by the processor.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.MessagePointer.Message">
            <summary>
            The message that is associated to this <see cref="T:Kingo.Messaging.MessagePointer"/>.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.MessagePointer.ParentPointer">
            <summary>
            The parent MessagePointer.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.MessagePointer.PointsToA``1">
            <summary>
            Indicates whether or not <see cref="F:Kingo.Messaging.MessagePointer.Message"/> is of the specified type.
            </summary>
            <typeparam name="TMessage">Type to check.</typeparam>
            <returns><c>true</c> if this message is of the specified type; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Messaging.MessagePointer.PointsToA(System.Type)">
            <summary>
            Indicates whether or not <see cref="F:Kingo.Messaging.MessagePointer.Message"/> is of the specified type.
            </summary>
            <param name="type">Type to check.</param>
            <returns><c>true</c> if this message is of the specified type; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.MessagePointer.TryCastMessageTo``1(``0@)">
            <summary>
            Attempts to cast the <see cref="F:Kingo.Messaging.MessagePointer.Message"/> to which this pointer refers to the specified type.
            </summary>
            <typeparam name="TMessage">Type to cast to.</typeparam>
            <param name="message">
            When the cast succeeds, this parameter will point to the casted instance; otherwise <c>null</c>.
            </param>
            <returns><c>true</c> if the cast succeed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Messaging.MessagePointer.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessagePointer.ThrowIfCancellationRequested">
            <summary>
            Traverses up the stack looking for a token that indicates that a cancellation is requested and
            if found, throws an <see cref="T:System.OperationCanceledException"/>.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.IDependencyCacheEntry`1">
            <summary>
            Represents a handle to an item in cache.
            </summary>
            <typeparam name="T">Type of the item in cache.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.IDependencyCacheEntry`1.TryGetValue(`0@)">
            <summary>
            Attempts to retrieve the value from cache.
            </summary>
            <param name="value">
            When this method returns <c>true</c>, contains the value that was retrieved from cache;
            otherwise, contains the default value of <typeparamref name="T"/>.
            </param>
            <returns>
            <c>true</c> when the item was still in cache; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.DomainEventBus.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.IDependencyCache">
            <summary>
            Represents a cache to which items can be added.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.IDependencyCache.Add``1(``0)">
            <summary>
            Add the specified value to the cache and returns a handle with which the item can be retrieved
            or removed again.
            </summary>
            <typeparam name="T">Type of the value to add.</typeparam>
            <param name="value">The value to add.</param>
            <returns>A handle with which the item can be retrieved or removed again.</returns>
        </member>
        <member name="M:Kingo.Messaging.IDependencyCache.Add``1(``0,System.Action{``0})">
            <summary>
            Add the specified value to the cache and returns a handle with which the item can be retrieved
            or removed again.
            </summary>
            <typeparam name="T">Type of the value to add.</typeparam>
            <param name="value">The value to add.</param>
            <param name="valueRemovedCallback">
            The callback that is called as soon as the item is removed from the cache.
            </param>
            <returns>A handle with which the item can be retrieved or removed again.</returns>
        </member>
        <member name="T:Kingo.Messaging.UnitOfWorkContext">
            <summary>
            Represents the context in which a certain message is being handled.
            </summary>    
        </member>
        <member name="M:Kingo.Messaging.UnitOfWorkContext.Publish``1(``0)">
            <summary>
            Publishes the specified <paramref name="message"/> as soon as this unit of work is flushed.
            </summary>
            <typeparam name="TMessage">Type of the event to publish.</typeparam>
            <param name="message">The event to publish.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The specified <paramref name="message"/> is not valid.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.UnitOfWorkContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.UnitOfWorkContext.Enlist(Kingo.Messaging.IUnitOfWork)">
            <summary>
            Schedules the specified <paramref name="unitOfWork"/> for a flush.
            </summary>
            <param name="unitOfWork">The unit of work to enlist.</param>
            <exception cref="T:System.ObjectDisposedException">
            The context has already been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="unitOfWork"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.Messaging.UnitOfWorkContext.Cache">
            <summary>
            Returns the cache associated with this unit of work.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.UnitOfWorkContext.Current">
            <summary>
            Returns the current context.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.DependencyCache">
            <summary>
            Provides a basic, in-memory implementation of the <see cref="T:Kingo.Messaging.IDependencyCache"/> interface.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.DependencyCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.DependencyCache"/> class.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.DependencyCache.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.DependencyCache.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.DependencyCache.Add``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.DependencyCache.Add``1(``0,System.Action{``0})">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.UnitOfWorkScope">
            <summary>
            Represents a scope that controls the lifetime of a <see cref="T:Kingo.Messaging.UnitOfWorkContext"/>.
            </summary>        
        </member>
        <member name="M:Kingo.Messaging.UnitOfWorkScope.CompleteAsync">
            <summary>
            Completes the scope by flushing all registered wrappers.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The scope has already been disposed.
            </exception>        
        </member>
        <member name="M:Kingo.Messaging.UnitOfWorkScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This scope was incorrectly nested with another scope.
            </exception>
            <remarks>
            The Dispose()-method marks the end of the current scope's lifetime and will set
            <see cref="P:Kingo.Messaging.UnitOfWorkContext.Current"/> back to <c>null</c> after disposing it.
            </remarks>
        </member>
        <member name="T:Kingo.Resources.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.AggregateEventStream_HandlerAlreadyRegistered">
            <summary>
              Looks up a localized string similar to A handler for event &apos;{0}&apos; has already been registered..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.AggregateEventStream_MissingEventHandler">
            <summary>
              Looks up a localized string similar to No event-handler was specified for domain-event of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.AggregateEventStreamFactory_ConstructorNotFound">
            <summary>
              Looks up a localized string similar to Could not restore aggregate of type &apos;{0}&apos; because it has no default constructor. Either declare a default constructor, or configure the factory to create the instance without calling a constructor..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.AggregateEventStreamFactory_InvalidEvents">
            <summary>
              Looks up a localized string similar to Could not restore aggregate of type &apos;{0}&apos; because one of the specified events could not be applied to it. See inner exception for details..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.AggregateRoot_InvalidKey">
            <summary>
              Looks up a localized string similar to The key of the event ({0}) must match the key of the aggregate ({1})..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.AggregateRoot_InvalidVersion">
            <summary>
              Looks up a localized string similar to The version of the event ({0}) must be newer than the version of the aggregate ({1})..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.BufferedEventBus_InvalidMessage">
            <summary>
              Looks up a localized string similar to The message of type &apos;{0}&apos; could not be published because it is not valid. See ErrorTree for details..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Connection_AlreadyClosed">
            <summary>
              Looks up a localized string similar to The connection is already closed..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Connection_AlreadyOpen">
            <summary>
              Looks up a localized string similar to The connection is already open..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.DependencyClass_AmbigiousMatch">
            <summary>
              Looks up a localized string similar to More than one type found that could be used as an implementation of dependency &apos;{0}&apos;: {1}..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.IntXXVersion_NegativeValue">
            <summary>
              Looks up a localized string similar to Version cannot be negative: {0}..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.InvalidMessageException_InvalidMessage">
            <summary>
              Looks up a localized string similar to The message is invalid. See ErrorTree for details..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.MessageHandler_AmbiguousAttributeMatch">
            <summary>
              Looks up a localized string similar to Two or more attributes declared on MessageHandler &apos;{0}&apos; are assignable to &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.MessageHandlerClass_InvalidInstanceLifetimeMode">
            <summary>
              Looks up a localized string similar to Invalid InstanceLifetime was specified on class &apos;{0}&apos;: {1}. .
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.MessageOut_InvalidMessageType">
            <summary>
              Looks up a localized string similar to A module in the query execution pipeline returned an invalid result. Expected result of type &apos;{0}&apos; but was &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.MessageToStrategyMapping_IsReadOnly">
            <summary>
              Looks up a localized string similar to Cannot add a new mapping because the mapping has been switched to read-only state..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.ReadOnlyDictionary_NotSupported">
            <summary>
              Looks up a localized string similar to Cannot change this collection because it is read-only..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Repository_AggregateNotFoundByKey">
            <summary>
              Looks up a localized string similar to No aggregate of type &apos;{0}&apos; with the specified key ({1}) was found..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Repository_ConcurrenyException">
            <summary>
              Looks up a localized string similar to Aggregate of type &apos;{0}&apos; could not be updated because of a concurreny conflict. The expected version in the data store was &apos;{1}&apos;. .
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Repository_DeleteNotSupported">
            <summary>
              Looks up a localized string similar to Cannot delete aggregate of type &apos;{0}&apos; because the operation is not supported..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Repository_DuplicateKey">
            <summary>
              Looks up a localized string similar to Another aggregate with the same key already exists: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Repository_UpdateNotSupported">
            <summary>
              Looks up a localized string similar to Cannot update aggregate of type &apos;{0}&apos; because updates are not supported by repository &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.TypeToContractMap_ContractNotFound">
            <summary>
              Looks up a localized string similar to No mapping exists for type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.TypeToContractMap_SharedContract">
            <summary>
              Looks up a localized string similar to Both type &apos;{0}&apos; and type &apos;{1}&apos; are mapped to contract &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.TypeToContractMap_TypeNotFound">
            <summary>
              Looks up a localized string similar to No mapping exists for contract &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.UnitOfWorkScope_AlreadyCompleted">
            <summary>
              Looks up a localized string similar to Cannot complete this scope because it has already been completed..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Version_IncrementNotSupported">
            <summary>
              Looks up a localized string similar to Auto-increment of type &apos;{0}&apos; is not supported. Please override AggregateRoot&lt;,&gt;.NextVersion() or change the version type of the aggregate..
            </summary>
        </member>
    </members>
</doc>
