<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kingo</name>
    </assembly>
    <members>
        <member name="T:Kingo.Clocks.Clock">
            <summary>
            Provides a basic implementation of the <see cref="T:Kingo.Clocks.IClock" /> interface.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.Clock.LocalTime">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.Clock.LocalDate">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.Clock.LocalDateAndTime">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.Clock.UtcTime">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.Clock.UtcDate">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.Clock.UtcDateAndTime">
            <inheritdoc />
        </member>
        <member name="F:Kingo.Clocks.Clock.Default">
            <summary>
            Returns the default clock of this system.
            </summary>
        </member>
        <member name="P:Kingo.Clocks.Clock.Current">
            <summary>
            Returns the clock associated to the current thread.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.Clock.OverrideThreadLocal(System.Func{System.DateTimeOffset})">
            <summary>
            Sets the current clock that is accessible by the current thread through <see cref="P:Kingo.Clocks.Clock.Current" />
            only as long as the scope is active.
            </summary>
            <param name="utcDateAndTimeFactory">The delegate that is used to obtain the UTC date and time.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utcDateAndTimeFactory"/> is <c>null</c>.
            </exception>                       
        </member>
        <member name="M:Kingo.Clocks.Clock.OverrideThreadLocal(Kingo.Clocks.IClock)">
            <summary>
            Sets the current clock that is accessible by the current thread through <see cref="P:Kingo.Clocks.Clock.Current" />
            only as long as the scope is active.
            </summary>
            <param name="clock">The clock to set.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="clock"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.Clocks.Clock.OverrideAsyncLocal(System.Func{System.DateTimeOffset})">
            <summary>
            Sets the current value that is accessible by all threads that share the same <see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext" />
            through <see cref="P:Kingo.Clocks.Clock.Current" /> as long as the scope is active.
            </summary>
            <param name="utcDateAndTimeFactory">The delegate that is used to obtain the UTC date and time.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utcDateAndTimeFactory"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The call is made inside a thread local scope.
            </exception>
        </member>
        <member name="M:Kingo.Clocks.Clock.OverrideAsyncLocal(Kingo.Clocks.IClock)">
            <summary>
            Sets the current value that is accessible by all threads that share the same <see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext" />
            through <see cref="P:Kingo.Clocks.Clock.Current" /> as long as the scope is active.
            </summary>
            <param name="clock">The clock to set.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="clock"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The call is made inside a thread local scope.
            </exception>
        </member>
        <member name="M:Kingo.Clocks.Clock.Override(System.Func{System.DateTimeOffset})">
            <summary>
            Sets the current value that is accessible by all threads
            through <see cref="P:Kingo.Clocks.Clock.Current" /> as long as the scope is active.
            </summary>
            <param name="utcDateAndTimeFactory">The delegate that is used to obtain the UTC date and time.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utcDateAndTimeFactory"/> is <c>null</c>.
            </exception>        
            <exception cref="T:System.InvalidOperationException">
            The call is made inside an async local or thread local scope.
            </exception>      
        </member>
        <member name="M:Kingo.Clocks.Clock.Override(Kingo.Clocks.IClock)">
            <summary>
            Sets the current value that is accessible by all threads
            through <see cref="P:Kingo.Clocks.Clock.Current" /> as long as the scope is active.
            </summary>
            <param name="clock">The clock to set.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="clock"/> is <c>null</c>.
            </exception>  
            <exception cref="T:System.InvalidOperationException">
            The call is made inside an async local or thread local scope.
            </exception>      
        </member>
        <member name="T:Kingo.Clocks.ClockExtensions">
            <summary>
            Contains extension methods for the <see cref="T:Kingo.Clocks.IClock" /> interface.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.ClockExtensions.Shift(Kingo.Clocks.IClock,System.TimeSpan)">
            <summary>
            Returns a clock that shows the time of the current clock, plus the given offset.
            </summary>
            <param name="clock">A clock.</param>
            <param name="offset">The offset to add to the time of the current clock.</param>
            <returns>A clock that shows the time of the current clock, plus the given offset.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="clock"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Clocks.DelegateClock">
            <summary>
            Represents a clock that implemented by a delegate.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.DelegateClock.#ctor(System.Func{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Clocks.DelegateClock" /> class.
            </summary>
            <param name="utcDateAndTimeFactory">The delegate that is used to obtain the UTC date and time.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utcDateAndTimeFactory"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Clocks.DelegateClock.UtcDateAndTime">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Clocks.HighResolutionClock">
            <summary>
            Represents a clock that uses a <see cref="T:System.Diagnostics.Stopwatch" /> in combination with
            the system clock to simulate a high resolution system time clock.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.HighResolutionClock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.HighResolutionClock.UtcDateAndTime">
            <inheritdoc />
        </member>
        <member name="F:Kingo.Clocks.HighResolutionClock.DefaultSynchronizationInterval">
            <summary>
            The default synchronization interval used when not explicitly specified is 10 seconds.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.HighResolutionClock.StartNew">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Clocks.HighResolutionClock" /> that is counting from the current date and time.
            </summary>        
            <returns>A new <see cref="T:Kingo.Clocks.HighResolutionClock" />.</returns>
        </member>
        <member name="M:Kingo.Clocks.HighResolutionClock.StartNew(Kingo.Clocks.IClock)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Clocks.HighResolutionClock" /> based on the specified <paramref name="referenceClock"/>.
            </summary> 
            <param name="referenceClock">
            The clock that will be used as a reference for this clock.
            </param>        
            <returns>A new <see cref="T:Kingo.Clocks.HighResolutionClock" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="referenceClock "/> is <c>null</c>.
            </exception>         
        </member>
        <member name="M:Kingo.Clocks.HighResolutionClock.StartNew(Kingo.Clocks.IClock,System.TimeSpan)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Clocks.HighResolutionClock" /> based on the specified <paramref name="referenceClock"/>.
            </summary> 
            <param name="referenceClock">
            The clock that will be used as a reference for this clock.
            </param>
            <param name="synchronizationInterval">
            The interval that is used to periodically synchronize this clock with the specified <paramref name="referenceClock"/>.
            A value of <see cref="F:System.TimeSpan.Zero" /> means this clock is never synchronized.
            </param>
            <returns>A new <see cref="T:Kingo.Clocks.HighResolutionClock" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="referenceClock "/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="synchronizationInterval"/> is a negative <see cref="T:System.TimeSpan" />.
            </exception>               
        </member>
        <member name="T:Kingo.Clocks.StopwatchClock">
            <summary>
            This clock represents a stopwatch that starts at a specified date and/or time and can be started and stopped.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.StopwatchClock.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Clocks.StopwatchClock" /> class.
            </summary>
            <param name="startTime">The initial date and time.</param>
        </member>
        <member name="P:Kingo.Clocks.StopwatchClock.IsRunning">
            <summary>
            Indicates whether or not this clock is running.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.StopwatchClock.Start">
            <summary>
            Starts the clock.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.StopwatchClock.Stop">
            <summary>
            Stops the clock.
            </summary>
        </member>
        <member name="P:Kingo.Clocks.StopwatchClock.ElapsedTime">
            <summary>
            Returns the total amount of time the stopwatch has been running.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.StopwatchClock.UtcDateAndTime">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.StopwatchClock.StartNew">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Clocks.StopwatchClock" /> that is started immediately.
            </summary>        
            <returns>A new <see cref="T:Kingo.Clocks.StopwatchClock" />.</returns>
        </member>
        <member name="M:Kingo.Clocks.StopwatchClock.StartNew(System.DateTimeOffset)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Clocks.StopwatchClock" /> that is started immediately.
            </summary>    
            <param name="startTime">The initial date and time.</param>    
            <returns>A new <see cref="T:Kingo.Clocks.StopwatchClock" />.</returns>
        </member>
        <member name="T:Kingo.Clocks.IClock">
            <summary>
            When implemented by a class, represents a service that provides the current date and time.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.IClock.LocalTime">
            <summary>
            Returns the time of the day in local time.
            </summary>
            <returns>The time of the day in local time.</returns>
        </member>
        <member name="M:Kingo.Clocks.IClock.LocalDate">
            <summary>
            Returns the date in local time.
            </summary>
            <returns>The date in local time.</returns>
        </member>
        <member name="M:Kingo.Clocks.IClock.LocalDateAndTime">
            <summary>
            Returns the date and time in local time.
            </summary>
            <returns>The date and time in local time.</returns>
        </member>
        <member name="M:Kingo.Clocks.IClock.UtcTime">
            <summary>
            Returns the time of the day in UTC-time.
            </summary>
            <returns>Time of the day in UTC-time.</returns>
        </member>
        <member name="M:Kingo.Clocks.IClock.UtcDate">
            <summary>
            Returns the date in UTC-time.
            </summary>
            <returns>Date in UTC-time.</returns>
        </member>
        <member name="M:Kingo.Clocks.IClock.UtcDateAndTime">
            <summary>
            Returns the date and time in UTC-time.
            </summary>
            <returns>Date and time in UTC-time.</returns>
        </member>
        <member name="M:Kingo.Clocks.DefaultClock.LocalDateAndTime">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.DefaultClock.UtcDateAndTime">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Comparable">
            <summary>
            Contains some helper methods for types implementing the <see cref="T:System.IComparable`1" /> interface.
            </summary>
        </member>
        <member name="F:Kingo.Comparable.Less">
            <summary>
            Value indicating that left is less than right.
            </summary>
        </member>
        <member name="F:Kingo.Comparable.Equal">
            <summary>
            Value indicating that left is equal to right.
            </summary>
        </member>
        <member name="F:Kingo.Comparable.Greater">
            <summary>
            Value indicating that left is greater than right.
            </summary>
        </member>
        <member name="M:Kingo.Comparable.CompareValues``1(``0,System.Object)">
            <summary>
            Determines whether <paramref name="instance"/> is less than, equal to or greater than <paramref name="obj"/>.
            </summary>
            <typeparam name="T">Type of the objects to compare.</typeparam>
            <param name="instance">The typed instance.</param>
            <param name="obj">The untyped instance.</param>
            <returns>
            A negative value if <paramref name="instance"/> is less than <paramref name="obj"/>,
            zero if <paramref name="instance"/> is equal to <paramref name="obj"/>, or
            A positive value if <paramref name="instance"/> is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="obj"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> is not of type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Kingo.Comparable.CompareReferences``1(``0,System.Object)">
            <summary>
            Determines whether <paramref name="instance"/> is less than, equal to or greater than <paramref name="obj"/>.
            </summary>
            <typeparam name="T">Type of the objects to compare.</typeparam>
            <param name="instance">The typed instance.</param>
            <param name="obj">The untyped instance.</param>
            <returns>
            A negative value if <paramref name="instance"/> is less than <paramref name="obj"/>,
            zero if <paramref name="instance"/> is equal to <paramref name="obj"/>, or
            A positive value if <paramref name="instance"/> is greater than <paramref name="obj"/>.
            </returns>        
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> is not of type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Kingo.Comparable.IsLessThan``1(``0,``0)">
            <summary>
            Determines whether <paramref name="left"/> is less than <paramref name="right"/>.
            </summary>
            <typeparam name="T">Type of the objects to compare.</typeparam>
            <param name="left">Left instance.</param>
            <param name="right">Right instance.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Comparable.IsLessThanOrEqualTo``1(``0,``0)">
            <summary>
            Determines whether <paramref name="left"/> is less than or equal to <paramref name="right"/>.
            </summary>
            <typeparam name="T">Type of the objects to compare.</typeparam>
            <param name="left">Left instance.</param>
            <param name="right">Right instance.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Comparable.IsGreaterThan``1(``0,``0)">
            <summary>
            Determines whether <paramref name="left"/> is greater than <paramref name="right"/>.
            </summary>
            <typeparam name="T">Type of the objects to compare.</typeparam>
            <param name="left">Left instance.</param>
            <param name="right">Right instance.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Comparable.IsGreaterThanOrEqualTo``1(``0,``0)">
            <summary>
            Determines whether <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
            </summary>
            <typeparam name="T">Type of the objects to compare.</typeparam>
            <param name="left">Left instance.</param>
            <param name="right">Right instance.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Comparable.Compare``1(``0,``0)">
            <summary>
            Determines whether <paramref name="left"/> is less than, equal to or greater than <paramref name="right"/>.
            </summary>
            <typeparam name="T">Type of the rightects to compare.</typeparam>
            <param name="left">Left instance.</param>
            <param name="right">Right instance.</param>
            <returns>
            A negative value if <paramref name="left"/> is less than <paramref name="right"/>,
            zero if <paramref name="left"/> is equal to <paramref name="right"/>, or
            a positive value if <paramref name="left"/> is greater than <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Kingo.Comparable.NewUnexpectedTypeException(System.Type,System.Type)">
            <summary>
            Creates and returns a new <see cref="T:System.ArgumentException" /> indicating that a certain instance could not be compared
            to another instance because their types didn't match.
            </summary>
            <param name="instanceType">Type of the main instance.</param>
            <param name="otherType">Type of the instance to compare.</param>
            <returns>A new <see cref="T:System.ArgumentException" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="instanceType"/> or <paramref name="otherType"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Disposable">
            <summary>
            Serves as a base-class for disposable objects.
            </summary>
        </member>
        <member name="P:Kingo.Disposable.IsDisposed">
            <summary>
            Indicates whether or not an object has been disposed.
            </summary>
        </member>
        <member name="M:Kingo.Disposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Kingo.Disposable.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">
            Indicates if the method was called by the application explicitly (<c>true</c>), or by the finalizer
            (<c>false</c>).
            </param>
            <remarks>
            If <paramref name="disposing"/> is <c>true</c>, this method will dispose any managed resources immediately.
            Otherwise, only unmanaged resources will be released.
            </remarks>
        </member>
        <member name="M:Kingo.Disposable.DisposeManagedResources">
            <summary>
            Disposes all managed resources owned by this instance.
            </summary>
        </member>
        <member name="M:Kingo.Disposable.DisposeUnmanagedResources">
            <summary>
            Disposed all unmanaged resources own by this instance.
            </summary>
        </member>
        <member name="M:Kingo.Disposable.NewObjectDisposedException">
            <summary>
            Creates and returns a new <see cref="T:System.ObjectDisposedException" /> indicating this instance has been disposed.
            </summary>
            <returns>A new <see cref="T:System.ObjectDisposedException" />.</returns>
        </member>
        <member name="T:Kingo.Disposable`1">
            <summary>
            Represents a disposable instance that is only created when needed.
            </summary>
            <typeparam name="TValue">Type of the disposable instance.</typeparam>
        </member>
        <member name="M:Kingo.Disposable`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Disposable`1" /> class.
            </summary>
            <param name="valueFactory">Delegate used to create the instance when needed.</param>
            <param name="threadSafetyMode">
            Indicates the level of thread-safety required when creating the instance.
            </param>
        </member>
        <member name="M:Kingo.Disposable`1.#ctor(System.Func{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Disposable`1" /> class.
            </summary>
            <param name="valueFactory">Delegate used to create the instance when needed.</param>
            <param name="isThreadSafe">
            Indicates whether or not the instance must be created in a thread-safe fashion, guaranteing only one instance
            to be created.
            </param>
        </member>
        <member name="P:Kingo.Disposable`1.IsValueCreated">
            <summary>
            Indicates whether or not the instance has been created.
            </summary>
        </member>
        <member name="P:Kingo.Disposable`1.Value">
            <summary>
            Returns the instance. If it was not yet created, it is created on the spot.
            Returns <c>null</c> if this instance has already been disposed.
            </summary>
        </member>
        <member name="M:Kingo.Disposable`1.DisposeManagedResources">
            <summary>
            Dispose the instance, if it has ben created.
            </summary>
        </member>
        <member name="T:Kingo.DynamicMethods.DynamicMethod`1">
            <summary>
            When implemented, represents a method that is generated and compiled at runtime. The implementation of every
            dynamic method is based on the fields and properties of a certain instance's type.
            </summary>
            <typeparam name="TMethod">Type of the specific class implementing the method.</typeparam>
        </member>
        <member name="T:Kingo.DynamicMethods.IMemberFilter">
            <summary>
            When implemented by a class, represents a filter of fields and properties that are to be
            used by a dynamic method's implementation.
            </summary>
        </member>
        <member name="M:Kingo.DynamicMethods.IMemberFilter.Filter(System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo})">
            <summary>
            Filters all specified <paramref name="fields"/>, returning only those fields that are to be used.
            </summary>
            <param name="fields">The fields to filter.</param>
            <returns>A collection of fields that may be used.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fields"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.DynamicMethods.IMemberFilter.Filter(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Filters all specified <paramref name="properties"/>, returning only those properties that are to be used.
            </summary>
            <param name="properties">The properties to filter.</param>
            <returns>A collection of properties that may be used.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="properties"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.DynamicMethods.MemberFilterAttribute">
            <summary>
            When implemented, this attribute can be used to decorate a class or struct that has one of its
            core methods implemented through a dynamic method. When applied, the attribute is used to select
            the fields and properties from the type that will be used in the method.
            </summary>
        </member>
        <member name="M:Kingo.DynamicMethods.MemberFilterAttribute.Filter(System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.DynamicMethods.MemberFilterAttribute.Filter(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <inheritdoc />
        </member>
        <member name="T:Kingo.DynamicMethods.EqualsMethod">
            <summary>
            Represents an implementation of the <see cref="M:System.Object.Equals(System.Object)" /> method where two instances are considered
            equal based on their members.
            </summary>
        </member>
        <member name="M:Kingo.DynamicMethods.EqualsMethod.Invoke(System.Object,System.Object)">
            <summary>
            Compares two instances and determines whether they are equal or not based on their members.
            </summary>
            <param name="left">Left instance.</param>
            <param name="right">Right instance.</param>
            <returns>
            <c>true</c> if both <paramref name="left"/> and <paramref name="right"/> are the same instance (or <c>null</c>),
            or when <paramref name="left"/> and <paramref name="right"/> are of the same type and have equal members. Otherwise
            <c>false</c>.
            </returns>
        </member>
        <member name="T:Kingo.DynamicMethods.GetHashCodeMethod">
            <summary>
            Represents an implementation of the <see cref="M:System.Object.GetHashCode" /> method, where the hashcode is calculated
            by XOR-ing the hashcode of the <see cref="T:System.Type" /> with all readonly, value-type fields.
            </summary>
        </member>
        <member name="M:Kingo.DynamicMethods.GetHashCodeMethod.Invoke(System.Object)">
            <summary>
            Calculates a hashcode for the specified <paramref name="instance"/>.
            </summary>
            <param name="instance">The object to calculate the hashcode for.</param>
            <returns>
            The hashcode of the specified <paramref name="instance"/>, based on all immutable members of this object.
            </returns>
        </member>
        <member name="T:Kingo.CollectionExtensions">
            <summary>
            Contains extension methods and helper methods for collection types.
            </summary>
        </member>
        <member name="M:Kingo.CollectionExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection where all <c>null</c> values have been removed.
            </summary>
            <typeparam name="T">Type of the items in the collection.</typeparam>
            <param name="collection">A collection of items.</param>
            <returns>A subset of the specified <paramref name="collection"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.CollectionExtensions.TryGetItem``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0@)">
            <summary>
            Attempts to retrieve the <paramref name="element"/> at the specified <paramref name="index"/>.
            </summary>
            <typeparam name="TValue">Type of the element.</typeparam>
            <param name="collection">The collection to get the element from.</param>
            <param name="index">The index of the element.</param>
            <param name="element">
            If this method returns <c>true</c>, this parameter will refer to the element at the specified <paramref name="index"/>;
            otherwise, it will be set to the default value of <typeparamref name="TValue"/>.
            </param>
            <returns>
            <c>true</c> if the collection contains an element at the specified <paramref name="index"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.CollectionExtensions.Add``1(``0[],``0)">
            <summary>
            Creates and returns a new array containing all the elements of the source plus the element to add at the last index.
            </summary>
            <typeparam name="TElement">Type of the elements in the array.</typeparam>
            <param name="elements">An array of elements.</param>
            <param name="element">The element to add at the end of the new array.</param>
            <returns>A new array with the element at the last index.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="elements"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.EmptyList`1">
            <summary>
            Represents an empty list.
            </summary>
            <typeparam name="T">Type of the items in the list.</typeparam>
        </member>
        <member name="P:Kingo.EmptyList`1.Count">
            <inheritdoc />
        </member>
        <member name="P:Kingo.EmptyList`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.EmptyList`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Equatable">
            <summary>
            Contains some helper methods for types implementing the <see cref="T:System.IEquatable`1" /> interface.
            </summary>
        </member>
        <member name="M:Kingo.Equatable.Equals``1(``0,``0)">
            <summary>
            Determines whether <paramref name="left"/> is equal to <paramref name="right"/>.
            </summary>
            <typeparam name="T">Type of the instances to compare.</typeparam>
            <param name="left">First instance.</param>
            <param name="right">Second instance.</param>
            <returns><c>true</c> if both instances are equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Kingo.ExceptionExtensions">
            <summary>
            Contains extenion methods for the <see cref="T:System.Exception" /> class.
            </summary>
        </member>
        <member name="M:Kingo.ExceptionExtensions.Rethrow(System.Exception)">
            <summary>
            Rethrows the specified <paramref name="exception"/> without losing its stacktrace.
            </summary>
            <param name="exception">The exception to rethrow.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exception"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.Domain.AggregateVersionAttribute">
            <summary>
            When declared on a property, marks it as the property that carries the version of an aggregate.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.Domain.AggregateIdAttribute">
            <summary>
            When declared on a property, marks it as the property that carries the identifier of an aggregate.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.Domain.ConcurrencyException">
            <summary>
            This exception is thrown by a <see cref="T:Kingo.Messaging.IUnitOfWork" /> when a concurrency conflict has occurred
            while flushing any changes.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.ConcurrencyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.ConcurrencyException" /> class.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.ConcurrencyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.ConcurrencyException" /> class.
            </summary>
            <param name="message">Message of the exception.</param>
        </member>
        <member name="M:Kingo.Messaging.Domain.ConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.ConcurrencyException" /> class.
            </summary>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>
        </member>
        <member name="M:Kingo.Messaging.Domain.ConcurrencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.ConcurrencyException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Kingo.Messaging.Domain.ConcurrencyException.AsBadRequestException(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.Domain.AggregateData`1">
            <summary>
            Contains a snapshot and a set of events that represent the state and state-changes of an aggregate.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateData`1.#ctor(`0,Kingo.Messaging.Domain.ISnapshot,System.Collections.Generic.IEnumerable{Kingo.Messaging.Domain.IEvent})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.AggregateData`1" /> class.
            </summary>
            <param name="id">Unique identifier of the aggregate.</param>
            <param name="snapshot">Snapshot of an aggregate.</param>
            <param name="events">A collection of events published by an aggregate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="snapshot"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.Messaging.Domain.AggregateData`1.Id">
            <summary>
            Unique identifier of the aggregate.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Domain.AggregateData`1.Snapshot">
            <summary>
            Snapshot of an aggregate.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Domain.AggregateData`1.Events">
            <summary>
            A collection of events published by an aggregate.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.Domain.AggregateNotFoundException">
            <summary>
            This exception is thrown when an attempt has been made to retrieve an aggregate that was not present in a
            certain <see cref="T:Kingo.Messaging.Domain.IRepository`2" />.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateNotFoundException.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.AggregateNotFoundException" /> class.
            </summary>
            <param name="aggregateId">Identifier of the aggregate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="aggregateId"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateNotFoundException.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.AggregateNotFoundException" /> class.
            </summary>
            <param name="aggregateId">Identifier of the aggregate.</param>
            <param name="message">Message of the exception.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="aggregateId"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateNotFoundException.#ctor(System.Object,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.AggregateNotFoundException" /> class.
            </summary>
            <param name="aggregateId">Identifier of the aggregate.</param>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="aggregateId"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.AggregateNotFoundException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.Domain.AggregateNotFoundException.AggregateId">
            <summary>
            Identifier of the aggregate.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.Domain.AggregateRoot`2">
            <summary>
            Serves as a base-class implementation of the <see cref="T:Kingo.Messaging.Domain.IAggregateRoot`1" /> interface.
            </summary>
            <typeparam name="TKey">Type of the identifier of this aggregate.</typeparam>
            <typeparam name="TVersion">Type of the version of this aggregate.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateRoot`2.#ctor(Kingo.Messaging.Domain.IEvent{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.AggregateRoot`2" /> class.
            </summary>
            <param name="event">The event that defines the creation of this aggregate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="event" /> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateRoot`2.#ctor(Kingo.Messaging.Domain.ISnapshot{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.AggregateRoot`2" /> class.
            </summary>
            <param name="snapshot">A snapshot of this aggregate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="snapshot"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateRoot`2.ToString">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.Domain.AggregateRoot`2.Id">
            <summary>
            The identifier of this aggregate.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Domain.AggregateRoot`2.Version">
            <summary>
            The version of this aggregate.
            </summary>        
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateRoot`2.NextVersion">
            <summary>
            When implemented, returns a version that is newer or higher that the current version of this aggregate.
            </summary>
            <returns>A newer or higher value than <see cref="P:Kingo.Messaging.Domain.AggregateRoot`2.Version"/>.</returns>
        </member>
        <member name="T:Kingo.Messaging.Domain.AggregateRoot`2.EventHandlerCollection">
            <summary>
            Represents a collection of event handler degelates that are used by an <see cref="T:Kingo.Messaging.Domain.AggregateRoot`2" /> to
            apply specific events to itself.
            </summary>        
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateRoot`2.EventHandlerCollection.Register``1(System.Action{``0})">
            <summary>
            Adds the specified <paramref name="eventHandler"/> to this collection and returns the collection
            where this handler has been added.
            </summary>
            <typeparam name="TEvent">Type of the event that is handled by the specified <paramref name="eventHandler"/>.</typeparam>
            <param name="eventHandler">The event handler to add.</param>
            <returns>The collection to which the specified <paramref name="eventHandler"/> has been added.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="eventHandler"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            A handler for the specified event type <typeparamref name="TEvent"/> has already been added.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateRoot`2.RegisterEventHandlers(Kingo.Messaging.Domain.AggregateRoot{`0,`1}.EventHandlerCollection)">
            <summary>
            Adds all event handler delegates to the specified <paramref name="eventHandlers"/> and returns the resulting collection.
            </summary>
            <param name="eventHandlers">A collection of event handler delegates.</param>
            <returns>A completed collection of event handlers that is used by this aggregate to apply and/or replay certain events.</returns>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateRoot`2.LoadFromHistory(System.Collections.Generic.IEnumerable{Kingo.Messaging.Domain.IEvent})">
            <summary>
            Reloads the state of this aggregate by replaying all specified <paramref name="events" />. If you override this method,
            make sure you always call the base-class implementation.
            </summary>
            <param name="events">The events to replay.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="events"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            This aggregate does not recognise one of the events.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateRoot`2.TakeSnapshot">
            <summary>
            Creates and returns a snapshot of the current state of this aggregate.
            </summary>
            <returns>A snapshot of the current state of this aggregate.</returns>
        </member>
        <member name="P:Kingo.Messaging.Domain.AggregateRoot`2.ApplyEventsToSelf">
            <summary>
            Indicates whether or not every event that is published by this aggregate is also immediately applied
            to itself by invoking the appropriate event handler. Default is <c>false</c>.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateRoot`2.Publish``1(``0)">
            <summary>
            Publishes the specified <paramref name="event"/> and updates the version of this aggregate.
            </summary>
            <typeparam name="TEvent">Type of the published event.</typeparam>
            <param name="event">The event to publish.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="event"/> is <c>null</c>.
            </exception>
        </member>
        <member name="F:Kingo.Messaging.Domain.AggregateRoot`2.EventPublished">
            <summary>
            This event is raised each time this aggregate publishes a new event.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateRoot`2.OnEventPublished``1(Kingo.Messaging.Domain.EventPublishedEventArgs{``0})">
            <summary>
            Applies the published event to this aggregate, if and only if an event handler has been registered for this event,
            and raises the <see cref="F:Kingo.Messaging.Domain.AggregateRoot`2.EventPublished" /> event. When you override this method, make sure you call the base
            class implementation.
            </summary>
            <typeparam name="TEvent">Type of the event that was published.</typeparam>
            <param name="e">Argument of the </param>
            <returns>
            <c>true</c> if the event has been handled by a listener; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:Kingo.Messaging.Domain.AggregateRoot`2.HasPublishedEvents">
            <summary>
            Indicates whether or not this aggregate has published any events that haven't been flushed yet.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateRoot`2.FlushEvents">
            <summary>
            Returns all events that were published by this aggregate since it was instantiated or retrieved from a data store
            and empties the aggregate's internal event buffer.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.AggregateRoot`2.OnRemoved">
            <summary>
            This method is called when this aggregate was removed from the repository. It can be used
            to publish some last-minute events representing the removal of this aggregate and the end
            of its lifetime.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.Domain.DuplicateKeyException">
            <summary>
            This exception is thrown when an attempt has been made to add an aggregate to a <see cref="T:Kingo.Messaging.Domain.IRepository`2" />
            which already contains an aggregate with the same id.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.DuplicateKeyException.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.DuplicateKeyException" /> class.
            </summary>
            <param name="aggregateId">Identifier of the aggregate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="aggregateId"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.DuplicateKeyException.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.DuplicateKeyException" /> class.
            </summary>
            <param name="aggregateId">Identifier of the aggregate.</param>
            <param name="message">Message of the exception.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="aggregateId"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.DuplicateKeyException.#ctor(System.Object,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.DuplicateKeyException" /> class.
            </summary>
            <param name="aggregateId">Identifier of the aggregate.</param>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="aggregateId"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.DuplicateKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.DuplicateKeyException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Kingo.Messaging.Domain.DuplicateKeyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.Domain.DuplicateKeyException.AggregateId">
            <summary>
            Identifier of the aggregate.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.Domain.Event">
            <summary>
            Serves as a base-class implementation of the <see cref="T:Kingo.Messaging.Domain.IEvent"/> interface.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.Event.UpdateToLatestVersion">
            <summary>
            Converts this event to its latest version and returns the result. This method can be used to upgrade
            older versions of events that have been retrieved from an event store to a version that is compatible
            with the latest implementation of the <see cref="T:Kingo.Messaging.Domain.IAggregateRoot" />.        
            </summary>
            <returns>The latest version of this event.</returns>
        </member>
        <member name="M:Kingo.Messaging.Domain.Event.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.Domain.Event`2">
            <summary>
            Serves as a base-class implementation of the <see cref="T:Kingo.Messaging.Domain.IEvent`2"/> interface.
            </summary>
            <typeparam name="TKey">Type of the identifier of the aggregate.</typeparam>
            <typeparam name="TVersion">Type of the version of the aggregate.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.Domain.Event`2.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.Domain.EventPublishedEventArgs">
            <summary>
            Represents the argument of the <see cref="E:Kingo.Messaging.Domain.IAggregateRoot.EventPublished" /> event.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.EventPublishedEventArgs.WriteEventTo(Kingo.Messaging.IEventStream)">
            <summary>
            Publishes the events that was published by the aggregate to the specified <paramref name="stream"/>.
            </summary>
            <param name="stream">The stream to publish to event to.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.Domain.EventPublishedEventArgs`1">
            <summary>
            Represents the argument of the <see cref="E:Kingo.Messaging.Domain.IAggregateRoot.EventPublished" /> event.
            </summary>
            <typeparam name="TEvent">Type of the event that was published.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.Domain.EventPublishedEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.EventPublishedEventArgs" /> class.
            </summary>
            <param name="event">The event that was published.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="event"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.Messaging.Domain.EventPublishedEventArgs`1.Event">
            <summary>
            The event that was published.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Domain.EventPublishedEventArgs`1.HasBeenPublished">
            <summary>
            Indicates whether or not the event carried by this argument has been published to an event stream.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.EventPublishedEventArgs`1.WriteEventTo(Kingo.Messaging.IEventStream)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.Domain.IAggregateRoot">
            <summary>
            When implemented by a class, represents the root of an aggregate.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.IAggregateRoot.LoadFromHistory(System.Collections.Generic.IEnumerable{Kingo.Messaging.Domain.IEvent})">
            <summary>
            Reloads the state of this aggregate by replaying all specified <paramref name="events" />.
            </summary>
            <param name="events">The events to replay.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="events"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            This aggregate does not recognise one of the events.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.IAggregateRoot.TakeSnapshot">
            <summary>
            Creates and returns a snapshot of the current state of this aggregate.
            </summary>
            <returns>A snapshot of the current state of this aggregate.</returns>
        </member>
        <member name="E:Kingo.Messaging.Domain.IAggregateRoot.EventPublished">
            <summary>
            This event is raised each time this aggregate publishes a new event.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Domain.IAggregateRoot.HasPendingEvents">
            <summary>
            Indicates whether or not this aggregate has published any events that haven't been flushed yet.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.IAggregateRoot.FlushEvents">
            <summary>
            Returns all events that were published by this aggregate since it was instantiated or retrieved from a data store
            and empties the aggregate's internal event buffer.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.IAggregateRoot.NotifyRemoved">
            <summary>
            Notifies the aggregate that it was removed from the repository. This method can be used
            to publish some last minute events representing the removal of this aggregate and the end
            of its lifetime.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.Domain.IAggregateRoot`1">
            <summary>
            When implemented by a class, represents the root of an aggregate with a specific id.
            </summary>
            <typeparam name="TKey">Type of the identifier of this aggregate.</typeparam>
        </member>
        <member name="P:Kingo.Messaging.Domain.IAggregateRoot`1.Id">
            <summary>
            The identifier of this aggregate.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.Domain.IChangeSet`1">
            <summary>
            When implemented by a class, represents a set of changes that can be written and committed to a data store.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Kingo.Messaging.Domain.IChangeSet`1.AggregatesToInsert">
            <summary>
            A collection of aggregates that must be inserted into the data store.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Domain.IChangeSet`1.AggregatesToUpdate">
            <summary>
            A collection of aggregates that must be updated in the data store.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Domain.IChangeSet`1.AggregatesToDelete">
            <summary>
            A collection of identifiers representing the aggregates that must be deleted from the data store.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.Domain.IEvent">
            <summary>
            When implemented by a class, represent an event message that may be published or stored in an event store.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.IEvent.UpdateToLatestVersion">
            <summary>
            Converts this event to its latest version and returns the result. This method can be used to upgrade
            older versions of events that have been retrieved from an event store to a version that is compatible
            with the latest implementation of the <see cref="T:Kingo.Messaging.Domain.IAggregateRoot" />.        
            </summary>
            <returns>The latest version of this event.</returns>
        </member>
        <member name="T:Kingo.Messaging.Domain.IEvent`2">
            <summary>
            When implemented by a class, represent an event message that may be published or stored in an event store and contains
            the identifier and version of the aggregate that published it.
            </summary>
            <typeparam name="TKey">Type of the identifier of the aggregate.</typeparam>
            <typeparam name="TVersion">Type of the version of the aggregate.</typeparam>
        </member>
        <member name="P:Kingo.Messaging.Domain.IEvent`2.AggregateId">
            <summary>
            The identifier of the aggregate that published this event.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Domain.IEvent`2.AggregateVersion">
            <summary>
            The version of the aggregate at the time it published this event.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.Domain.IRepository`2">
            <summary>
            When implemented by a class, represents a generic repository for a certain type of aggregate.
            </summary>
            <typeparam name="TKey">Type of the identifier of the aggregate.</typeparam>
            <typeparam name="TAggregate">Type of the aggregate that is managed by this repository.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.Domain.IRepository`2.GetByIdAsync(`0)">
            <summary>
            Retrieves the aggregate with the specified <paramref name="id"/> from the repository.
            </summary>
            <param name="id">Identifier of the aggregate to retrieve.</param>
            <returns>The aggregate with the specified <paramref name="id"/>.</returns>
            <exception cref="T:Kingo.Messaging.Domain.AggregateNotFoundException">
            No aggregate with the specified <paramref name="id"/> was found in the repository.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.IRepository`2.AddAsync(`1)">
            <summary>
            Adds the specified <paramref name="aggregate"/> to the repository.
            </summary>
            <param name="aggregate">The aggregate to add.</param>
            <returns>
            <c>true</c> if the aggregate was newly added to the repository; 
            <c>false</c> if the specified <paramref name="aggregate"/> was already present in the repository.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="aggregate"/> is <c>null</c>.
            </exception>
            <exception cref="T:Kingo.Messaging.Domain.DuplicateKeyException">
            Another aggregate with the same identifier (key) is already present in the repository.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.IRepository`2.RemoveByIdAsync(`0)">
            <summary>
            Removes the aggregate with the specified <paramref name="id"/> from the repository.
            </summary>
            <param name="id">Identifier of the aggregate to remove.</param>
            <returns>
            <c>true</c> if the aggregates was removed from the repository;
            <c>false</c> if no aggregate with the specified <paramref name="id"/> was found in the data store.
            </returns>        
        </member>
        <member name="T:Kingo.Messaging.Domain.ISnapshot">
            <summary>
            When implemented by a class, represents a snapshot of the state of an <see cref="T:Kingo.Messaging.Domain.IAggregateRoot" /> and serves as
            a factory to restore the aggregate in this state.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.ISnapshot.UpdateToLatestVersion">
            <summary>
            Converts this snapshot to its latest version and returns the result. This method can be used to upgrade
            older versions of snapshots that have been retrieved from an event store to a version that is compatible
            with the latest implementation of the <see cref="T:Kingo.Messaging.Domain.IAggregateRoot"/>.
            </summary>
            <returns>The latest version of this snapshot.</returns>
        </member>
        <member name="M:Kingo.Messaging.Domain.ISnapshot.RestoreAggregate(System.Collections.Generic.IEnumerable{Kingo.Messaging.Domain.IEvent})">
            <summary>
            Restores and returns the aggregate based on this snapshot.
            </summary>
            <param name="events">
            If specified, this collection is used to replay all events on the restored aggregate.
            </param>
            <returns>The restored aggregate.</returns>
            <exception cref="T:System.ArgumentException">
            The restored aggregate does not recognise one of the specified events.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.Domain.ISnapshot`2">
            <summary>
            When implemented by a class, represents a snapshot of the state of an <see cref="T:Kingo.Messaging.Domain.IAggregateRoot" /> and serves as
            a factory to restore the aggregate in this state.
            </summary>
            <typeparam name="TKey">Type of the identifier of the aggregate.</typeparam>
            <typeparam name="TVersion">Type of the version of the aggregate.</typeparam>
        </member>
        <member name="P:Kingo.Messaging.Domain.ISnapshot`2.AggregateId">
            <summary>
            The identifier of the aggregate that created this snapshot.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Domain.ISnapshot`2.AggregateVersion">
            <summary>
            The version of the aggregate at the time it created this snapshot.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.Domain.MemoryRepository`2">
            <summary>
            Represents a repository where all aggregates are stored in memory.
            </summary>
            <typeparam name="TKey">Type of the identifier of the aggregate.</typeparam>
            <typeparam name="TAggregate">Type of the aggregate that is managed by this repository.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.Domain.MemoryRepository`2.#ctor(Kingo.Messaging.Domain.MemoryRepositoryBehavior,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.MemoryRepository`2" /> class.
            </summary>
            <param name="behavior">Defines how this repository saves and restores the aggregates.</param>
            <param name="aggregates">
            A collection of aggregates that are initially present in this repository.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="behavior" /> is not in the range of acceptable values.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.MemoryRepository`2.ToString">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.Domain.MemoryRepository`2.Count">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Domain.MemoryRepository`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Domain.MemoryRepository`2.SelectByIdAsync(`0)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Domain.MemoryRepository`2.FlushAsync">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Domain.MemoryRepository`2.FlushAsync(Kingo.Messaging.Domain.IChangeSet{`0})">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.Domain.MemoryRepositoryBehavior">
            <summary>
            Defines the behavior of a <see cref="T:Kingo.Messaging.Domain.MemoryRepository`2" />.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.Domain.MemoryRepositoryBehavior.StoreSnapshots">
            <summary>
            Indicates that the repository uses snapshots to save and restore aggregates,
            effectively making it a state-based repository.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.Domain.MemoryRepositoryBehavior.StoreEvents">
            <summary>
            Indicates that the repository uses events to save and restore aggregates,
            effectively making it an event-store.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.Domain.Repository`2">
            <summary>
            Serves as a base-class implementation of the <see cref="T:Kingo.Messaging.Domain.IRepository`2" /> interface.
            </summary>
            <typeparam name="TKey">Type of the identifier of the aggregate.</typeparam>
            <typeparam name="TAggregate">Type of the aggregate that is managed by this repository.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.Repository`2" /> class.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`2.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`2.GetByIdAsync(`0)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`2.AddAsync(`1)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`2.RemoveByIdAsync(`0)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`2.SelectByIdAndRestoreAsync(`0)">
            <summary>
            Loads and returns an aggregate from the data store.
            </summary>
            <param name="id">Identifier of the aggregate to load.</param>
            <returns>The aggregate that was loaded from the data store.</returns>
            <exception cref="T:Kingo.Messaging.Domain.AggregateNotFoundException">
            No aggregate with the specified <paramref name="id" /> was found in the data store.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`2.SelectByIdAsync(`0)">
            <summary>
            Loads and returns an aggregate's data from the data store.
            </summary>
            <param name="id">Identifier of the aggregate to load.</param>
            <returns>
            The data of the aggregate, or <c>null</c> if the aggregate was not found.
            </returns>
        </member>
        <member name="P:Kingo.Messaging.Domain.Repository`2.Context">
            <summary>
            Returns the current context.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Domain.Repository`2.ResourceId">
            <summary>
            Returns the resource identifier of this repository. This identifier is used to determine
            which <see cref="T:Kingo.Messaging.IUnitOfWork" /> implementations can be flushed in parrallel (different id's) and which must
            be flushed sequentially (equal id's).
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`2.RequiresFlush">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`2.FlushAsync">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`2.FlushAsync(System.Boolean)">
            <summary>
            Flushes any pending changes to the underlying infrastructure.
            </summary>
            <param name="keepAggregatesInMemory">
            Indicates whether or not this repository should keep all aggregates that have been retrieved, added and/or updated
            in its internal cache after the flush operation has been completed, so that following read and write operations
            are potentially faster.
            </param>
            <exception cref="T:Kingo.Messaging.Domain.ConcurrencyException">
            A concurrency exception occurred.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.Repository`2.FlushAsync(Kingo.Messaging.Domain.IChangeSet{`0})">
            <summary>
            Flushes all changes made in this session to the data store by inserting, updating and/or deleting several aggregates.
            </summary>
            <param name="changeSet">The change set containing all the changes made during this session.</param>
            <returns>A task representing the operation.</returns>
            <exception cref="T:Kingo.Messaging.InternalProcessorException">
            The data store failed to accept the changes because a data constraint was violated or because a concurrency exception
            occurred.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.UnitOfWork`2.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.Domain.Snapshot">
            <summary>
            Serves as a base-class implementation of the <see cref="T:Kingo.Messaging.Domain.ISnapshot"/> interface.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.Snapshot.UpgradeToLatestVersion">
            <summary>
            Converts this snapshot to its latest version and returns the result. This method can be used to upgrade
            older versions of snapshots that have been retrieved from an event store to a version that is compatible
            with the latest implementation of the <see cref="T:Kingo.Messaging.Domain.IAggregateRoot"/>.
            </summary>
            <returns>The latest version of this snapshot.</returns>
        </member>
        <member name="M:Kingo.Messaging.Domain.Snapshot.RestoreAggregate">
            <summary>
            When implemented, restored the aggregate in the same state it had been in when this snapshot was created.
            </summary>
            <returns>A new aggregate instance in the state it had been in when this snapshot was created.</returns>
        </member>
        <member name="M:Kingo.Messaging.Domain.Snapshot.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.Domain.Snapshot`2">
            <summary>
            Serves as a base-class implementation of the <see cref="T:Kingo.Messaging.Domain.ISnapshot`2"/> interface.
            </summary>
            <typeparam name="TKey">Type of the identifier of the aggregate.</typeparam>
            <typeparam name="TVersion">Type of the version of the aggregate.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.Domain.Snapshot`2.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.Domain.IllegalOperationException">
            <summary>
            This type of exception is thrown when an attempted operation in the domain of the application is not allowed.
            </summary>    
        </member>
        <member name="M:Kingo.Messaging.Domain.IllegalOperationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.IllegalOperationException" /> class.
            </summary>
            <param name="message">Message of the exception.</param>
        </member>
        <member name="M:Kingo.Messaging.Domain.IllegalOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.IllegalOperationException" /> class.
            </summary>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of the exception.</param>
        </member>
        <member name="M:Kingo.Messaging.Domain.IllegalOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.IllegalOperationException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Kingo.Messaging.Domain.IllegalOperationException.AsBadRequestException(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.ConflictException">
            <summary>
            This exception is thrown by a <see cref="T:Kingo.Messaging.IMicroProcessor" /> when a command or query failed because a concurreny
            exception occurred while saving all changes. This type semantically maps to HTTP response code <c>409</c>.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.ConflictException.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.ConflictException" /> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>        
        </member>
        <member name="M:Kingo.Messaging.ConflictException.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.ConflictException" /> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <param name="message">Message of the exception.</param>        
        </member>
        <member name="M:Kingo.Messaging.ConflictException.#ctor(System.Object,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.ConflictException" /> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>        
        </member>
        <member name="M:Kingo.Messaging.ConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.ConflictException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Kingo.Messaging.ExecuteAsyncResult`1">
            <summary>
            Represents the result of the invocation of a <see cref="T:Kingo.Messaging.IQuery`1" /> or <see cref="T:Kingo.Messaging.IQuery`2" />.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.ExecuteAsyncResult`1.Message">
            <summary>
            Represents the result of the executed query.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.ExecuteAsyncResult`1.MetadataStream">
            <summary>
            Represents the stream of events that contain metadata about the application's behavior. All metadata events will be handled
            on separate threads by <see cref="T:Kingo.Messaging.IMessageHandler`1" /> classes that accept message of source <see cref="F:Kingo.Messaging.MessageSources.MetadataStream" />.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.ExecuteAsyncResult`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.IEventStream">
            <summary>
            Represents a stream of events.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.IEventStream.Publish``1(``0)">
            <summary>
            Publishes the specified <paramref name="message"/> to the stream.
            </summary>
            <typeparam name="TEvent">Type of message to add.</typeparam>
            <param name="message">The message to add.</param>
            <exception cref="T:System.InvalidOperationException">
            The stream does not support publishing messages in the current context.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.InternalProcessorException">
            <summary>
            An exception of this type is to be thrown by application code when handling a message or executing a query.
            The <see cref="T:Kingo.Messaging.IMicroProcessor" /> will catch exceptions of this type and convert it to a <see cref="T:Kingo.Messaging.BadRequestException" />
            or <see cref="T:Kingo.Messaging.InternalServerErrorException" /> based on whether or was executing a request or handling an event.   
            </summary>
        </member>
        <member name="M:Kingo.Messaging.InternalProcessorException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.InternalProcessorException" /> class.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.InternalProcessorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.InternalProcessorException" /> class.
            </summary>
            <param name="message">Message of the exception.</param>
        </member>
        <member name="M:Kingo.Messaging.InternalProcessorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.InternalProcessorException" /> class.
            </summary>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>
        </member>
        <member name="M:Kingo.Messaging.InternalProcessorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.InternalProcessorException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Kingo.Messaging.InternalProcessorException.AsBadRequestException(System.Object,System.String)">
            <summary>
            Creates and returns this exception as a <see cref="T:Kingo.Messaging.BadRequestException"/> that is associated with the
            specified <paramref name="failedMessage"/>, indicating that the current exception occurred because of
            a bad client request.
            </summary>
            <param name="failedMessage">The message that was being handled the moment this exception was caught.</param>
            <param name="message">Message describing the context of the newly created message.</param>
            <returns>A new <see cref="T:Kingo.Messaging.BadRequestException"/> with its <see cref="P:System.Exception.InnerException"/> set to this instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.InternalProcessorException.AsInternalServerErrorException(System.Object,System.String)">
            <summary>
            Creates and returns this exception as a <see cref="T:Kingo.Messaging.InternalServerErrorException"/> that is associated with the
            specified <paramref name="failedMessage"/>, indicating that the current exception occurred because of an internal
            server error.        
            </summary>
            <param name="failedMessage">The message that was being handled the moment this exception was caught.</param>
            <param name="message">Message describing the context of the newly created message.</param>
            <returns>A new <see cref="T:Kingo.Messaging.InternalServerErrorException"/> with its <see cref="P:System.Exception.InnerException"/> set to this instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.IUnitOfWorkCache">
            <summary>
            When implemented by a class, represents a cache in which items can be stored that may have be accessed during a single unit of work.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.IUnitOfWorkCache.Item(System.String)">
            <summary>
            Stores an item to or retrieves an item from the cache using its unique <paramref name="key"/>.
            </summary>
            <param name="key">A unique key identifying a certain instance.</param>
            <returns>
            The object associated with the specified <paramref name="key"/>, or <c>null</c> if no item
            with the specified <paramref name="key"/> was found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.IUnitOfWorkCache.Remove(System.String)">
            <summary>
            Removes an item from the cache.
            </summary>
            <param name="key">A unique key identifying a certain instance.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.IMessageHandlerConfiguration">
            <summary>
            When implemented by a class, contains all configuration settings for a <see cref="T:Kingo.Messaging.IMessageHandler`1" />.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.IMessageHandlerConfiguration.Lifetime">
            <summary>
            The lifetime of the <see cref="T:Kingo.Messaging.IMessageHandler`1" />.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.IMessageHandlerConfiguration.Sources">
            <summary>
            Specifies which source(s) the message is accepted from.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.IMicroProcessorPipeline">
            <summary>
            When implemented by a class, represents a pipeline that a <see cref="T:Kingo.Messaging.IMicroProcessor" /> uses to process each message.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.IMicroProcessorPipeline.HandleAsync``1(Kingo.Messaging.MessageHandler{``0},``0,Kingo.Messaging.IMicroProcessorContext)">
            <summary>
            Handles the specified <paramref name="message"/> asynchronously.
            </summary>
            <param name="handler">The handler that will be invoked by this pipeline.</param>
            <param name="message">A message.</param>
            <param name="context">Context of the <see cref="T:Kingo.Messaging.IMicroProcessor" /> that is currently processing the message.</param>        
            <returns>A stream of events that represent the changes that were made by this handler.</returns> 
        </member>
        <member name="M:Kingo.Messaging.IMicroProcessorPipeline.ExecuteAsync``1(Kingo.Messaging.Query{``0},Kingo.Messaging.IMicroProcessorContext)">
            <summary>
            Executes the specified <paramref name="query"/> asynchronously and returns its result.
            </summary>        
            <param name="query">The query that will be executed in this pipeline.</param>
            <param name="context">Context of the <see cref="T:Kingo.Messaging.IMicroProcessor" /> that is currently processing the message.</param>        
            <returns>The result of the specified <paramref name="query"/>.</returns>
        </member>
        <member name="M:Kingo.Messaging.IMicroProcessorPipeline.ExecuteAsync``2(Kingo.Messaging.Query{``0,``1},``0,Kingo.Messaging.IMicroProcessorContext)">
            <summary>
            Executes the specified <paramref name="query"/> asynchronously and returns its result.
            </summary>  
            <param name="query">The query that will be executed in this pipeline.</param>      
            <param name="message">A message.</param>
            <param name="context">Context of the <see cref="T:Kingo.Messaging.IMicroProcessor" /> that is currently processing the message.</param>        
            <returns>The result of the specified <paramref name="query"/>.</returns>
        </member>
        <member name="T:Kingo.Messaging.IMicroProcessorPipelineVisitor">
            <summary>
            When implemented by a class, represents a visitor that visits all elements of a constructed <see cref="T:Kingo.Messaging.IMicroProcessorPipeline" />.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.IMicroProcessorPipelineVisitor.Visit(Kingo.Messaging.IMicroProcessorPipeline)">
            <summary>
            Visits one element of the entire pipeline.
            </summary>
            <param name="pipeline">The pipeline to visit.</param>
        </member>
        <member name="M:Kingo.Messaging.IMicroProcessorPipelineVisitor.Visit``1(Kingo.Messaging.IMessageHandler{``0})">
            <summary>
            Visits the <see cref="T:Kingo.Messaging.IMessageHandler`1" /> at the end of the pipeline.
            </summary>        
            <param name="handler">The handler to visit.</param>
        </member>
        <member name="M:Kingo.Messaging.IMicroProcessorPipelineVisitor.Visit``1(Kingo.Messaging.IQuery{``0})">
            <summary>
            Visits the <see cref="T:Kingo.Messaging.IQuery`1" /> at the end of the pipeline.
            </summary>        
            <param name="query">The query to visit.</param>
        </member>
        <member name="M:Kingo.Messaging.IMicroProcessorPipelineVisitor.Visit``2(Kingo.Messaging.IQuery{``0,``1})">
            <summary>
            Visits the <see cref="T:Kingo.Messaging.IQuery`2" /> at the end of the pipeline.
            </summary>        
            <param name="query">The query to visit.</param>
        </member>
        <member name="T:Kingo.Messaging.IUnitOfWorkController">
            <summary>
            When implemented by a class, represents a controller that is able to enlist other units of work
            to schedule them for a flush at a later point in time.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.IUnitOfWorkController.Cache">
            <summary>
            Returns the cache that is associated with this unit of work. This cache can be used to store dependendies
            and other data of which the lifetime is bound to this unit of work. Any <see cref="T:System.IDisposable" /> values will
            automatically be disposed as soon as this unit of work is completed.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.IUnitOfWorkController.Enlist(Kingo.Messaging.IUnitOfWork,System.Object)">
            <summary>
            Enlists the specified <paramref name="unitOfWork"/> with the context so that it can be flushed at the appropriate time.
            Note that this operation may flush the specified <paramref name="unitOfWork"/> immediately.
            </summary>
            <param name="unitOfWork">The unit of work to enlist.</param>
            <param name="resourceId">
                Optional identifier of a resource that is used by the processor to identify which units must be flushed sequentially (those with equal identifiers)
                and which can be flushed in parallel using multiple threads, thereby optimizing I/O performance.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="unitOfWork"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.IUnitOfWorkController.EnlistAsync(Kingo.Messaging.IUnitOfWork,System.Object)">
            <summary>
            Enlists the specified <paramref name="unitOfWork"/> with the context asynchronously so that it can be flushed at the appropriate time.
            Note that this operation may flush the specified <paramref name="unitOfWork"/> immediately.
            </summary>
            <param name="unitOfWork">The unit of work to enlist.</param>
            <param name="resourceId">
                Optional identifier of a resource that is used by the processor to identify which units must be flushed sequentially (those with equal identifiers)
                and which can be flushed in parallel using multiple threads, thereby optimizing I/O performance.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="unitOfWork"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.MessageHandler`1">
            <summary>
            Represents a <see cref="T:Kingo.Messaging.IMessageHandler`1" /> instance that is able to provide access to its own attributes.
            </summary>
            <typeparam name="TMessage">Type of the message that is handled by this handler.</typeparam>
        </member>
        <member name="P:Kingo.Messaging.MessageHandler`1.TypeAttributeProvider">
            <summary>
            Returns the provider that is used to access all attributes declared on the <see cref="T:Kingo.Messaging.IMessageHandler`1" />.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.MessageHandler`1.TryGetTypeAttributeOfType``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageHandler`1.GetTypeAttributesOfType``1">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.MessageHandler`1.MethodAttributeProvider">
            <summary>
            Returns the provider that is used to access all attributes declared on the <see cref="M:Kingo.Messaging.IMessageHandler`1.HandleAsync(`0,Kingo.Messaging.IMicroProcessorContext)" /> method.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.MessageHandler`1.TryGetMethodAttributeOfType``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageHandler`1.GetMethodAttributesOfType``1">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageHandler`1.HandleAsync(`0,Kingo.Messaging.IMicroProcessorContext)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageHandler`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageHandler`1.Accept(Kingo.Messaging.IMicroProcessorPipelineVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageHandler`1.FromDelegate(System.Action{`0,Kingo.Messaging.IMicroProcessorContext})">
            <summary>
            Wraps the specified delegate into a <see cref="T:Kingo.Messaging.IMessageHandler`1" /> instance.
            </summary>
            <param name="handler">The delegate to wrap.</param>
            <returns>
            <c>null</c> if <paramref name="handler"/> is <c>null</c>; otherwise, a <see cref="T:Kingo.Messaging.IMessageHandler`1"/> instance
            that wraps the specified <paramref name="handler"/>.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.MessageHandler`1.FromDelegate(System.Func{`0,Kingo.Messaging.IMicroProcessorContext,System.Threading.Tasks.Task})">
            <summary>
            Wraps the specified delegate into a <see cref="T:Kingo.Messaging.IMessageHandler`1" /> instance.
            </summary>
            <param name="handler">The delegate to wrap.</param>
            <returns>
            <c>null</c> if <paramref name="handler"/> is <c>null</c>; otherwise, a <see cref="T:Kingo.Messaging.IMessageHandler"/> instance
            that wraps the specified <paramref name="handler"/>.
            </returns>
        </member>
        <member name="T:Kingo.Messaging.MessageHandlerAttribute">
            <summary>
            This attribute must be put on each <see cref="T:Kingo.Messaging.IMessageHandler`1" /> class to support auto-registration of it
            by the <see cref="T:Kingo.Messaging.MessageHandlerFactory" /> class.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerAttribute.#ctor(Kingo.Messaging.InstanceLifetime)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.MessageHandlerAttribute" /> class.
            </summary>
            <param name="lifetime">The lifetime of the <see cref="T:Kingo.Messaging.IMessageHandler`1" />.</param>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerAttribute.#ctor(Kingo.Messaging.InstanceLifetime,Kingo.Messaging.MessageSources)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.MessageHandlerAttribute" /> class.
            </summary>
            <param name="lifetime">The lifetime of the <see cref="T:Kingo.Messaging.IMessageHandler`1" />.</param>
            <param name="sources">Specifies which source(s) the message is accepted from.</param>
        </member>
        <member name="P:Kingo.Messaging.MessageHandlerAttribute.Lifetime">
            <summary>
            The lifetime of the <see cref="T:Kingo.Messaging.IMessageHandler`1" />.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.MessageHandlerAttribute.Sources">
            <summary>
            Specifies which source(s) the message is accepted from.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerAttribute.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.MessageHandlerClass">
            <summary>
            Represents a class that is registered as a <see cref="T:Kingo.Messaging.IMessageHandler`1" />.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.MessageHandlerClass.Type">
            <summary>
            Returns the type of this message handler class.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.MessageHandlerClass.Interfaces">
            <summary>
            Returns all <see cref="T:Kingo.Messaging.IMessageHandler`1" /> interface types that are implemented by this class.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.MessageHandlerClass.Configuration">
            <summary>
            Returns the configuration of this message handler class.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerClass.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.MessageHandlerConfiguration">
            <summary>
            Contains all configuration settings for a <see cref="T:Kingo.Messaging.IMessageHandler`1" />.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.MessageHandlerConfiguration.Default">
            <summary>
            The default configuration that is applied for message handlers.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerConfiguration.#ctor(Kingo.Messaging.InstanceLifetime)">
            <summary>
            Initializes a new instance of a <see cref="T:Kingo.Messaging.MessageHandlerConfiguration" /> structure.
            </summary>
            <param name="lifetime">The lifetime of the <see cref="T:Kingo.Messaging.IMessageHandler`1" />.</param>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerConfiguration.#ctor(Kingo.Messaging.InstanceLifetime,Kingo.Messaging.MessageSources)">
            <summary>
            Initializes a new instance of a <see cref="T:Kingo.Messaging.MessageHandlerConfiguration" /> structure.
            </summary>
            <param name="lifetime">The lifetime of the <see cref="T:Kingo.Messaging.IMessageHandler`1" />.</param>
            <param name="sources">Specifies which source(s) the message is accepted from.</param>
        </member>
        <member name="P:Kingo.Messaging.MessageHandlerConfiguration.Lifetime">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.MessageHandlerConfiguration.Sources">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerConfiguration.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is an instance of <see cref="T:Kingo.Messaging.MessageHandlerConfiguration" />
            and equals the value of this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerConfiguration.Equals(Kingo.Messaging.MessageHandlerConfiguration)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:Kingo.Messaging.MessageHandlerConfiguration" /> value.
            </summary>
            <param name="other">A <see cref="T:Kingo.Messaging.MessageHandlerConfiguration" /> value to compare to this instance.</param>
            <returns>
            <c>true</c> if <paramref name="other"/> has the same value as this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerConfiguration.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerConfiguration.ToString">
            <summary>Converts this value to its equivalent string-representation.</summary>
            <returns>The string-representation of this value.</returns>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerConfiguration.op_Equality(Kingo.Messaging.MessageHandlerConfiguration,Kingo.Messaging.MessageHandlerConfiguration)">
            <summary>Determines whether two specified <see cref="T:Kingo.Messaging.MessageHandlerConfiguration" />-instances have the same value.</summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare</param>
            <returns><c>true</c> if both instances have the same value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerConfiguration.op_Inequality(Kingo.Messaging.MessageHandlerConfiguration,Kingo.Messaging.MessageHandlerConfiguration)">
            <summary>Determines whether two specified <see cref="T:Kingo.Messaging.MessageHandlerConfiguration" />-instances do not have the same value.</summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare</param>
            <returns><c>true</c> if both instances do not have the same value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerDecorator`1.Accept(Kingo.Messaging.IMicroProcessorPipelineVisitor)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.MessageHandlerFactory">
            <summary>
            When implemented, represents a factory of all message-handlers that are used to handle the messages
            for the <see cref="T:Kingo.Messaging.MicroProcessor"/>.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.MessageHandlerFactory" /> class.
            </summary>        
        </member>
        <member name="P:Kingo.Messaging.MessageHandlerFactory.Count">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.ResolveMessageHandlers``1(Kingo.Messaging.MessageHandlerContext,``0)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.Resolve(System.Type)">
            <summary>
            Create an instance of the requested type.
            </summary>
            <param name="type">Type to create.</param>
            <returns>An instance of the requested type.</returns>                       
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.Register``1(Kingo.Messaging.InstanceLifetime)">
            <summary>
            Registers the specified type <typeparamref name="T" /> with the specified <paramref name="lifetime" />.
            </summary>
            <param name="lifetime">
            Lifetime of the instance that will be resolved.
            </param>
            <typeparam name="T">The type to register.</typeparam>
            <returns>This instance.</returns>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.Register(System.Type,Kingo.Messaging.InstanceLifetime)">
            <summary>
            Registers the specified <paramref name="type" /> with the specified <paramref name="lifetime" />.
            </summary>
            <param name="type">The type to register.</param>
            <param name="lifetime">Lifetime of the instance that will be resolved.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.Register``2(Kingo.Messaging.InstanceLifetime)">
            <summary>
            Registers a the specified type <typeparamref name="TTo" /> as an implementation of type <typeparamref name="TFrom" />
            with the specified <paramref name="lifetime" />.
            </summary>
            <param name="lifetime">Lifetime of the instance that will be resolved.</param>
            <typeparam name="TFrom">A base type of <typeparamref name="TTo"/> or interface implemented by <typeparamref name="TTo"/>.</typeparam>
            <typeparam name="TTo">The type to register.</typeparam>
            <returns>This instance.</returns>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.Register(System.Type,System.Type,Kingo.Messaging.InstanceLifetime)">
            <summary>
            Registers a the specified type <paramref name="to" /> as an implementation of type <paramref name="from" />
            with the specified <paramref name="lifetime" />.
            </summary>
            <param name="from">A base type of <paramref name="to"/> or interface implemented by <paramref name="to"/> (optional).</param>
            <param name="to">The type to register.</param> 
            <param name="lifetime">Lifetime of the instance that will be resolved.</param>       
            <returns>This instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="to"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.RegisterPerResolve(System.Type,System.Type)">
            <summary>
            Registers the specified type <paramref name="to" />. A new instance of this type will be created each time it is
            resolved. If <paramref name="from"/> is specified, a new instance of <paramref name="to"/> will be created
            when an instance of <paramref name="from"/> is requested.
            </summary>
            <param name="from">A base type of <paramref name="to"/> or interface implemented by <paramref name="to"/> (optional).</param>
            <param name="to">The type to register.</param>        
            <returns>This instance.</returns>   
            /// <exception cref="T:System.ArgumentNullException">
            <paramref name="to"/> is <c>null</c>.
            </exception>      
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.RegisterPerUnitOfWork(System.Type,System.Type)">
            <summary>
            Registers the specified type <paramref name="to" />. Only one instance of this type will be created inside the scope of
            a unit of work, represented by the current <see cref="T:Kingo.Messaging.MicroProcessorContext" />. If <paramref name="from"/> is specified,
            an instance of <paramref name="to"/> will be resolved when an instance of <paramref name="from"/> is requested.
            </summary>
            <param name="from">A base type of <paramref name="to"/> or interface implemented by <paramref name="to"/> (optional).</param>
            <param name="to">The type to register.</param>        
            <returns>This instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="to"/> is <c>null</c>.
            </exception>     
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.RegisterPerProcessor(System.Type,System.Type)">
            <summary>
            Registers the specified type <paramref name="to" />. Only one instance of this type will ever be created by this factory,
            reflecting the singleton pattern (in the light of the owning processor). If <paramref name="from"/> is specified, an
            instance of <paramref name="to"/> will be resolved when an instance of <paramref name="from"/> is requested.
            </summary>
            <param name="from">A base type of <paramref name="to"/> or interface implemented by <paramref name="to"/> (optional).</param>
            <param name="to">The type to register.</param>        
            <returns>This instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="to"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.RegisterInstance(System.Object)">
            <summary>
            Registers a certain instance as a singleton.
            </summary>        
            <param name="instance">The instance to register.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="instance"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.RegisterInstance``1(``0)">
            <summary>
            Registers a certain instance as a singleton. The specified <paramref name="instance"/>
            will be returned when an instance of <typeparamref name="TFrom"/> is requested.
            </summary>
            <typeparam name="TFrom">A base type of <typeparamref name="TFrom"/> or interface implemented by <paramref name="instance"/>.</typeparam>        
            <param name="instance">The instance to register.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="instance"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerFactory.RegisterInstance(System.Type,System.Object)">
            <summary>
            Registers a certain instance as a singleton. If <paramref name="from"/> is specified,
            <paramref name="to"/> will be returned when an instance of <paramref name="from"/> is requested.
            </summary>
            <param name="from">A base type of <paramref name="to"/> or interface implemented by <paramref name="to"/> (optional).</param>
            <param name="to">The instance to register.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="to"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="T:Kingo.Messaging.InstanceLifetime">
            <summary>
            A value that is used to specify the lifetime of a certain instance that is resolved at runtime.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.InstanceLifetime.PerResolve">
            <summary>
            Specifies that a new instance of a type should be created each time it is resolved.
            </summary>        
        </member>
        <member name="F:Kingo.Messaging.InstanceLifetime.PerUnitOfWork">
            <summary>
            Specifies that the lifetime of the instance is bound to a single <see cref="T:Kingo.Messaging.MicroProcessorContext" />.       
            </summary>        
        </member>
        <member name="F:Kingo.Messaging.InstanceLifetime.PerProcessor">
            <summary>
            Specifies that the lifetime of the instance is bound to a single <see cref="T:Kingo.Messaging.MicroProcessor" />.
            </summary>        
        </member>
        <member name="T:Kingo.Messaging.MessageHandlerOrQuery`1">
            <summary>
            Represents a <see cref="T:Kingo.Messaging.IMessageHandler`1" />, <see cref="T:Kingo.Messaging.IQuery`1" /> or <see cref="T:Kingo.Messaging.IQuery`2"/>.
            </summary>
            <typeparam name="TResult">Type of the resulting operation.</typeparam>
        </member>
        <member name="P:Kingo.Messaging.MessageHandlerOrQuery`1.TypeAttributeProvider">
            <summary>
            Returns the provider that is used to access all attributes declared on the <see cref="T:Kingo.Messaging.IMessageHandler`1" />.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerOrQuery`1.TryGetTypeAttributeOfType``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerOrQuery`1.GetTypeAttributesOfType``1">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.MessageHandlerOrQuery`1.MethodAttributeProvider">
            <summary>
            Returns the provider that is used to access all attributes declared on the <see cref="M:Kingo.Messaging.IMessageHandler`1.HandleAsync(`0,Kingo.Messaging.IMicroProcessorContext)" /> method.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerOrQuery`1.TryGetMethodAttributeOfType``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerOrQuery`1.GetMethodAttributesOfType``1">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageHandlerOrQuery`1.HandleMessageOrExecuteQueryAsync(Kingo.Messaging.IMicroProcessorContext)">
            <summary>
            Processes the current command, event or query asynchronously and returns the result.
            </summary>
            <param name="context">Context of the <see cref="T:Kingo.Messaging.IMicroProcessor" /> that is currently handling the message.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:Kingo.Messaging.HandleAsyncResult">
            <summary>
            Represents the result of the invocation of a <see cref="T:Kingo.Messaging.IMessageHandler`1" />.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.HandleAsyncResult.IsMetadataResult">
            <summary>
            Indicates whether or not this result was obtained by invoking a metadata event handler.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.HandleAsyncResult.OutputStream">
            <summary>
            Represents the stream of events that is published during a unit of work. All output event will be handled by
            <see cref="T:Kingo.Messaging.IMessageHandler`1" /> classes that accept message of source <see cref="F:Kingo.Messaging.MessageSources.OutputStream" />.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.HandleAsyncResult.MetadataStream">
            <summary>
            Represents the stream of events that contain metadata about the application's behavior. All metadata events will be handled
            on separate threads by <see cref="T:Kingo.Messaging.IMessageHandler`1" /> classes that accept message of source <see cref="F:Kingo.Messaging.MessageSources.MetadataStream" />.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.HandleAsyncResult.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.MicroProcessor">
            <summary>
            Represents a basic implementation of the <see cref="T:Kingo.Messaging.IMicroProcessor" /> interface.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.MicroProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.MicroProcessor" /> class.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.MicroProcessor.MessageHandlerFactory">
            <summary>
            Returns the <see cref="P:Kingo.Messaging.MicroProcessor.MessageHandlerFactory" /> of this processor.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.MicroProcessor.CreateMessageHandlerFactory">
            <summary>
            Creates and returns a <see cref="P:Kingo.Messaging.MicroProcessor.MessageHandlerFactory" /> for this processor.
            </summary>        
            <returns>A new <see cref="P:Kingo.Messaging.MicroProcessor.MessageHandlerFactory" /> to be used by this processor.</returns>
        </member>
        <member name="M:Kingo.Messaging.MicroProcessor.CreateMessageHandlerTypeSet">
            <summary>
            Returns a <see cref="T:Kingo.TypeSet"/> that will be scanned by the <see cref="P:Kingo.Messaging.MicroProcessor.MessageHandlerFactory" /> of this processor
            to locate <see cref="T:Kingo.Messaging.IMessageHandler`1"/> classes and auto-register these classes so that instances of them
            can be resolved at run-time.
            </summary>        
            <returns>A <see cref="T:Kingo.TypeSet" /> that contains all message handler types to register.</returns>
        </member>
        <member name="M:Kingo.Messaging.MicroProcessor.HandleStreamAsync(Kingo.Messaging.IMessageStream,System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MicroProcessor.HandleMetadataStreamAsync(Kingo.Messaging.IMessageStream,System.Func{Kingo.Messaging.IMessageStream,System.Threading.Tasks.Task})">
            <summary>
            Handles the specified <paramref name="metadataStream"/> by invoking the specified <paramref name="handler"/>.
            This method can be used to perform all necessary operations before and/or after handling a stream of metadata events,
            such as creating or exitting a specific transaction scope.
            </summary>
            <param name="metadataStream">The stream to handler.</param>
            <param name="handler">The handler to invoke.</param>
            <returns>A task representing the operation.</returns>
        </member>
        <member name="M:Kingo.Messaging.MicroProcessor.IsCommand(System.Object)">
            <summary>
            Determines whether or not the specified message is a Command. By default,
            this method returns <c>true</c> when the type-name ends with 'Command'.
            </summary>
            <param name="message">The message to analyze.</param>
            <returns>
            <c>true</c> if the specified <paramref name="message"/> is a command; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.MicroProcessor.ExecuteAsync``1(Kingo.Messaging.IQuery{``0},System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MicroProcessor.ExecuteAsync``2(``0,Kingo.Messaging.IQuery{``0,``1},System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MicroProcessor.CreateMessagePipeline">
            <summary>
            Creates and returns a collection of <see cref="T:Kingo.Messaging.IMicroProcessorPipeline" /> segments which will be assembled into a single
            pipeline to handle every message or query.
            </summary>
            <returns>A collection of <see cref="T:Kingo.Messaging.IMicroProcessorPipeline" /> instances.</returns>
        </member>
        <member name="T:Kingo.Messaging.MicroProcessorExtensions">
            <summary>
            Contains extension methods for the <see cref="T:Kingo.Messaging.IMicroProcessor" /> interface.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.MicroProcessorExtensions.Handle``1(Kingo.Messaging.IMicroProcessor,``0,System.Action{``0,Kingo.Messaging.IMicroProcessorContext})">
            <summary>
            Processes the specified message. If <paramref name="handler"/> is not <c>null</c>, this handler will be invoked
            instead of any registered handlers.
            </summary>
            <typeparam name="TMessage">Type of the message.</typeparam>
            <param name="processor">A processor.</param>
            <param name="message">Message to handle.</param>
            <param name="handler">
            Optional handler that will be used to handle the message.
            If <c>null</c>, the processor will attempt to resolve any registered handlers for the specified <paramref name="message"/>.
            </param>
            <returns>A stream of events that represents all changes made by this processor.</returns>    
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>               
            <exception cref="T:Kingo.Messaging.ExternalProcessorException">
            The specified <paramref name="message"/> could not be handled because it was a bad request or because an
            internal server error occurred.
            </exception>                                     
        </member>
        <member name="M:Kingo.Messaging.MicroProcessorExtensions.Handle``1(Kingo.Messaging.IMicroProcessor,``0,System.Func{``0,Kingo.Messaging.IMicroProcessorContext,System.Threading.Tasks.Task{Kingo.Messaging.IMessageStream}})">
            <summary>
            Processes the specified message. If <paramref name="handler"/> is not <c>null</c>, this handler will be invoked
            instead of any registered handlers.
            </summary>
            <typeparam name="TMessage">Type of the message.</typeparam>
            <param name="processor">A processor.</param>
            <param name="message">Message to handle.</param>
            <param name="handler">
            Optional handler that will be used to handle the message.
            If <c>null</c>, the processor will attempt to resolve any registered handlers for the specified <paramref name="message"/>.
            </param>  
            <returns>A stream of events that represents all changes made by this processor.</returns>        
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>    
            <exception cref="T:Kingo.Messaging.ExternalProcessorException">
            The specified <paramref name="message"/> could not be handled because it was a bad request or because an
            internal server error occurred.
            </exception>                                    
        </member>
        <member name="M:Kingo.Messaging.MicroProcessorExtensions.Handle``1(Kingo.Messaging.IMicroProcessor,``0,Kingo.Messaging.IMessageHandler{``0})">
            <summary>
            Processes the specified message.
            </summary>
            <typeparam name="TMessage">Type of the message.</typeparam>
            <param name="processor">A processor.</param>
            <param name="message">Message to handle.</param>
            <param name="handler">
            Optional handler that will be used to handle the message.
            If <c>null</c>, the processor will attempt to resolve any registered handlers for the specified <paramref name="message"/>.
            </param>
            <returns>A stream of events that represents all changes made by this processor.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>                        
            <exception cref="T:Kingo.Messaging.ExternalProcessorException">
            The specified <paramref name="message"/> could not be handled because it was a bad request or because an
            internal server error occurred.
            </exception>                       
        </member>
        <member name="M:Kingo.Messaging.MicroProcessorExtensions.HandleStream(Kingo.Messaging.IMicroProcessor,Kingo.Messaging.IMessageStream)">
            <summary>
            Processes the specified stream by invoking all appropriate message handlers for each message.
            </summary>        
            <param name="processor">A processor.</param>
            <param name="inputStream">Stream of message to handles.</param>
            <returns>A stream of events that represents all changes made by this processor.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputStream"/> is <c>null</c>.
            </exception>     
            <exception cref="T:Kingo.Messaging.ExternalProcessorException">
            One of the messages inside the <paramref name="inputStream"/> could not be handled because it was a bad request or because an
            internal server error occurred.
            </exception>   
        </member>
        <member name="M:Kingo.Messaging.MicroProcessorExtensions.HandleAsync``1(Kingo.Messaging.IMicroProcessor,``0,System.Threading.CancellationToken)">
            <summary>
            Processes the specified message asynchronously by invoking all handlers that are registered for the specified <typeparamref name="TMessage"/>.
            </summary>
            <typeparam name="TMessage">Type of the message.</typeparam>
            <param name="processor">A processor.</param>
            <param name="message">Message to handle.</param>        
            <param name="token">Optional token that can be used to cancel the operation.</param> 
            <returns>A stream of events that represents all changes made by this processor.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>                                               
        </member>
        <member name="M:Kingo.Messaging.MicroProcessorExtensions.HandleAsync``1(Kingo.Messaging.IMicroProcessor,``0,System.Action{``0,Kingo.Messaging.IMicroProcessorContext},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Processes the specified message asynchronously. If <paramref name="handler"/> is not <c>null</c>, this handler will be invoked
            instead of any registered handlers.
            </summary>
            <typeparam name="TMessage">Type of the message.</typeparam>
            <param name="processor">A processor.</param>
            <param name="message">Message to handle.</param>
            <param name="handler">
            Optional handler that will be used to handle the message.
            If <c>null</c>, the processor will attempt to resolve any registered handlers for the specified <paramref name="message"/>.
            </param>
            <param name="token">Optional token that can be used to cancel the operation.</param> 
            <returns>A stream of events that represents all changes made by this processor.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>                                               
        </member>
        <member name="M:Kingo.Messaging.MicroProcessorExtensions.HandleAsync``1(Kingo.Messaging.IMicroProcessor,``0,System.Func{``0,Kingo.Messaging.IMicroProcessorContext,System.Threading.Tasks.Task},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Processes the specified message asynchronously. If <paramref name="handler"/> is not <c>null</c>, this handler will be invoked
            instead of any registered handlers.
            </summary>
            <typeparam name="TMessage">Type of the message.</typeparam>
            <param name="processor">A processor.</param>
            <param name="message">Message to handle.</param>
            <param name="handler">
            Optional handler that will be used to handle the message.
            If <c>null</c>, the processor will attempt to resolve any registered handlers for the specified <paramref name="message"/>.
            </param> 
            <param name="token">Optional token that can be used to cancel the operation.</param>  
            <returns>A stream of events that represents all changes made by this processor.</returns>   
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>                                            
        </member>
        <member name="M:Kingo.Messaging.MicroProcessorExtensions.HandleAsync``1(Kingo.Messaging.IMicroProcessor,``0,Kingo.Messaging.IMessageHandler{``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Processes the specified message asynchronously.
            </summary>
            <typeparam name="TMessage">Type of the message.</typeparam>
            <param name="processor">A processor.</param>
            <param name="message">Message to handle.</param>
            <param name="handler">
            Optional handler that will be used to handle the message.
            If <c>null</c>, the processor will attempt to resolve any registered handlers for the specified <paramref name="message"/>.
            </param>
            <param name="token">Optional token that can be used to cancel the operation.</param> 
            <returns>A stream of events that represents all changes made by this processor.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>                                               
        </member>
        <member name="M:Kingo.Messaging.MicroProcessorExtensions.Execute``1(Kingo.Messaging.IMicroProcessor,System.Func{Kingo.Messaging.IMicroProcessorContext,``0})">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result.
            </summary>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>  
            <param name="processor">A processor.</param>      
            <param name="query">The query to execute.</param>                        
            <returns>The result of the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>  
            <exception cref="T:Kingo.Messaging.InternalServerErrorException">
            The query could not be executed because an internal server error occurred.
            </exception>  
        </member>
        <member name="M:Kingo.Messaging.MicroProcessorExtensions.Execute``1(Kingo.Messaging.IMicroProcessor,System.Func{Kingo.Messaging.IMicroProcessorContext,System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result.
            </summary>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>  
            <param name="processor">A processor.</param>      
            <param name="query">The query to execute.</param>                        
            <returns>The result of the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>  
            <exception cref="T:Kingo.Messaging.InternalServerErrorException">
            The query could not be executed because an internal server error occurred.
            </exception> 
        </member>
        <member name="M:Kingo.Messaging.MicroProcessorExtensions.Execute``1(Kingo.Messaging.IMicroProcessor,Kingo.Messaging.IQuery{``0})">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result.
            </summary>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>   
            <param name="processor">A processor.</param>     
            <param name="query">The query to execute.</param>                        
            <returns>The result of the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>  
            <exception cref="T:Kingo.Messaging.InternalServerErrorException">
            The query could not be executed because an internal server error occurred.
            </exception> 
        </member>
        <member name="M:Kingo.Messaging.MicroProcessorExtensions.ExecuteAsync``1(Kingo.Messaging.IMicroProcessor,System.Func{Kingo.Messaging.IMicroProcessorContext,``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>   
            <param name="processor">A processor.</param>     
            <param name="query">The query to execute.</param>               
            <param name="token">Optional token that can be used to cancel the operation.</param>          
            <returns>The <see cref="T:System.Threading.Tasks.Task`1" /> that is executing the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>  
        </member>
        <member name="M:Kingo.Messaging.MicroProcessorExtensions.ExecuteAsync``1(Kingo.Messaging.IMicroProcessor,System.Func{Kingo.Messaging.IMicroProcessorContext,System.Threading.Tasks.Task{``0}},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam> 
            <param name="processor">A processor.</param>       
            <param name="query">The query to execute.</param>               
            <param name="token">Optional token that can be used to cancel the operation.</param>          
            <returns>The <see cref="T:System.Threading.Tasks.Task`1" /> that is executing the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>  
        </member>
        <member name="M:Kingo.Messaging.MicroProcessorExtensions.Execute``2(Kingo.Messaging.IMicroProcessor,``0,System.Func{``0,Kingo.Messaging.IMicroProcessorContext,``1})">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result.
            </summary>
            <typeparam name="TMessageIn">Type of the message going into the query.</typeparam>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>  
            <param name="processor">A processor.</param>      
            <param name="message">Message containing the parameters of this query.</param>
            <param name="query">The query to execute.</param>                                
            <returns>The result of the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> or <paramref name="query"/> is <c>null</c>.
            </exception> 
            <exception cref="T:Kingo.Messaging.ExternalProcessorException">
            The specified <paramref name="query"/> could not be executed because the specified <paramref name="message"/> represents a bad request
            or because because an internal server error occurred.
            </exception>                
        </member>
        <member name="M:Kingo.Messaging.MicroProcessorExtensions.Execute``2(Kingo.Messaging.IMicroProcessor,``0,System.Func{``0,Kingo.Messaging.IMicroProcessorContext,System.Threading.Tasks.Task{``1}})">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result.
            </summary>
            <typeparam name="TMessageIn">Type of the message going into the query.</typeparam>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>  
            <param name="processor">A processor.</param>      
            <param name="message">Message containing the parameters of this query.</param>
            <param name="query">The query to execute.</param>                                
            <returns>The result of the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> or <paramref name="query"/> is <c>null</c>.
            </exception>    
            <exception cref="T:Kingo.Messaging.ExternalProcessorException">
            The specified <paramref name="query"/> could not be executed because the specified <paramref name="message"/> represents a bad request
            or because because an internal server error occurred.
            </exception>            
        </member>
        <member name="M:Kingo.Messaging.MicroProcessorExtensions.Execute``2(Kingo.Messaging.IMicroProcessor,``0,Kingo.Messaging.IQuery{``0,``1})">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result.
            </summary>
            <typeparam name="TMessageIn">Type of the message going into the query.</typeparam>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>          
            <param name="processor">A processor.</param>      
            <param name="message">Message containing the parameters of this query.</param>
            <param name="query">The query to execute.</param>                                 
            <returns>The result of the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> or <paramref name="query"/> is <c>null</c>.
            </exception>     
            <exception cref="T:Kingo.Messaging.ExternalProcessorException">
            The specified <paramref name="query"/> could not be executed because the specified <paramref name="message"/> represents a bad request
            or because because an internal server error occurred.
            </exception>           
        </member>
        <member name="M:Kingo.Messaging.MicroProcessorExtensions.ExecuteAsync``2(Kingo.Messaging.IMicroProcessor,``0,System.Func{``0,Kingo.Messaging.IMicroProcessorContext,``1},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TMessageIn">Type of the message going into the query.</typeparam>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>  
            <param name="processor">A processor.</param>      
            <param name="message">Message containing the parameters of this query.</param>
            <param name="query">The query to execute.</param>                                
            <param name="token">Optional token that can be used to cancel the operation.</param>                        
            <returns>The <see cref="T:System.Threading.Tasks.Task`1" /> that is executing the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> or <paramref name="query"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="M:Kingo.Messaging.MicroProcessorExtensions.ExecuteAsync``2(Kingo.Messaging.IMicroProcessor,``0,System.Func{``0,Kingo.Messaging.IMicroProcessorContext,System.Threading.Tasks.Task{``1}},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TMessageIn">Type of the message going into the query.</typeparam>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>   
            <param name="processor">A processor.</param>     
            <param name="message">Message containing the parameters of this query.</param>
            <param name="query">The query to execute.</param>                                 
            <param name="token">Optional token that can be used to cancel the operation.</param>                        
            <returns>The <see cref="T:System.Threading.Tasks.Task`1" /> that is executing the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> or <paramref name="query"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="T:Kingo.Messaging.MicroProcessorPipeline">
            <summary>
            Serves as a base class for a <see cref="T:Kingo.Messaging.IMicroProcessorPipeline" /> implementation that
            does not discriminate between handling a message or executing a query.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.MicroProcessorPipeline.HandleAsync``1(Kingo.Messaging.MessageHandler{``0},``0,Kingo.Messaging.IMicroProcessorContext)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MicroProcessorPipeline.ExecuteAsync``1(Kingo.Messaging.Query{``0},Kingo.Messaging.IMicroProcessorContext)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MicroProcessorPipeline.ExecuteAsync``2(Kingo.Messaging.Query{``0,``1},``0,Kingo.Messaging.IMicroProcessorContext)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MicroProcessorPipeline.HandleOrExecuteAsync``1(Kingo.Messaging.MessageHandlerOrQuery{``0},Kingo.Messaging.IMicroProcessorContext)">
            <summary>
            Processes the current command, event or query asynchronously and returns the result.
            </summary>
            <typeparam name="TResult">Type of the result of the operation.</typeparam>
            <param name="handlerOrQuery">A message handler or query that will perform the operation.</param>
            <param name="context">Context of the <see cref="T:Kingo.Messaging.IMicroProcessor" /> that is currently handling the message.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:Kingo.Messaging.Query`1">
            <summary>
            Represents a <see cref="T:Kingo.Messaging.IQuery`1" /> instance that is able to provide access to its own attributes.
            </summary>
            <typeparam name="TMessageOut">Type of the response that is returned by this query.</typeparam>
        </member>
        <member name="P:Kingo.Messaging.Query`1.TypeAttributeProvider">
            <summary>
            Returns the provider that is used to access all attributes declared on the <see cref="T:Kingo.Messaging.IQuery`1" />.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Query`1.MethodAttributeProvider">
            <summary>
            Returns the provider that is used to access all attributes declared on the <see cref="M:Kingo.Messaging.IQuery`1.ExecuteAsync(Kingo.Messaging.IMicroProcessorContext)" /> method.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Query`1.TryGetTypeAttributeOfType``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Query`1.GetTypeAttributesOfType``1">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Query`1.TryGetMethodAttributeOfType``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Query`1.GetMethodAttributesOfType``1">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Query`1.ExecuteAsync(Kingo.Messaging.IMicroProcessorContext)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Query`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Query`1.Accept(Kingo.Messaging.IMicroProcessorPipelineVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Query`1.FromDelegate(System.Func{Kingo.Messaging.IMicroProcessorContext,`0})">
            <summary>
            Wraps the specified delegate into a <see cref="T:Kingo.Messaging.IQuery`1" /> instance.
            </summary>
            <param name="query">The delegate to wrap.</param>
            <returns>
            <c>null</c> if <paramref name="query"/> is <c>null</c>; otherwise, a <see cref="T:Kingo.Messaging.IQuery`1"/> instance
            that wraps the specified <paramref name="query"/>.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.Query`1.FromDelegate(System.Func{Kingo.Messaging.IMicroProcessorContext,System.Threading.Tasks.Task{`0}})">
            <summary>
            Wraps the specified delegate into a <see cref="T:Kingo.Messaging.IQuery`1" /> instance.
            </summary>
            <param name="query">The delegate to wrap.</param>
            <returns>
            <c>null</c> if <paramref name="query"/> is <c>null</c>; otherwise, a <see cref="T:Kingo.Messaging.IQuery`1"/> instance
            that wraps the specified <paramref name="query"/>.
            </returns>
        </member>
        <member name="T:Kingo.Messaging.Query`2">
            <summary>
            Represents a <see cref="T:Kingo.Messaging.IQuery`2" /> instance that is able to provide access to its own attributes.
            </summary>
            <typeparam name="TMessageIn">Type of the request that is executed by this query.</typeparam>
            <typeparam name="TMessageOut">Type of the response that is returned by this query.</typeparam>
        </member>
        <member name="P:Kingo.Messaging.Query`2.TypeAttributeProvider">
            <summary>
            Returns the provider that is used to access all attributes declared on the <see cref="T:Kingo.Messaging.IQuery`2" />.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Query`2.MethodAttributeProvider">
            <summary>
            Returns the provider that is used to access all attributes declared on the <see cref="M:Kingo.Messaging.IQuery`2.ExecuteAsync(`0,Kingo.Messaging.IMicroProcessorContext)" /> method.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Query`2.TryGetTypeAttributeOfType``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Query`2.GetTypeAttributesOfType``1">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Query`2.TryGetMethodAttributeOfType``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Query`2.GetMethodAttributesOfType``1">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Query`2.ExecuteAsync(`0,Kingo.Messaging.IMicroProcessorContext)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Query`2.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Query`2.Accept(Kingo.Messaging.IMicroProcessorPipelineVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Query`2.FromDelegate(System.Func{`0,Kingo.Messaging.IMicroProcessorContext,`1})">
            <summary>
            Wraps the specified delegate into a <see cref="T:Kingo.Messaging.IQuery`2" /> instance.
            </summary>
            <param name="query">The delegate to wrap.</param>
            <returns>
            <c>null</c> if <paramref name="query"/> is <c>null</c>; otherwise, a <see cref="T:Kingo.Messaging.IQuery`2"/> instance
            that wraps the specified <paramref name="query"/>.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.Query`2.FromDelegate(System.Func{`0,Kingo.Messaging.IMicroProcessorContext,System.Threading.Tasks.Task{`1}})">
            <summary>
            Wraps the specified delegate into a <see cref="T:Kingo.Messaging.IQuery`2" /> instance.
            </summary>
            <param name="query">The delegate to wrap.</param>
            <returns>
            <c>null</c> if <paramref name="query"/> is <c>null</c>; otherwise, a <see cref="T:Kingo.Messaging.IQuery`2"/> instance
            that wraps the specified <paramref name="query"/>.
            </returns>
        </member>
        <member name="T:Kingo.Messaging.ITypeAttributeProvider">
            <summary>
            When implemented by a class, provides access to all attributes that are defined on a specific type.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.ITypeAttributeProvider.TryGetTypeAttributeOfType``1(``0@)">
            <summary>
            Attempts to retrieve a single attribute of type <typeparamref name="TAttribute"/> defined on a specific type.
            </summary>
            <typeparam name="TAttribute">Type of the attribute to retrieve.</typeparam>
            <param name="attribute">
            When this method returns <c>true</c>, this parameter will refer to the retrieved attribute;
            otherwise it will be <c>null</c>.
            </param>
            <returns><c>true</c> if the attribute was retrieved; otherwise <c>false</c>.</returns>
            <exception cref="T:System.InvalidOperationException">
            Multiple attribute defined of the class are assignable to type <typeparamref name="TAttribute"/>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.ITypeAttributeProvider.GetTypeAttributesOfType``1">
            <summary>
            Retrieves all attributes of type <typeparamref name="TAttribute"/> that are declared on a specific type.
            </summary>
            <typeparam name="TAttribute">Type of the attribute to retrieve.</typeparam>
            <returns>A collection of attributes.</returns>
        </member>
        <member name="T:Kingo.Messaging.IMethodAttributeProvider">
            <summary>
            When implemented by a class, provides access to all attributes that are defined on a specific method.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.IMethodAttributeProvider.TryGetMethodAttributeOfType``1(``0@)">
            <summary>
            Attempts to retrieve a single attribute of type <typeparamref name="TAttribute"/> defined on the method on this instance.
            </summary>
            <typeparam name="TAttribute">Type of the attribute to retrieve.</typeparam>
            <param name="attribute">
            When this method returns <c>true</c>, this parameter will refer to the retrieved attribute;
            otherwise it will be <c>null</c>.
            </param>
            <returns><c>true</c> if the attribute was retrieved; otherwise <c>false</c>.</returns>
            <exception cref="T:System.InvalidOperationException">
            Multiple attribute defined of the method are assignable to type <typeparamref name="TAttribute"/>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.IMethodAttributeProvider.GetMethodAttributesOfType``1">
            <summary>
            Retrieves all attributes of type <typeparamref name="TAttribute"/> that are declared on the method of this instance.
            </summary>
            <typeparam name="TAttribute">Type of the attribute to retrieve.</typeparam>
            <returns>A collection of attributes.</returns>
        </member>
        <member name="T:Kingo.Messaging.MessageInfo">
            <summary>
            Represents a message that is being processed by a <see cref="T:Kingo.Messaging.IMicroProcessor" />.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.MessageInfo.FromQuery(System.Object)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Messaging.MessageInfo" /> for a message that represents the input message of a <see cref="T:Kingo.Messaging.IQuery`2" />
            </summary>
            <param name="message">A message.</param>
            <returns>A new <see cref="T:Kingo.Messaging.MessageInfo" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.MessageInfo.FromInputStream(System.Object)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Messaging.MessageInfo" /> for a message that was passed directly to the <see cref="T:Kingo.Messaging.IMicroProcessor" />.
            </summary>
            <param name="message">A message.</param>
            <returns>A new <see cref="T:Kingo.Messaging.MessageInfo" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.MessageInfo.FromOutputStream(System.Object)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Messaging.MessageInfo" /> for a message that originates from the <see cref="P:Kingo.Messaging.IMicroProcessorContext.OutputStream" />
            </summary>
            <param name="message">A message.</param>
            <returns>A new <see cref="T:Kingo.Messaging.MessageInfo" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.MessageInfo.FromMetadataStream(System.Object)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Messaging.MessageInfo" /> for a message that originates from the <see cref="P:Kingo.Messaging.IMicroProcessorContext.MetadataStream" />
            </summary>
            <param name="message">A message.</param>
            <returns>A new <see cref="T:Kingo.Messaging.MessageInfo" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.Messaging.MessageInfo.Message">
            <summary>
            Returns the associated message.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.MessageInfo.Source">
            <summary>
            Returns the source of a message.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.MessageInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageInfo.IsInstanceOf``1">
            <summary>
            Indicates whether or not the message is an instance of the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">A type.</typeparam>
            <returns><c>true</c> if the message is an instance of the specified type <typeparamref name="T"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Messaging.MessageInfo.IsInstanceOf``1(``0@)">
            <summary>
            Indicates whether or not the message is an instance of the specified type <typeparamref name="T"/> and returns the message in its casted form
            if the cast succeeded.
            </summary>
            <typeparam name="T">A type.</typeparam>
            <param name="message">
            If the cast succeeds, this parameter will be assigned to the casted version of the message; otherwise it will be assigned the default
            value of <typeparamref name="T"/>.
            </param>
            <returns><c>true</c> if the message is an instance of the specified type <typeparamref name="T"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Messaging.MessageInfo.IsInstanceOf(System.Type)">
            <summary>
            Indicates whether or not the message is an instance of the specified <paramref name="type"/>.
            </summary>
            <param name="type">A type.</param>
            <returns><c>true</c> if the message is an instance of the specified <paramref name="type"/>; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.MessageInfo.TryGetTypeAttributeOfType``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageInfo.GetTypeAttributesOfType``1">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.UnauthorizedRequestException">
            <summary>
            This exception is thrown by a <see cref="T:Kingo.Messaging.IMicroProcessor" /> when a command or query failed because the client
            was not authorized to execute it. This type semantically maps to HTTP response code <c>401</c>.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.UnauthorizedRequestException.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.UnauthorizedRequestException" /> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>        
        </member>
        <member name="M:Kingo.Messaging.UnauthorizedRequestException.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.UnauthorizedRequestException" /> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <param name="message">Message of the exception.</param>        
        </member>
        <member name="M:Kingo.Messaging.UnauthorizedRequestException.#ctor(System.Object,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.UnauthorizedRequestException" /> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>        
        </member>
        <member name="M:Kingo.Messaging.UnauthorizedRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.UnauthorizedRequestException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Kingo.Messaging.UnityContainerFactory">
            <summary>
            Provides an implementation of the <see cref="T:Kingo.Messaging.MessageHandlerFactory" /> by using a I<see cref="T:Microsoft.Practices.Unity.UnityContainer" />.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.UnityContainerFactory.PerUnitOfWorkLifetimeManager.GetValue">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.UnityContainerFactory.PerUnitOfWorkLifetimeManager.SetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.UnityContainerFactory.PerUnitOfWorkLifetimeManager.RemoveValue">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.UnityContainerFactory.#ctor(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.UnityContainerFactory" /> class.
            </summary>
            <param name="container">
            Container that will be used by this factory. If <c>null</c>, this factory will create a new container.
            </param>
        </member>
        <member name="P:Kingo.Messaging.UnityContainerFactory.Container">
            <summary>
            Returns the container that is used by this factory to register and resolve message handlers.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.UnityContainerFactory.RegisterPerResolve(System.Type,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.UnityContainerFactory.RegisterPerUnitOfWork(System.Type,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.UnityContainerFactory.RegisterPerProcessor(System.Type,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.UnityContainerFactory.RegisterInstance(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.UnityContainerFactory.Resolve(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.UnprocessableEntityException">
            <summary>
            This exception is thrown by a <see cref="T:Kingo.Messaging.IMicroProcessor" /> when a command failed to execute because because the operation was illegal.
            This type semantically maps to HTTP response code <c>422</c>.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.UnprocessableEntityException.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.UnprocessableEntityException" /> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>        
        </member>
        <member name="M:Kingo.Messaging.UnprocessableEntityException.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.UnprocessableEntityException" /> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <param name="message">Message of the exception.</param>        
        </member>
        <member name="M:Kingo.Messaging.UnprocessableEntityException.#ctor(System.Object,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.UnprocessableEntityException" /> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>        
        </member>
        <member name="M:Kingo.Messaging.UnprocessableEntityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.UnprocessableEntityException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Kingo.Messaging.Validation.Command">
            <summary>
            Represents a command that re-validates itself on every change and implements the <see cref="T:System.ComponentModel.INotifyPropertyChanging" />,
            <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> and <see cref="T:System.ComponentModel.IDataErrorInfo" /> interfaces so that it can easily be bound to
            in WPF applications.
            </summary>    
        </member>
        <member name="P:Kingo.Messaging.Validation.Command.HasChanges">
            <summary>
            Indicates whether or not this message has changes since it was created or the last time
            <see cref="M:Kingo.Messaging.Validation.Command.AcceptChanges" /> was called.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Validation.Command.AcceptChanges">
            <summary>
            Sets <see cref="P:Kingo.Messaging.Validation.Command.HasChanges" /> to <c>false</c>.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Validation.Command.HasErrors">
            <summary>
            Indicates whether or not this message is valid.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Validation.Command.ErrorInfo">
            <summary>
            Returns the set of validation errors related to this message.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Validation.Command.SetValue``1(``0@,``0,System.Linq.Expressions.Expression{System.Func{``0}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Assigns the specified <paramref name="newValue"/> to the <paramref name="oldValue"/> and raises
            the <see cref="E:Kingo.Messaging.Validation.Command.PropertyChanging" /> and <see cref="E:Kingo.Messaging.Validation.Command.PropertyChanged" /> events, if and only if
            the values are different.
            </summary>
            <typeparam name="TProperty">Type of the property value.</typeparam>
            <param name="oldValue">The current value of the property.</param>
            <param name="newValue">The value to assign.</param>
            <param name="expression">
            An expression referring to the property that is about to be changed.
            </param>
            <param name="comparer">
            The comparer that is used to determine whether <paramref name="oldValue"/> and <paramref name="newValue"/> are
            equal or not. If <c>null</c> is specified, the default comparer is used.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="expression"/> does not refer to a property.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Validation.Command.SetValue``1(``0@,``0,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Assigns the specified <paramref name="newValue"/> to the <paramref name="oldValue"/> and raises
            the <see cref="E:Kingo.Messaging.Validation.Command.PropertyChanging" /> and <see cref="E:Kingo.Messaging.Validation.Command.PropertyChanged" /> events, if and only if
            the values are different.
            </summary>
            <typeparam name="TProperty">Type of the property value.</typeparam>
            <param name="oldValue">The current value of the property.</param>
            <param name="newValue">The value to assign.</param>
            <param name="propertyName">
            Name of the property that is about to be changed.
            </param>
            <param name="comparer">
            The comparer that is used to determine whether <paramref name="oldValue"/> and <paramref name="newValue"/> are
            equal or not. If <c>null</c> is specified, the default comparer is used.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="propertyName"/> is <c>null</c>.
            </exception>
        </member>
        <member name="E:Kingo.Messaging.Validation.Command.PropertyChanging">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Validation.Command.OnPropertyChanging">
            <summary>
            Raises the <see cref="E:Kingo.Messaging.Validation.Command.PropertyChanging" /> event, indicating that the entire message is about to be changed.       
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Validation.Command.OnPropertyChanging``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Raises the <see cref="E:Kingo.Messaging.Validation.Command.PropertyChanging" /> event, indicating that the property referred to by the
            specified <paramref name="expression"/> is about to be changed.
            </summary>
            <typeparam name="TProperty">Type of the property that has changed.</typeparam>
            <param name="expression">
            An expression referring to the property that has changed.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="expression"/> does not refer to a property.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Validation.Command.OnPropertyChanging(System.String)">
            <summary>
            Raises the <see cref="E:Kingo.Messaging.Validation.Command.PropertyChanging" /> event, indicating that the property with the
            specified <paramref name="propertyName"/> is about to be changed.
            </summary>                
            <param name="propertyName">Name of the property that has changed.</param>
        </member>
        <member name="M:Kingo.Messaging.Validation.Command.OnPropertyChanging(System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Kingo.Messaging.Validation.Command.PropertyChanging" /> event with the specified argument.
            </summary>
            <param name="e">Argument of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="E:Kingo.Messaging.Validation.Command.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Validation.Command.OnPropertyChanged">
            <summary>
            Raises the <see cref="E:Kingo.Messaging.Validation.Command.PropertyChanged" /> event, indicating that the entire message has changed
            and all bindings need to be refreshed.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Validation.Command.OnPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Raises the <see cref="E:Kingo.Messaging.Validation.Command.PropertyChanged" /> event, indicating that the property referred to by the
            specified <paramref name="expression"/> has changed.
            </summary>
            <typeparam name="TProperty">Type of the property that has changed.</typeparam>
            <param name="expression">
            An expression referring to the property that has changed.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="expression"/> does not refer to a property.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Validation.Command.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Kingo.Messaging.Validation.Command.PropertyChanged" /> event, indicating that the property with the
            specified <paramref name="propertyName"/> has changed.
            </summary>                
            <param name="propertyName">Name of the property that has changed.</param>
        </member>
        <member name="M:Kingo.Messaging.Validation.Command.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Kingo.Messaging.Validation.Command.PropertyChanged" /> event with the specified argument.
            </summary>
            <param name="e">Argument of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.Validation.DelegateValidator`1">
            <summary>
            Represents a <see cref="T:Kingo.Messaging.Validation.IRequestMessageValidator`1"/> that is implemented through a delegate.
            </summary>
            <typeparam name="TMessage">Type of the message that can be validated by this validator.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.Validation.DelegateValidator`1.#ctor(System.Func{`0,System.Boolean,Kingo.Messaging.Validation.ErrorInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Validation.DelegateValidator`1" /> class.
            </summary>
            <param name="validationMethod">The delegate that will be used to validate each message.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="validationMethod"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Validation.DelegateValidator`1.Validate(`0,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.Validation.ErrorInfoBuilder">
            <summary>
            A builder that can be used to build an instance of the <see cref="T:Kingo.Messaging.Validation.ErrorInfo" /> class.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInfoBuilder.#ctor(System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Validation.ErrorInfoBuilder" /> class.
            </summary>
            <param name="formatProvider">Optional <see cref="T:System.IFormatProvider" /> to use when formatting error messages.</param>
        </member>
        <member name="P:Kingo.Messaging.Validation.ErrorInfoBuilder.FormatProvider">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInfoBuilder.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInfoBuilder.Add(System.String,System.String,Kingo.Messaging.Validation.ErrorInheritanceLevel)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInfoBuilder.BuildErrorInfo">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Messaging.Validation.ErrorInfo"/> instance containing all added error messages.
            </summary>
            <returns>A new <see cref="T:Kingo.Messaging.Validation.ErrorInfo"/> instance.</returns>
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInfoBuilder.ConvertToSingleErrorMessage(Kingo.Messaging.Validation.SortedErrorMessageList)">
            <summary>
            Converts the specified list of <paramref name="errorMessages"/> to a single error message. By default,
            the first error message with the lowest inheritance level is selected.       
            </summary>
            <param name="errorMessages">A list of error messages.</param>
            <returns>A single error message.</returns>
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInfoBuilder.BuildDataErrorInfo(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Messaging.Validation.ErrorInfo"/> instance containing all added error messages.
            </summary>
            <returns>A new <see cref="T:Kingo.Messaging.Validation.ErrorInfo"/> instance.</returns>
        </member>
        <member name="T:Kingo.Messaging.Validation.ErrorInheritanceLevel">
            <summary>
            Represents a level of severity of an error message in relation to a certain member. The level
            itself indicates whether or not the error is associated to the member itself (<c>0</c>), or is inherited
            through one of its child-members (1 or higher).
            </summary>
        </member>
        <member name="F:Kingo.Messaging.Validation.ErrorInheritanceLevel.NotInherited">
            <summary>
            Represent a direct association of an error with a member.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.Validation.ErrorInheritanceLevel.MaxInherited">
            <summary>
            Represents the maximum level of inheritance, thus the weakest association possible.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInheritanceLevel.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:Kingo.Messaging.Validation.ErrorInheritanceLevel" /> structure.
            </summary>
            <param name="value">Value of this structure.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInheritanceLevel.Increment">
            <summary>
            Increments the current inheritance level by one.
            </summary>
            <returns>An incremented inheritance level.</returns>
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInheritanceLevel.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInheritanceLevel.Equals(Kingo.Messaging.Validation.ErrorInheritanceLevel)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInheritanceLevel.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInheritanceLevel.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="obj">An object to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="obj" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="obj"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> is not an instance of type <see cref="T:Kingo.Messaging.Validation.ErrorInheritanceLevel" />.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInheritanceLevel.CompareTo(Kingo.Messaging.Validation.ErrorInheritanceLevel)">
            <summary>
            Compares this instance to another <see cref="T:Kingo.Messaging.Validation.ErrorInheritanceLevel"/>-value and returns an
            indication of their relative values.
            </summary>
            <param name="other">Another value</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other" />.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInheritanceLevel.ToInt32">
            <summary>
            Converts the error level back to an integer.
            </summary>
            <returns>The integer value of this error level.</returns>
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInheritanceLevel.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInheritanceLevel.op_Equality(Kingo.Messaging.Validation.ErrorInheritanceLevel,Kingo.Messaging.Validation.ErrorInheritanceLevel)">
            <summary>
            Determines whether two specified <see cref="T:Kingo.Messaging.Validation.ErrorInheritanceLevel" />-instances have the same value.
            </summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare</param>
            <returns><c>true</c> if both instances have the same value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInheritanceLevel.op_Inequality(Kingo.Messaging.Validation.ErrorInheritanceLevel,Kingo.Messaging.Validation.ErrorInheritanceLevel)">
            <summary>
            Determines whether two specified <see cref="T:Kingo.Messaging.Validation.ErrorInheritanceLevel" />-instances do not have the same value.
            </summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare</param>
            <returns><c>true</c> if both instances do not have the same value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInheritanceLevel.op_LessThan(Kingo.Messaging.Validation.ErrorInheritanceLevel,Kingo.Messaging.Validation.ErrorInheritanceLevel)">
            <summary>Determines whether one value is smaller than another.</summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare.</param>
            <returns>
            <c>true</c> if the left operand is smaller than the right operand; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInheritanceLevel.op_GreaterThan(Kingo.Messaging.Validation.ErrorInheritanceLevel,Kingo.Messaging.Validation.ErrorInheritanceLevel)">
            <summary>Determines whether one value is greater than another.</summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare.</param>
            <returns><c>true</c> if the left operand is greater than the right operand; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInheritanceLevel.op_LessThanOrEqual(Kingo.Messaging.Validation.ErrorInheritanceLevel,Kingo.Messaging.Validation.ErrorInheritanceLevel)">
            <summary>Determines whether one value is smaller than or equal to another.</summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare.</param>
            <returns>
            <c>true</c> if the left operand is smaller than or equal to the right operand; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInheritanceLevel.op_GreaterThanOrEqual(Kingo.Messaging.Validation.ErrorInheritanceLevel,Kingo.Messaging.Validation.ErrorInheritanceLevel)">
            <summary>Determines whether one value is greater than or equal to another.</summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare.</param>
            <returns>
            <c>true</c> if the left operand is greater than or equal to the right operand; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:Kingo.Messaging.Validation.ErrorMessageCollection">
            <summary>
            Provides a base implementation of the <see cref="T:Kingo.Messaging.Validation.IErrorMessageCollection" /> class.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Validation.ErrorMessageCollection.FormatProvider">
            <summary>
            Returns the <see cref="T:System.IFormatProvider"/> that is used to format incoming error messages.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorMessageCollection.Add(Kingo.Messaging.Validation.IErrorMessageBuilder,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorMessageCollection.Add(Kingo.Messaging.Validation.IErrorMessageBuilder,System.String,Kingo.Messaging.Validation.ErrorInheritanceLevel)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorMessageCollection.Add(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorMessageCollection.Add(System.String,System.String,Kingo.Messaging.Validation.ErrorInheritanceLevel)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.Validation.Identifier">
            <summary>
            Represents an identifier as defined by the C# language.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.Validation.Identifier.Builder">
            <summary>
            Represents a builder that can be used to build an <see cref="T:Kingo.Messaging.Validation.Identifier"/> character by character.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Validation.Identifier.Builder.Length">
            <summary>
            Returns the current length of the identifier.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Validation.Identifier.Builder.Append(System.Char)">
            <summary>
            Attempts to append the specified <paramref name="character"/> to the identifier.
            </summary>
            <param name="character">the character to append.</param>
            <returns><c>true</c> if the specified <paramref name="character"/> was valid and appended; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Messaging.Validation.Identifier.Builder.BuildIdentifier">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Messaging.Validation.Identifier" /> based on all appended characters.            
            </summary>
            <returns>A new <see cref="T:Kingo.Messaging.Validation.Identifier"/> instance.</returns>
            <exception cref="T:System.InvalidOperationException">
            No characters have been appended to the builder yet.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Validation.Identifier.NewBuilder">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Messaging.Validation.Identifier.Builder"/> to build a new <see cref="T:Kingo.Messaging.Validation.Identifier" /> from a set of characters.
            </summary>
            <returns>A new <see cref="T:Kingo.Messaging.Validation.Identifier.Builder"/>.</returns>
        </member>
        <member name="M:Kingo.Messaging.Validation.Identifier.NewBuilder(System.Int32)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Messaging.Validation.Identifier.Builder"/> to build a new <see cref="T:Kingo.Messaging.Validation.Identifier" /> from a set of characters.
            </summary>
            <param name="capacity">The initial capacity of the builder; typically the expected length of the identifier.</param>
            <returns>A new <see cref="T:Kingo.Messaging.Validation.Identifier.Builder"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is a negative number.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Validation.Identifier.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Validation.Identifier.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Validation.Identifier.Equals(Kingo.Messaging.Validation.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Validation.Identifier.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Validation.Identifier.ParseOrNull(System.String)">
            <summary>
            Parses the specified <paramref name="value"/>, or returns <c>null</c> if <paramref name="value"/> is <c>null</c>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>
            A new <see cref="T:Kingo.Messaging.Validation.Identifier" /> instance or <c>null</c> if <paramref name="value"/> is <c>null</c>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is not a valid identifier.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Validation.Identifier.Parse(System.String)">
            <summary>
            Parses the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>
            A new <see cref="T:Kingo.Messaging.Validation.Identifier" /> instance based on the specified <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is not a valid identifier.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Validation.Identifier.TryParse(System.String,Kingo.Messaging.Validation.Identifier@)">
            <summary>
            Attempts to parse the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="identifier">
            If this method returns <c>true</c>, this parameter will refer to the parsed <see cref="T:Kingo.Messaging.Validation.Identifier" />;
            otherwise <c>false</c>.
            </param>
            <returns>
            <c>true</c> if the specified <paramref name="value"/> could be parsed to an <see cref="T:Kingo.Messaging.Validation.Identifier" />;
            otherwise <c>false</c>.        
            </returns>        
        </member>
        <member name="M:Kingo.Messaging.Validation.Identifier.op_Equality(Kingo.Messaging.Validation.Identifier,Kingo.Messaging.Validation.Identifier)">
            <summary>
            Determines whether or not <paramref name="left"/> is equal to <paramref name="right"/>.
            </summary>
            <param name="left">Left identifier.</param>
            <param name="right">Right identifier.</param>
            <returns><c>true</c> if both instances are considered equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Messaging.Validation.Identifier.op_Inequality(Kingo.Messaging.Validation.Identifier,Kingo.Messaging.Validation.Identifier)">
            <summary>
            Determines whether or not <paramref name="left"/> is not equal to <paramref name="right"/>.
            </summary>
            <param name="left">Left identifier.</param>
            <param name="right">Right identifier.</param>
            <returns><c>true</c> if both instances are considered unequal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Messaging.Validation.Identifier.op_Implicit(Kingo.Messaging.Validation.Identifier)~System.String">
            <summary>
            Implicitly converts an identifier back to its string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>
            The string-representation of the identifier, or <c>null</c> if <paramref name="value"/> is <c>null</c>.
            </returns>
        </member>
        <member name="T:Kingo.Messaging.Validation.IErrorMessageBuilder">
            <summary>
            Represents a builder of an error message.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Validation.IErrorMessageBuilder.Put(System.String,System.Object)">
            <summary>
            Assigns an argument to this error message that will be used to format the message on a call to one of the
            <see cref="M:Kingo.Messaging.Validation.IErrorMessageBuilder.ToString(System.IFormatProvider)" /> overloads. If an argument with the same name was already set, it
            will be replaced by the specified <paramref name="argument"/>.
            </summary>
            <param name="name">Name of the argument.</param>
            <param name="argument">Value of the argument.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name" /> is not a valid identifier, or
            an argument with the same name has already been added to this error message.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Validation.IErrorMessageBuilder.Put(Kingo.Messaging.Validation.Identifier,System.Object)">
            <summary>
            Adds an argument to this error message that will be used to format the message on a call to one of the
            <see cref="M:Kingo.Messaging.Validation.IErrorMessageBuilder.ToString(System.IFormatProvider)" /> overloads. If an argument with the same name was already set, it
            will be replaced by the specified <paramref name="argument"/>.
            </summary>
            <param name="name">Name of the argument.</param>
            <param name="argument">Value of the argument.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            An argument with the same name has already been added to this error message.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Validation.IErrorMessageBuilder.ToString(System.IFormatProvider)">
            <summary>
            Returns a string-representation of the error message formatted using the specified <paramref name="formatProvider"/>.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider" /> to use to format the error message.
            If <c>null</c>, the default formatter is used.
            </param>
            <returns>A string-representation of the error message.</returns>
        </member>
        <member name="T:Kingo.Messaging.Validation.IErrorMessageCollection">
            <summary>
            When implemented by a class, represents a reader or consumer of error messages.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Validation.IErrorMessageCollection.Add(Kingo.Messaging.Validation.IErrorMessageBuilder,System.String)">
            <summary>
            Adds the specified <paramref name="errorMessageBuilder"/> to this reader.
            </summary>        
            <param name="errorMessageBuilder">An error message.</param>     
            <param name="memberName">
            Name of the member for which the <paramref name="errorMessageBuilder"/> was generated. If <c>null</c> or an empty string is specified,
            the <paramref name="errorMessageBuilder"/> is associated with the entire message or instance that was validated.
            </param>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errorMessageBuilder"/> is <c>null</c>.
            </exception>              
        </member>
        <member name="M:Kingo.Messaging.Validation.IErrorMessageCollection.Add(Kingo.Messaging.Validation.IErrorMessageBuilder,System.String,Kingo.Messaging.Validation.ErrorInheritanceLevel)">
            <summary>
            Adds the specified <paramref name="errorMessageBuilder"/> to this reader.
            </summary>        
            <param name="errorMessageBuilder">An error message.</param>     
            <param name="memberName">
            Name of the member for which the <paramref name="errorMessageBuilder"/> was generated. If <c>null</c> or an empty string is specified,
            the <paramref name="errorMessageBuilder"/> is associated with the entire message or instance that was validated.
            </param>        
            <param name="inheritanceLevel">
            The error level of the <paramref name="errorMessageBuilder"/> in relation to the specified <paramref name="memberName"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errorMessageBuilder"/> is <c>null</c>.
            </exception>  
        </member>
        <member name="M:Kingo.Messaging.Validation.IErrorMessageCollection.Add(System.String,System.String)">
            <summary>
            Adds the specified <paramref name="errorMessage"/> to this reader.
            </summary>        
            <param name="errorMessage">An error message.</param>        
            <param name="memberName">
            Name of the member for which the <paramref name="errorMessage"/> was generated. If <c>null</c> or an empty string is specified,
            <paramref name="errorMessage"/> is associated with the entire message or instance that was validated.
            </param>             
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errorMessage"/> is <c>null</c>.
            </exception>  
        </member>
        <member name="M:Kingo.Messaging.Validation.IErrorMessageCollection.Add(System.String,System.String,Kingo.Messaging.Validation.ErrorInheritanceLevel)">
            <summary>
            Adds the specified <paramref name="errorMessage"/> to this reader.
            </summary>        
            <param name="errorMessage">An error message.</param>        
            <param name="memberName">
            Name of the member for which the <paramref name="errorMessage"/> was generated. If <c>null</c> or an empty string is specified,
            <paramref name="errorMessage"/> is associated with the entire message or instance that was validated.
            </param>     
            <param name="inheritanceLevel">
            The error level of the <paramref name="errorMessage"/> in relation to the specified <paramref name="memberName"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errorMessage"/> is <c>null</c>.
            </exception>  
        </member>
        <member name="T:Kingo.Messaging.Validation.IRequestMessageValidator">
            <summary>
            When implemented by a class, represents a validator of a specific message type.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Validation.IRequestMessageValidator.Append``1(Kingo.Messaging.Validation.IRequestMessageValidator{``0})">
            <summary>
            Appends the specified <paramref name="validator"/> to this validator and returns the composite validator.
            </summary>      
            <param name="validator">The validator to append.</param>
            <returns>The composite validator.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="validator"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Validation.IRequestMessageValidator.Validate(System.Object,System.Boolean)">
            <summary>
            Validates all properties and/or fields of the specified <paramref name="message"/> and returns all the validation-errors, if any.
            </summary>   
            <param name="message">The message to validate.</param>   
            <param name="haltOnFirstError">
            Indicates whether or not this method should return as soon as the first validation error is found.
            </param>          
            <returns>
            A collection of validation errors. If <paramref name="haltOnFirstError"/> is <c>true</c>, the returned
            collection contains a minimum of validation errors. If <paramref name="haltOnFirstError" /> is <c>false</c>,
            all validation errors are returned.
            </returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of <paramref name="message"/> is not supported by this validator.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.Validation.InvalidRequestException">
            <summary>
            This exception or any derived type is thrown if a request was found to be invalid when executing it.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Validation.InvalidRequestException.#ctor(Kingo.Messaging.Validation.ErrorInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Validation.InvalidRequestException" /> class.
            </summary>
            <param name="errors">The invalid request.</param>  
            <param name="message">Message of the exception.</param>     
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="M:Kingo.Messaging.Validation.InvalidRequestException.#ctor(Kingo.Messaging.Validation.ErrorInfo,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Validation.InvalidRequestException" /> class.
            </summary>
            <param name="errors">The invalid request.</param>  
            <param name="message">Message of the exception.</param>  
            <param name="innerException">Cause of this exception.</param>    
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="M:Kingo.Messaging.Validation.InvalidRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Validation.InvalidRequestException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Kingo.Messaging.Validation.InvalidRequestException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.Validation.InvalidRequestException.Errors">
            <summary>
            Contains all validation errors.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.Validation.LambdaExpressionExtensions">
            <summary>
            Contains extenion methods for the <see cref="T:System.Linq.Expressions.LambdaExpression" /> class.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Validation.LambdaExpressionExtensions.ExtractMemberName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the name of the field or property accessed by the specified <paramref name="expression"/>.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>The name of the field or property that is accessed.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The name of a field or property could not be retrieved from the specified <paramref name="expression"/>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Validation.LambdaExpressionExtensions.TryExtractMemberName(System.Linq.Expressions.LambdaExpression,Kingo.Messaging.Validation.Identifier@)">
            <summary>
            Attempts to return the name of the field or property accessed by the specified <paramref name="expression"/>.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <param name="memberName">
            If this method returns <c>true</c>, this parameter will refer to the name of the member that was extracted from the expression;
            otherwise it will be <c>null</c>.
            </param>
            <returns><c>true</c> if the name could be extracted; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.Validation.RequestMessageValidationPipeline">
            <summary>
            Represents a pipeline that validates all messages going through and throws an <see cref="T:Kingo.Messaging.Validation.InvalidRequestException" /> when
            a message contains valiation errors.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Validation.RequestMessageValidationPipeline.HandleOrExecuteAsync``1(Kingo.Messaging.MessageHandlerOrQuery{``0},Kingo.Messaging.IMicroProcessorContext)">
            <summary>
            Validates the message and throws an <see cref="T:Kingo.Messaging.Validation.InvalidRequestException" /> is any validation errors are found.
            </summary>
            <typeparam name="TResult">Type of the result of the operation.</typeparam>
            <param name="handlerOrQuery">A message handler or query that will perform the operation.</param>
            <param name="context">Context of the <see cref="T:Kingo.Messaging.IMicroProcessor" /> that is currently handling the message.</param>
            <returns>The result of the operation.</returns>
            <exception cref="T:Kingo.Messaging.Validation.InvalidRequestException">
            The specified message is invalid.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.Validation.RequestMessageValidatorExtensions">
            <summary>
            Contains extension methods for the <see cref="T:Kingo.Messaging.Validation.IRequestMessageValidator" /> interface.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Validation.RequestMessageValidatorExtensions.Append``1(Kingo.Messaging.Validation.IRequestMessageValidator,System.Func{``0,System.Boolean,Kingo.Messaging.Validation.ErrorInfo})">
            <summary>
            Appends the specified <paramref name="validationMethod"/> to this validator and returns the composite validator.
            </summary>      
            <param name="validator">A message validator.</param>
            <param name="validationMethod">The validation delegate to append.</param>
            <returns>The composite validator.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="validationMethod"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Validation.NullValidator.Validate(System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.Validation.SortedErrorMessageList">
            <summary>
            Represents a list of error messages that is sorted by its inheritance level.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Validation.SortedErrorMessageList.Count">
            <summary>
            Returns the number of error messages in this list.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Validation.SortedErrorMessageList.CountNonInheritedErrors">
            <summary>
            Returns the number of non-herited error messages in this list.
            </summary>
            <returns>The number of non-herited error messages in this list.</returns>
        </member>
        <member name="M:Kingo.Messaging.Validation.SortedErrorMessageList.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Validation.SortedErrorMessageList.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.Validation.IRequestMessage">
            <summary>
            When implemented by a class, represents a request message that can validate itself.
            </summary>    
        </member>
        <member name="M:Kingo.Messaging.Validation.IRequestMessage.Validate(System.Boolean)">
            <summary>
            Validates this message and returns all validation errors, if any.
            </summary>
            <param name="haltOnFirstError">
            Indicates whether or not this method should return as soon as the first validation error is found.
            </param>
            <returns>
            A collection of validation errors. If <paramref name="haltOnFirstError"/> is <c>true</c>, the returned
            collection contains a minimum of validation errors. If <paramref name="haltOnFirstError" /> is <c>false</c>,
            all validation errors are returned.
            </returns>
        </member>
        <member name="T:Kingo.Messaging.Validation.IRequestMessageValidator`1">
            <summary>
            When implemented by a class, represents a validator for a specific message.
            </summary>
            <typeparam name="TMessage">Type of the message this validator can validate.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.Validation.IRequestMessageValidator`1.Validate(`0,System.Boolean)">
            <summary>
            Validates all properties and/or fields of the specified <paramref name="message"/> and returns all the validation-errors, if any.
            </summary>   
            <param name="message">The message to validate.</param>   
            <param name="haltOnFirstError">
            Indicates whether or not this method should return as soon as the first validation error is found.
            </param>          
            <returns>
            A collection of validation errors. If <paramref name="haltOnFirstError"/> is <c>true</c>, the returned
            collection contains a minimum of validation errors. If <paramref name="haltOnFirstError" /> is <c>false</c>,
            all validation errors are returned.
            </returns>    
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>     
        </member>
        <member name="T:Kingo.Messaging.Validation.RequestMessage">
            <summary>
            Provides a base-implementation of the <see cref="T:Kingo.Messaging.Validation.IRequestMessage" /> interface.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Validation.RequestMessage.Validate(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Validation.RequestMessage.CreateMessageValidator">
            <summary>
            Creates and returns the validator for this message.
            </summary>        
            <returns>The validator of this message.</returns>
        </member>
        <member name="M:Kingo.Messaging.Validation.RequestMessage.TryGetMessageValidator(System.Type,Kingo.Messaging.Validation.IRequestMessageValidator@)">
            <summary>
            Attempts to retrieve the validator that has been registered for the specified <paramref name="messageType" />.
            </summary>
            <param name="messageType">Type of a message.</param>
            <param name="validator">
            If this method returns <c>true</c>, this parameter will refer to a validator that is capable of validating messages of
            the specified <paramref name="messageType"/>; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if a validator for the specified <paramref name="messageType"/> had been registered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.Validation.RequestMessage.Register``1(System.Func{``0,System.Boolean,Kingo.Messaging.Validation.ErrorInfo})">
            <summary>
            Registers the specified <paramref name="validationMethod"/> for the specified message type <typeparamref name="TMessage"/>.
            </summary>        
            <param name="validationMethod">The validation method to register.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="validationMethod"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Another validator for the specified message type <typeparamref name="TMessage" /> has already been registered.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Validation.RequestMessage.Register``1(Kingo.Messaging.Validation.IRequestMessageValidator{``0})">
            <summary>
            Registers the specified <paramref name="validator"/> for the specified message type <typeparamref name="TMessage"/>.
            </summary>        
            <param name="validator">The validator to register.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="validator"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Another validator for the specified message type <typeparamref name="TMessage" /> has already been registered.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.Validation.DataAnnotationValidator">
            <summary>
            Represents a <see cref="T:Kingo.Messaging.Validation.IRequestMessageValidator`1" /> that validates an instance through
            all <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute">ValidationAttributes</see> that have been declared on the
            members of an instance.
            </summary>    
        </member>
        <member name="M:Kingo.Messaging.Validation.DataAnnotationValidator.#ctor(System.IFormatProvider,System.Func{System.Object,System.ComponentModel.DataAnnotations.ValidationContext})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Validation.DataAnnotationValidator" /> class.
            </summary>  
            <param name="formatProvider">
            Optional <see cref="T:System.IFormatProvider" /> to use when formatting error messages.
            </param>              
            <param name="validationContextFactory">
            The method used to create a <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> for a specific instance. Specify <c>null</c>
            to use the default factory.
            </param>             
        </member>
        <member name="P:Kingo.Messaging.Validation.DataAnnotationValidator.FormatProvider">
            <summary>
            The <see cref="T:System.IFormatProvider" /> to use when formatting error messages.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Validation.DataAnnotationValidator.Validate(System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Validation.DataAnnotationValidator.CreateErrorInfoBuilder(System.IFormatProvider)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Messaging.Validation.ErrorInfoBuilder" /> that will be used to collect all error messages during validation.
            </summary>
            <param name="formatProvider">
            The format provider that is used to format all error messages.
            </param>
            <returns>A new <see cref="T:Kingo.Messaging.Validation.ErrorInfoBuilder" />.</returns>
        </member>
        <member name="T:Kingo.Messaging.Validation.ErrorInfo">
            <summary>
            Represents a tree of errors that have been detected on a specific instance.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInfo.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Validation.ErrorInfo" /> class.
            </summary>        
            <param name="memberErrors">Error messages indexed by property- or fieldname.</param> 
            <param name="error">Error message for the whole object.</param>    
            <exception cref="T:System.ArgumentException">
            <paramref name="memberErrors"/> contains a duplicate key.
            </exception>          
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInfo.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Validation.ErrorInfo" /> class.
            </summary>        
            <param name="memberErrors">Error messages indexed by property- or fieldname.</param> 
            <param name="error">Error message for the whole object.</param>              
        </member>
        <member name="P:Kingo.Messaging.Validation.ErrorInfo.HasErrors">
            <summary>
            Indicates whether or not this instance carries any error messages.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Validation.ErrorInfo.ErrorCount">
            <summary>
            Returns the number of error messages this instance carries.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Validation.ErrorInfo.Error">
            <summary>
            Returns the error message that applies to the entire instance.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Validation.ErrorInfo.MemberErrors">
            <summary>
            Returns a collection of error messages per member.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInfo.ToString">
            <inheritdoc />
        </member>
        <member name="F:Kingo.Messaging.Validation.ErrorInfo.Empty">
            <summary>
            An instance of the <see cref="T:Kingo.Messaging.Validation.ErrorInfo" /> class without any errors.
            </summary>       
        </member>
        <member name="M:Kingo.Messaging.Validation.ErrorInfo.Merge(Kingo.Messaging.Validation.ErrorInfo,Kingo.Messaging.Validation.ErrorInfo,Kingo.Messaging.Validation.ErrorInfoBuilder)">
            <summary>
            Merges two <see cref="T:Kingo.Messaging.Validation.ErrorInfo" /> instances into one uisng the specified <paramref name="builder"/>.
            </summary>
            <param name="left">The first error info instance.</param>
            <param name="right">The second error info instance.</param>
            <param name="builder">Builder that is used to build the merged instance.</param>
            <returns>
            A new <see cref="T:Kingo.Messaging.Validation.ErrorInfo" /> instance that contains all errors of both <paramref name="left"/> and <paramref name="right"/>.        
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="left"/> or <paramref name="right"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.BadRequestException">
            <summary>
            This exception is thrown by a <see cref="T:Kingo.Messaging.IMicroProcessor" /> when a command or query failed to execute because it was
            invalid or because the operation was illegal. This type semantically maps to HTTP response code <c>400</c>.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.BadRequestException.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.BadRequestException" /> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.BadRequestException.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.BadRequestException" /> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <param name="message">Message of the exception.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.BadRequestException.#ctor(System.Object,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.BadRequestException" /> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.BadRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.BadRequestException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Kingo.Messaging.IMessageHandler`1">
            <summary>
            When implemented by a class, handles messages of type <paramtyperef name="TMessage" />.
            </summary>
            <typeparam name="TMessage">Type of the message to handle.</typeparam>  
        </member>
        <member name="M:Kingo.Messaging.IMessageHandler`1.HandleAsync(`0,Kingo.Messaging.IMicroProcessorContext)">
            <summary>
            Handles the specified <paramref name="message"/> asynchronously.
            </summary>
            <param name="message">A message.</param>        
            <param name="context">Context of the <see cref="T:Kingo.Messaging.IMicroProcessor" /> that is currently handling the message.</param>        
        </member>
        <member name="T:Kingo.Messaging.IMessageStackTrace">
            <summary>
            When implemented by a class, represents a stack of messages as they are currently being handled by a <see cref="T:Kingo.Messaging.IMicroProcessor" />.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.IMessageStackTrace.Current">
            <summary>
            Returns the current message.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.IMicroProcessor">
            <summary>
            When implemented by a class, represents a processor that can process commands, events and queries.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.IMicroProcessor.HandleStreamAsync(Kingo.Messaging.IMessageStream,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Processes the specified stream by invoking all appropriate message handlers for each message asynchronously.
            </summary>        
            <param name="inputStream">Stream of messages to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param> 
            <returns>A stream of events that represents all changes made by this processor.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputStream"/> is <c>null</c>.
            </exception>                      
        </member>
        <member name="M:Kingo.Messaging.IMicroProcessor.ExecuteAsync``1(Kingo.Messaging.IQuery{``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>        
            <param name="query">The query to execute.</param> 
            <param name="token">Optional token that can be used to cancel the operation.</param>                        
            <returns>The <see cref="T:System.Threading.Tasks.Task`1" /> that is executing the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>           
        </member>
        <member name="M:Kingo.Messaging.IMicroProcessor.ExecuteAsync``2(``0,Kingo.Messaging.IQuery{``0,``1},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TMessageIn">Type of the message going into the query.</typeparam>
            <typeparam name="TMessageOut">Type of the message returned by the query.</typeparam>        
            <param name="message">Message containing the parameters of this query.</param>
            <param name="query">The query to execute.</param>                        
            <param name="token">Optional token that can be used to cancel the operation.</param> 
            <returns>The <see cref="T:System.Threading.Tasks.Task`1" /> that is executing the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> or <paramref name="message"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="T:Kingo.Messaging.IMicroProcessorContext">
            <summary>
            When implemented by a class, represents the context in which a message or <see cref="T:Kingo.Messaging.IMessageStream" /> is being processed by a <see cref="T:Kingo.Messaging.IMicroProcessor" />.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.IMicroProcessorContext.Messages">
            <summary>
            Returns message-info about the message that is currently being handled or executed by the processor.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.IMicroProcessorContext.UnitOfWork">
            <summary>
            Returns the 
            </summary>
        </member>
        <member name="P:Kingo.Messaging.IMicroProcessorContext.OutputStream">
            <summary>
            Represents the stream of events that is published during a unit of work. All output event will be handled by
            <see cref="T:Kingo.Messaging.IMessageHandler`1" /> classes that accept message of source <see cref="F:Kingo.Messaging.MessageSources.OutputStream" />.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.IMicroProcessorContext.MetadataStream">
            <summary>
            Represents the stream of events that contain metadata about the application's behavior. All metadata events will be handled
            on separate threads by <see cref="T:Kingo.Messaging.IMessageHandler`1" /> classes that accept message of source <see cref="F:Kingo.Messaging.MessageSources.MetadataStream" />.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.IMicroProcessorContext.Token">
            <summary>
            Returns the <see cref="T:System.Threading.CancellationToken"/> that was passed to the <see cref="T:Kingo.Messaging.IMicroProcessor" />.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.IMessageHandler">
            <summary>
            Represents a handler of different message types.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.IMessageHandler.HandleAsync``1(``0,Kingo.Messaging.IMessageHandler{``0})">
            <summary>
            Handles the specified <paramref name="message"/> asynchronously.
            If <paramref name="handler"/> is specified, this handler is expected to handle the message with this handler.
            </summary>
            <param name="message">The message to handle.</param>
            <param name="handler">Optional handler with which the message is to be handled.</param>        
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.IMessageStream">
            <summary>
            When implemented by a class, represents a read-only list of messages.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.IMessageStream.Append``1(``0,Kingo.Messaging.IMessageHandler{``0})">
            <summary>
            Appends the specified <paramref name="message"/> to this stream and associates it with the specified <paramref name="handler"/>.
            </summary>        
            <param name="message">Message to append.</param>
            <param name="handler">Optional handler to associate with the message.</param>
            <returns>A new stream containing the appended message.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.IMessageStream.AppendStream(Kingo.Messaging.IMessageStream)">
            <summary>
            Appends the specified stream of messages to this stream.
            </summary>
            <param name="stream">The stream to append.</param>
            <returns>A new stream, containing the messages of both the current and the specified stream.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.IMessageStream.HandleMessagesWithAsync(Kingo.Messaging.IMessageHandler)">
            <summary>
            Lets the specified <paramref name="handler"/> handle all messages of this stream and returns a stream of events.
            </summary>
            <param name="handler">A handler of messages.</param>   
            <returns>A task representing the operation.</returns>           
        </member>
        <member name="T:Kingo.Messaging.IQuery`1">
            <summary>
            When implemented by a class, represents a query that accepts a message
            and returns a result in the form of a <typeparamref name="TMessageOut"/>.
            </summary>    
            <typeparam name="TMessageOut">Type of the message that is returned by this query.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.IQuery`1.ExecuteAsync(Kingo.Messaging.IMicroProcessorContext)">
            <summary>
            Executes the query.
            </summary>   
            <param name="context">Context of the <see cref="T:Kingo.Messaging.IMicroProcessor" /> that is currently executing the query.</param>    
            <returns>The result of this query.</returns>        
        </member>
        <member name="T:Kingo.Messaging.IQuery`2">
            <summary>
            When implemented by a class, represents a query that accepts a message
            and returns a result in the form of a <typeparamref name="TMessageOut"/>.
            </summary>
            <typeparam name="TMessageIn">Type of the message that is consumed by this query.</typeparam>
            <typeparam name="TMessageOut">Type of the message that is returned by this query.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.IQuery`2.ExecuteAsync(`0,Kingo.Messaging.IMicroProcessorContext)">
            <summary>
            Executes the query.
            </summary>
            <param name="message">Message containing the parameters of this query.</param>
            <param name="context">Context of the <see cref="T:Kingo.Messaging.IMicroProcessor" /> that is currently executing the query.</param>
            <returns>The result of this query.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.IUnitOfWork">
            <summary>
            When implemented by a class, represents a unit of work that can be flushed.
            </summary>    
        </member>
        <member name="M:Kingo.Messaging.IUnitOfWork.RequiresFlush">
            <summary>
            Indicates whether or not the unit of work maintains any changes that need to flushed.
            </summary>
            <returns>
            <c>true</c> if the current instance needs to be flushed; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.IUnitOfWork.FlushAsync">
            <summary>
            Flushes any pending changes to the underlying infrastructure.
            </summary>
            <exception cref="T:Kingo.Messaging.Domain.ConcurrencyException">
            A concurrency exception occurred.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.MessageSources">
            <summary>
            Represents a (collection of) source(s) a message can originate from.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.MessageSources.None">
            <summary>
            Represents a source that has not been defined.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.MessageSources.Query">
            <summary>
            Indicates a message represents a query input message.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.MessageSources.InputStream">
            <summary>
            Indicates a message was passed directly to the <see cref="T:Kingo.Messaging.IMicroProcessor" />.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.MessageSources.OutputStream">
            <summary>
            Indicates a message originates from the <see cref="P:Kingo.Messaging.IMicroProcessorContext.OutputStream" />.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.MessageSources.MetadataStream">
            <summary>
            Indicates a message originates from the <see cref="P:Kingo.Messaging.IMicroProcessorContext.MetadataStream" />.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.MessageSources.AnyStream">
            <summary>
            Represents all streams (input, output and metadata stream).
            </summary>
        </member>
        <member name="F:Kingo.Messaging.MessageSources.All">
            <summary>
            Represents all sources.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.MessageStreamExtensions">
            <summary>
            Contains extensions for <see cref="T:Kingo.Messaging.IMessageStream" /> instances.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.MessageStreamExtensions.Append``1(Kingo.Messaging.IMessageStream,``0,System.Action{``0,Kingo.Messaging.IMicroProcessorContext})">
            <summary>
            Appends the specified <paramref name="message"/> to this stream and associates it with the specified <paramref name="handler"/>.
            </summary>     
            <param name="stream">The stream to append the message to.</param>   
            <param name="message">Message to append.</param>
            <param name="handler">Optional handler to associate with the message.</param>
            <returns>A new stream containing the appended message.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.MessageStreamExtensions.Append``1(Kingo.Messaging.IMessageStream,``0,System.Func{``0,Kingo.Messaging.IMicroProcessorContext,System.Threading.Tasks.Task})">
            <summary>
            Appends the specified <paramref name="message"/> to this stream and associates it with the specified <paramref name="handler"/>.
            </summary>        
            <param name="stream">The stream to append the message to.</param>
            <param name="message">Message to append.</param>
            <param name="handler">Optional handler to associate with the message.</param>
            <returns>A new stream containing the appended message.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.MessageStreamExtensions.Join(System.Collections.Generic.IEnumerable{Kingo.Messaging.IMessageStream})">
            <summary>
            Combines all specified <paramref name="streams"/> into one stream. All streams will be appended in order.
            </summary>
            <param name="streams">The collection of streams to combine.</param>
            <returns>A single stream containing all messages from the specified stream.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="streams"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.MicroProcessorContext">
            <summary>
            Represents the context in which a certain message is being handled.
            </summary>    
        </member>
        <member name="P:Kingo.Messaging.MicroProcessorContext.OutputStream">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.MicroProcessorContext.MetadataStream">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.MicroProcessorContext.Token">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MicroProcessorContext.DisposeManagedResources">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MicroProcessorContext.ToString">
            <inheritdoc />
        </member>
        <member name="F:Kingo.Messaging.MicroProcessorContext.None">
            <summary>
            Represents a null-context.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.MicroProcessorContext.Current">
            <summary>
            Represents the current context.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.MessageStream">
            <summary>
            Represents a stream of <see cref="T:Kingo.Messaging.Validation.IRequestMessage">messages</see>.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.MessageStream.Empty">
            <summary>
            Represents an empty stream.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.MessageStream.ToString">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.MessageStream.Count">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageStream.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageStream.Append``1(``0,Kingo.Messaging.IMessageHandler{``0})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageStream.AppendStream(Kingo.Messaging.IMessageStream)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageStream.HandleMessagesWithAsync(Kingo.Messaging.IMessageHandler)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.MessageStream.CreateStream``1(``0,System.Action{``0,Kingo.Messaging.IMicroProcessorContext})">
            <summary>
            Creates and returns a new stream while adding the specified <paramref name="message"/> to this stream
            and associating it with the specified <paramref name="handler"/>.
            </summary>        
            <param name="message">Message to append.</param>
            <param name="handler">Optional handler to associate with the message.</param>
            <returns>A new stream containing the appended message.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.MessageStream.CreateStream``1(``0,System.Func{``0,Kingo.Messaging.IMicroProcessorContext,System.Threading.Tasks.Task})">
            <summary>
            Creates and returns a new stream while adding the specified <paramref name="message"/> to this stream
            and associating it with the specified <paramref name="handler"/>.
            </summary>        
            <param name="message">Message to append.</param>
            <param name="handler">Optional handler to associate with the message.</param>
            <returns>A new stream containing the appended message.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.MessageStream.CreateStream``1(``0,Kingo.Messaging.IMessageHandler{``0})">
            <summary>
            Creates and returns a new stream while adding the specified <paramref name="message"/> to this stream
            and associating it with the specified <paramref name="handler"/>.
            </summary>        
            <param name="message">Message to append.</param>
            <param name="handler">Optional handler to associate with the message.</param>
            <returns>A new stream containing the appended message.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.InternalServerErrorException">
            <summary>
            This exception is thrown by a <see cref="T:Kingo.Messaging.IMicroProcessor" /> when a technical failure prevented the processor from
            handling a message or executing a query correctly. This type semantically maps to HTTP response code <c>500</c>.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.InternalServerErrorException.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.InternalServerErrorException" /> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.InternalServerErrorException.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.InternalServerErrorException" /> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <param name="message">Message of the exception.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.InternalServerErrorException.#ctor(System.Object,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.InternalServerErrorException" /> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.InternalServerErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.InternalServerErrorException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Kingo.Messaging.ExternalProcessorException">
            <summary>
            This exception is thrown by a <see cref="T:Kingo.Messaging.IMicroProcessor" /> when it failed to handle a message or execute a query.
            Any derived type of this class semantically maps to a <c>4xx</c> or <c>5xx</c> HTTP status code.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.ExternalProcessorException.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.ExternalProcessorException" /> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>        
        </member>
        <member name="M:Kingo.Messaging.ExternalProcessorException.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.ExternalProcessorException" /> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <param name="message">Message of the exception.</param>        
        </member>
        <member name="M:Kingo.Messaging.ExternalProcessorException.#ctor(System.Object,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.ExternalProcessorException" /> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>        
        </member>
        <member name="M:Kingo.Messaging.ExternalProcessorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.ExternalProcessorException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Kingo.Messaging.ExternalProcessorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.ExternalProcessorException.FailedMessage">
            <summary>
            The message that could not be processed.
            </summary>
        </member>
        <member name="T:Kingo.EnumOperators`1">
            <summary>
            Contains several generic operators that can be used for Enum types.
            </summary>
            <typeparam name="TEnum">Type of the Enum.</typeparam>
        </member>
        <member name="M:Kingo.EnumOperators`1.AllValuesCombined">
            <summary>
            Returns an Enum value where are values of the Enum are bitwise OR-ed into a single value.
            </summary>
            <returns>A bitwise OR-ed value of all defined values.</returns>
        </member>
        <member name="M:Kingo.EnumOperators`1.AllValues">
            <summary>
            Returns all declared values of an enum.
            </summary>
            <returns>A collection of enum values.</returns>
        </member>
        <member name="M:Kingo.EnumOperators`1.IsDefined(`0,`0)">
            <summary>
            Determines whether or not all bits of <paramref name="value"/> are set in <paramref name="compositeValue"/>.
            </summary>
            <param name="value">The bits to check.</param>
            <param name="compositeValue">The collection of bits that is checked.</param>
            <returns>
            <c>true</c> if all bits of <paramref name="value"/> are set in <paramref name="compositeValue"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.EnumOperators`1.Or(`0,`0)">
            <summary>
            Performs a binary OR-operation on the specified Enum types.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>A value where the bits of <paramref name="x"/> and <paramref name="y"/> have been OR-ed.</returns>        
        </member>
        <member name="M:Kingo.EnumOperators`1.Or(`0,`0,`0[])">
            <summary>
            Performs a binary OR-operation on the specified Enum types.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <param name="values">A collection of Enum values.</param>
            <returns>A value where the bits of the specified <paramref name="values"/> have been OR-ed.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EnumOperators`1.Or(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Performs a binary OR-operation on the specified Enum types.
            </summary>        
            <param name="values">A collection of Enum values.</param>
            <returns>A value where the bits of the specified <paramref name="values"/> have been OR-ed.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EnumOperators`1.And(`0,`0)">
            <summary>
            Performs a binary AND-operation on the specified Enum types.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>A value where the bits of <paramref name="x"/> and <paramref name="y"/> have been AND-ed.</returns>        
        </member>
        <member name="M:Kingo.EnumOperators`1.And(`0,`0,`0[])">
            <summary>
            Performs a binary AND-operation on the specified Enum types.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <param name="values">A collection of Enum values.</param>
            <returns>A value where the bits of the specified <paramref name="values"/> have been AND-ed.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EnumOperators`1.And(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Performs a binary AND-operation on the specified Enum types.
            </summary>        
            <param name="values">A collection of Enum values.</param>
            <returns>A value where the bits of the specified <paramref name="values"/> have been AND-ed.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.ReadOnlyList`1">
            <summary>
            Provides a base class implementation for all classes that implement the <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> interface.
            </summary>
            <typeparam name="T">Type of the items in the list.</typeparam>
        </member>
        <member name="P:Kingo.ReadOnlyList`1.Count">
            <inheritdoc />
        </member>
        <member name="P:Kingo.ReadOnlyList`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.ReadOnlyList`1.GetItem(System.Int32)">
            <summary>
            Returns the item at the specified <paramref name="index"/>, where <paramref name="index"/> has been range-checked.
            By default, this method simply iterates the list, but implementing classes can optimize this method by overriding it.
            </summary>
            <param name="index">Index of the item to return.</param>
            <returns>The item at the specified <paramref name="index"/>.</returns>
        </member>
        <member name="M:Kingo.ReadOnlyList`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Kingo.TypeExtensions">
            <summary>
            Contains several extensions method for the <see cref="T:System.Type" /> class.
            </summary>
        </member>
        <member name="M:Kingo.TypeExtensions.TryGetEqualityOperator``2(System.Type,System.Func{``0,``1,System.Boolean}@)">
            <summary>
            Attempts to obtain the equality operator (==) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="equalityOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the equality operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeExtensions.TryGetInequalityOperator``2(System.Type,System.Func{``0,``1,System.Boolean}@)">
            <summary>
            Attempts to obtain the equality operator (!=) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="inequalityOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the inequality operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeExtensions.TryGetLessThanOperator``2(System.Type,System.Func{``0,``1,System.Boolean}@)">
            <summary>
            Attempts to obtain the less than operator (&lt;) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="lessThanOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the less than operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeExtensions.TryGetLessThanOrEqualOperator``2(System.Type,System.Func{``0,``1,System.Boolean}@)">
            <summary>
            Attempts to obtain the less than or equal to operator (&lt;=) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="lessThanOrEqualOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the less than or equal to operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeExtensions.TryGetGreaterThanOperator``2(System.Type,System.Func{``0,``1,System.Boolean}@)">
            <summary>
            Attempts to obtain the greater than operator (&gt;) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="greaterThanOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the greater than operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeExtensions.TryGetGreaterThanOrEqualOperator``2(System.Type,System.Func{``0,``1,System.Boolean}@)">
            <summary>
            Attempts to obtain the greater than or equal to operator (&gt;=) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="greaterThanOrEqualOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the greater than or equal to operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeExtensions.TryGetAdditionOperator``3(System.Type,System.Func{``0,``1,``2}@)">
            <summary>
            Attempts to obtain the addition operator (+) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="additionOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the addition operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeExtensions.TryGetSubtractionOperator``3(System.Type,System.Func{``0,``1,``2}@)">
            <summary>
            Attempts to obtain the subtraction operator (-) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="subtractiontOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the subtraction operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeExtensions.TryGetMultiplyOperator``3(System.Type,System.Func{``0,``1,``2}@)">
            <summary>
            Attempts to obtain the multiply operator (*) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="multiplyOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the multiply operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeExtensions.TryGetDivisionOperator``3(System.Type,System.Func{``0,``1,``2}@)">
            <summary>
            Attempts to obtain the division operator (/) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="divisionOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the division operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeExtensions.TryGetModulusOperator``3(System.Type,System.Func{``0,``1,``2}@)">
            <summary>
            Attempts to obtain the modulus operator (%) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="modulusOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the modulus operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeExtensions.TryGetExclusiveOrOperator``3(System.Type,System.Func{``0,``1,``2}@)">
            <summary>
            Attempts to obtain the exclusiveOr operator (^) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="exclusiveOrOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the exclusiveOr operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeExtensions.TryGetBitwiseAndOperator``3(System.Type,System.Func{``0,``1,``2}@)">
            <summary>
            Attempts to obtain the bitwiseAnd operator (&amp;) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="bitwiseAndOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the bitwiseAnd operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeExtensions.TryGetBitwiseOrOperator``3(System.Type,System.Func{``0,``1,``2}@)">
            <summary>
            Attempts to obtain the bitwiseOr operator (|) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="bitwiseOrOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the bitwiseOr operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeExtensions.TryGetLeftShiftOperator``2(System.Type,System.Func{``0,System.Int32,``1}@)">
            <summary>
            Attempts to obtain the leftShift operator (&lt;&lt;) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>        
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="leftShiftOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the leftShift operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeExtensions.TryGetRightShiftOperator``2(System.Type,System.Func{``0,System.Int32,``1}@)">
            <summary>
            Attempts to obtain the rightShift operator (&gt;&gt;) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>        
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="rightShiftOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the rightShift operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeExtensions.TryGetUnaryPlusOperator``2(System.Type,System.Func{``0,``1}@)">
            <summary>
            Attempts to obtain the unaryPlus operator (+) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>        
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="unaryPlusOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the unaryPlus operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeExtensions.TryGetUnaryNegationOperator``2(System.Type,System.Func{``0,``1}@)">
            <summary>
            Attempts to obtain the unaryNegation operator (-) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>        
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="unaryNegationtOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the unaryNegation operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeExtensions.TryGetLogicalNotOperator``2(System.Type,System.Func{``0,``1}@)">
            <summary>
            Attempts to obtain the logicalNot operator (!) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>        
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="logicalNotOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the logicalNot operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeExtensions.TryGetOnesComplementOperator``2(System.Type,System.Func{``0,``1}@)">
            <summary>
            Attempts to obtain the onesComplement operator (~) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>        
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="onesComplementOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the onesComplement operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeExtensions.TryGetTrueOperator``1(System.Type,System.Func{``0,System.Boolean}@)">
            <summary>
            Attempts to obtain the true operator (true) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>                
            <param name="type">Type in which the operator is defined.</param>
            <param name="trueOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the true operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeExtensions.TryGetFalseOperator``1(System.Type,System.Func{``0,System.Boolean}@)">
            <summary>
            Attempts to obtain the false operator (false) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>                
            <param name="type">Type in which the operator is defined.</param>
            <param name="falseOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the false operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeExtensions.TryGetImplicitOperator``2(System.Type,System.Func{``0,``1}@)">
            <summary>
            Attempts to obtain the implicit operator defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>        
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="implicitOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the implicit operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeExtensions.TryGetExplicitOperator``2(System.Type,System.Func{``0,``1}@)">
            <summary>
            Attempts to obtain the explicit operator defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the first argument.</typeparam>        
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="explicitOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the explicit operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeExtensions.FriendlyName(System.Type,System.Boolean)">
            <summary>
            Returns the friendly name of a type, useful for displaying type information in consoles or debug strings.
            </summary>
            <param name="type">A type.</param>
            <param name="useFullNames">Indicates whether or not the full name of all types should be used in the friendly name.</param>
            <returns>A friendly name of a type</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Threading.AsyncMethod">
            <summary>
            Contains several helper methods for async methods that need to run synchronously.
            </summary>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.RunSynchronously(System.Func{System.Threading.Tasks.Task},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified asynchronous <paramref name="asyncFunc"/> synchronously and
            returns a completed <see cref="T:System.Threading.Tasks.Task" /> while encapsulation any exceptions
            that might be thrown.
            </summary>        
            <param name="asyncFunc">The delegate to invoke.</param>
            <param name="token">
            If specified, this token is checked before and after <paramref name="asyncFunc"/> is executed,
            and a cancelled task is returned if cancellation has been requested.
            </param>
            <returns>A completed <see cref="T:System.Threading.Tasks.Task" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="asyncFunc"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.RunSynchronously(System.Action,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="action"/> synchronously and
            returns a completed <see cref="T:System.Threading.Tasks.Task" /> while encapsulating any exceptions
            that might be thrown.
            </summary>
            <param name="action">The delegate to invoke.</param>
            <param name="token">
            If specified, this token is checked before and after <paramref name="action"/> is executed,
            and a cancelled task is returned if cancellation has been requested.
            </param>
            <returns>A completed <see cref="T:System.Threading.Tasks.Task" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.RunSynchronously``1(System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified asynchronous <paramref name="asyncFunc"/> synchronously and
            returns a completed <see cref="T:System.Threading.Tasks.Task" /> while encapsulation any exceptions
            that might be thrown.
            </summary>
            <typeparam name="TResult">Type of the result of the delegate.</typeparam>        
            <param name="asyncFunc">The delegate to invoke.</param>
            <param name="token">
            If specified, this token is checked before and after <paramref name="asyncFunc"/> is executed,
            and a cancelled task is returned if cancellation has been requested.
            </param>
            <returns>A completed <see cref="T:System.Threading.Tasks.Task" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="asyncFunc"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.RunSynchronously``1(System.Func{``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="func"/> synchronously and
            returns a completed <see cref="T:System.Threading.Tasks.Task`1" /> while encapsulation any exceptions
            that might be thrown.
            </summary>
            <typeparam name="TResult">Type of the result of the delegate.</typeparam>
            <param name="func">The delegate to invoke.</param>
            <param name="token">
            If specified, this token is checked before and after <paramref name="func"/> is executed,
            and a cancelled task is returned if cancellation has been requested.
            </param>
            <returns>A completed <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="func"/> is <c>null</c>.
            </exception>
        </member>
        <member name="F:Kingo.Threading.AsyncMethod.Void">
            <summary>
            Represents a completed <see cref="T:System.Threading.Tasks.Task" /> that can be returned
            from a synchronous method with an asynchronous signature.
            </summary>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Value``1(``0)">
            <summary>
            Creates and returns a completed <see cref="T:System.Threading.Tasks.Task`1" /> that can be returned
            from a synchronous method with an asynchronous signature.
            </summary>
            <typeparam name="TResult">Type of the result to return.</typeparam>
            <param name="returnValue">The result to return.</param>
            <returns>A completed <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Throw(System.Exception)">
            <summary>
            Creates and returns a new completed <see cref="T:System.Threading.Tasks.Task`1" /> that encapsulates
            the specified <paramref name="exception"/>.
            </summary>        
            <param name="exception">The exception to encapsulate.</param>
            <returns>A new completed <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exception"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Throw``1(System.Exception)">
            <summary>
            Creates and returns a new completed <see cref="T:System.Threading.Tasks.Task`1" /> that encapsulates
            the specified <paramref name="exception"/>.
            </summary>
            <typeparam name="TResult">Return-type of the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
            <param name="exception">The exception to encapsulate.</param>
            <returns>A new completed <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exception"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Await(System.Threading.Tasks.Task,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Awaits the specified task, blocking the current thread, and unwraps any <see cref="T:System.AggregateException" />
            by rethrowing the first inner exception, just like the await-statement would do.
            </summary>
            <param name="task">The task to await.</param>
            <param name="token">Optional cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="task"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Await(System.Threading.Tasks.Task,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Awaits the specified task, blocking the current thread, and unwraps any <see cref="T:System.AggregateException" />
            by rethrowing the first inner exception, just like the await-statement would do.
            </summary>
            <param name="task">The task to await.</param>
            <param name="timeoutInMilliseconds">Maximum amount of time in milliseconds to wait for the task to complete.</param>
            <param name="token">Optional cancellation token.</param>
            <returns><c>true</c> if the Task completed execution within the allotted time; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="task"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="timeoutInMilliseconds"/> is not a valid timeout period.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Await(System.Threading.Tasks.Task,System.TimeSpan,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Awaits the specified task, blocking the current thread, and unwraps any <see cref="T:System.AggregateException" />
            by rethrowing the first inner exception, just like the await-statement would do.
            </summary>
            <param name="task">The task to await.</param>
            <param name="timeout">Maximum amount of time to wait for the task to complete.</param>
            <param name="token">Optional cancellation token.</param>
            <returns><c>true</c> if the Task completed execution within the allotted time; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="task"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Await``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Awaits the specified task, blocking the current thread, and unwraps any <see cref="T:System.AggregateException" />
            by rethrowing the first inner exception, just like the await-statement would do.
            </summary>
            <param name="task">The task to await.</param>        
            <exception cref="T:System.ArgumentNullException">
            <paramref name="task"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.RethrowInnerException(System.AggregateException)">
            <summary>
            Re-throws the first inner exception of the specified <paramref name="exception"/> if it has any
            inner exceptions, without losing the stacktrace of this exception.
            </summary>
            <param name="exception">The exception to unwrap.</param>
            <returns><c>false</c> if the exception was not re-thrown.</returns>
            <exception cref="T:System.Exception">
            If <paramref name="exception"/> has any inner exceptions.
            </exception>
        </member>
        <member name="T:Kingo.Threading.Context`1">
            <summary>
            Represents a contextual container for a specific value. All instance methods on this class are thread-safe.
            </summary>
            <typeparam name="TValue">Type of the value to store.</typeparam>
        </member>
        <member name="M:Kingo.Threading.Context`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Threading.Context`1" /> class.
            </summary>
        </member>
        <member name="M:Kingo.Threading.Context`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Threading.Context`1" /> class.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="P:Kingo.Threading.Context`1.Current">
            <summary>
            Returns the value of the item that is current with respect to the current thread.
            </summary>
        </member>
        <member name="M:Kingo.Threading.Context`1.OverrideThreadLocal(`0)">
            <summary>
            Sets the current value that is accessible by the current thread through <see cref="P:Kingo.Threading.Context`1.Current" />
            only as long as the scope is active.
            </summary>
            <param name="value">The value to set.</param>
            <returns>The scope that is to be disposed when ended.</returns>
        </member>
        <member name="M:Kingo.Threading.Context`1.OverrideAsyncLocal(`0)">
            <summary>
            Sets the current value that is accessible by all threads that share the same <see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext" />
            through <see cref="P:Kingo.Threading.Context`1.Current" /> as long as the scope is active.
            </summary>
            <param name="value">The value to set.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.InvalidOperationException">
            The call is made inside a thread local scope.
            </exception>
        </member>
        <member name="M:Kingo.Threading.Context`1.Override(`0)">
            <summary>
            Sets the current value that is accessible by all threads
            through <see cref="P:Kingo.Threading.Context`1.Current" /> as long as the scope is active.
            </summary>
            <param name="value">The value to set.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.InvalidOperationException">
            The call is made inside an async local or thread local scope.
            </exception>
        </member>
        <member name="M:Kingo.Threading.Context`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Kingo.Threading.ContextScope`1">
            <summary>
            Represents a scope that is used to temporarily set the current value of a context.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="P:Kingo.Threading.ContextScope`1.Value">
            <summary>
            Returns the value that is managed by this scope.
            </summary>
        </member>
        <member name="M:Kingo.Threading.ContextScope`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Kingo.EventHandlerExtensions">
            <summary>
            Contains extension-methods for raising events.
            </summary>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.Raise(System.EventHandler,System.Object)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using empty arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sender"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using the specified arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The arguments of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sender"/> or <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using the specified arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The arguments of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sender"/> or <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.Raise``2(``0,System.Object,``1)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using the specified arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The arguments of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sender"/> or <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.RaiseStatic(System.EventHandler)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using empty arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.RaiseStatic(System.EventHandler,System.EventArgs)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using the specified arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>        
            <param name="e">The arguments of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.RaiseStatic``1(System.EventHandler{``0},``0)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using the specified arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>        
            <param name="e">The arguments of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.RaiseStatic``1(System.Delegate,``0)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using the specified arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>        
            <param name="e">The arguments of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Resources.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.AggregateRoot_AggregateRemovedException">
            <summary>
              Looks up a localized string similar to Aggregate of type &apos;{0}&apos; cannot publish event of type &apos;{1}&apos; because it has been removed from its repository and its lifetime has therefore ended..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.AggregateRoot_EventConversionException">
            <summary>
              Looks up a localized string similar to Could not convert event of type &apos;{0}&apos; to an instance of type &apos;{1}&apos;. Please review the {2}() method of this event to ensure it returns the correct event type..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.AggregateRoot_HandlerForEventTypeAlreadyAdded">
            <summary>
              Looks up a localized string similar to Another handler for event of type &apos;{0}&apos; has already been added to this collection..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.AggregateRoot_InvalidIdOnEvent">
            <summary>
              Looks up a localized string similar to Id &apos;{0}&apos; on event &apos;{1}&apos; does not match the identifier of the aggregate it is being applied to ({2})..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.AggregateRoot_MissingEventHandlerException">
            <summary>
              Looks up a localized string similar to Missing event handler for event of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.AggregateRoot_VersionUpdateException">
            <summary>
              Looks up a localized string similar to The next version ({0}) must represent a newer version than the current version ({1})..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Comparable_IncomparableType">
            <summary>
              Looks up a localized string similar to The specified object of type &apos;{0}&apos; cannot be compared to instance of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Context_IllegalScopeStarted">
            <summary>
              Looks up a localized string similar to Cannot start this scope because a more restrive scope is still active..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.DomainModelException_CommandFailed">
            <summary>
              Looks up a localized string similar to Command &apos;{0}&apos; failed..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.DomainModelException_EventFailed">
            <summary>
              Looks up a localized string similar to An error occurred while processing event &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.ErrorLevel_InvalidErrorLevel">
            <summary>
              Looks up a localized string similar to ErrorLevel must be 0 or higher: {0}..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.ExecuteAsyncMethod_BadRequest">
            <summary>
              Looks up a localized string similar to The query could not be executed because of a bad request. See inner exception for details..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.ExecuteAsyncMethod_InternalServerError">
            <summary>
              Looks up a localized string similar to An error occurred while executing the query. See inner exception for details..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.ExpressionExtensions_UnsupportedExpression">
            <summary>
              Looks up a localized string similar to Specified expression is not supported: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.HandleInputStreamAsyncMethod_CommandHandlerException">
            <summary>
              Looks up a localized string similar to An error occurred while processing command of type &apos;{0}&apos;. See inner exception for details..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.HandleInputStreamAsyncMethod_InvalidUnitOfWorkScopeOption">
            <summary>
              Looks up a localized string similar to Invalid {0} specified: &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.HandleStreamAsyncMethod_EventHandlerException">
            <summary>
              Looks up a localized string similar to An error occurred while processing event of type &apos;{0}&apos;. See inner exception for details..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Identifier_EmptyIdentifier">
            <summary>
              Looks up a localized string similar to Cannot create an empty identifier..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Identifier_InvalidIdentifier">
            <summary>
              Looks up a localized string similar to Invalid identifier specified: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.InternalServerErrorException_FromException">
            <summary>
              Looks up a localized string similar to An error occurred while processing message of type &apos;{0}&apos;. See inner exception for details..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.MemoryRepository_InvalidBehavior">
            <summary>
              Looks up a localized string similar to Invalid behavior specified: &apos;{0}&apos;. Please choose one of the following values: &lt;{1}&gt;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Message_AmbiguousAttributeMatch">
            <summary>
              Looks up a localized string similar to Two or more attributes declared on message &apos;{0}&apos; are assignable to &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Message_ValidatorAlreadyRegisterd">
            <summary>
              Looks up a localized string similar to Another validator for message of type &apos;{0}&apos; has already been registered..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.MessageHandlerContext_NullOutputStream_PublishNotAllowed">
            <summary>
              Looks up a localized string similar to Cannot publish messages to the output stream while handling a metadata message..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.MessageHandlerFactory_InvalidInstanceLifetime">
            <summary>
              Looks up a localized string similar to Invalid InstanceLifetime specified: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.MessageValidationPipeline_InvalidMessage">
            <summary>
              Looks up a localized string similar to Message of type &apos;{0}&apos; is not valid: {1} validation error(s) found..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.MessageValidator_UnsupportedMessageType">
            <summary>
              Looks up a localized string similar to Cannot validate message of type &apos;{0}&apos; because this validator only supports messages of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.MethodAttributeProvider_AmbiguousAttributeMatch">
            <summary>
              Looks up a localized string similar to Cannot obtain single attribute of type &apos;{0}&apos; declared on method &apos;{1}&apos; because multiple attributes are of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.MicroProcessorContextState_InvalidOperation">
            <summary>
              Looks up a localized string similar to Invocation of method &apos;{0}()&apos; is not expected at this point..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.NullCache_CacheNotSupported">
            <summary>
              Looks up a localized string similar to Cache can only be used while a MicroProcessor is handling a message or executing a query..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.NullController_OperationNotSupported">
            <summary>
              Looks up a localized string similar to Operation &apos;{0}&apos; is not supported at this point..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.NullStream_PublishNotSupported">
            <summary>
              Looks up a localized string similar to Cannot publish event of type &apos;{0}&apos;: events can only be published while a MicroProcessor is handling a message or executing a query..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Property_InstructionInfo">
            <summary>
              Looks up a localized string similar to Please make sure exactly one public property that has a getter and a setter is decorated with this attribute..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Property_MissingGetMethod">
            <summary>
              Looks up a localized string similar to Illegal use of attribute &apos;{0}&apos; in class &apos;{1}&apos;: property &apos;{2}&apos; must have a getter..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Property_MissingSetMethod">
            <summary>
              Looks up a localized string similar to Illegal use of attribute &apos;{0}&apos; in class &apos;{1}&apos;: property &apos;{2}&apos; must have a setter..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Property_PropertyIndexerFound">
            <summary>
              Looks up a localized string similar to Illegal use of attribute &apos;{0}&apos; in class &apos;{1}&apos;: cannot declare this attribute on an indexer ({2})..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Property_PropertyNotFound">
            <summary>
              Looks up a localized string similar to Missing declaration of attribute &apos;{0}&apos; on a property in class &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Property_TooManyPropertiesFound">
            <summary>
              Looks up a localized string similar to Illegal use of attribute &apos;{0}&apos; in class &apos;{1}&apos;: multiple properties ({2}) have been decorated with the attribute where only one is allowed..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Property_WrongPropertyType">
            <summary>
              Looks up a localized string similar to Illegal use of attribute &apos;{0}&apos; in class &apos;{1}&apos;: property &apos;{2}&apos; must be of type &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.QueryContext_NullOutputStream_PublishNotAllowed">
            <summary>
              Looks up a localized string similar to Cannot publish messages to the output stream while executing a query..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.ReadOnlyList_IndexOutOfRange">
            <summary>
              Looks up a localized string similar to There is no element at index &apos;{0}&apos; (Count = {1})..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Repository_AggregateNotFound">
            <summary>
              Looks up a localized string similar to Aggregate of type &apos;{0}&apos; with Id &apos;{1}&apos; was not found in the data store..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Repository_AggregateRemovedInSession">
            <summary>
              Looks up a localized string similar to Aggregate of type &apos;{0}&apos; with Id &apos;{1}&apos; could not be retrieved because it was removed from the data store in this session..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Repository_AggregateRestoreException">
            <summary>
              Looks up a localized string similar to An error occurred while restoring aggregate of type &apos;{0}&apos;. See inner exception for details..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Repository_DuplicateKeyException_AggregateAlreadyExists">
            <summary>
              Looks up a localized string similar to Cannot add aggregate of type &apos;{0}&apos; to the repository because another aggregate with Id &apos;{1}&apos; is already present in the data store..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Scope_CannotCompleteScope">
            <summary>
              Looks up a localized string similar to Cannot complete this scope because it is not the current scope..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Scope_IncorrectNesting">
            <summary>
              Looks up a localized string similar to The scopes were not nested correctly..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Scope_ScopeAlreadyCompleted">
            <summary>
              Looks up a localized string similar to The scope has already completed..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.TypeAttributeProvider_AmbiguousAttributeMatch">
            <summary>
              Looks up a localized string similar to Cannot obtain single attribute of type &apos;{0}&apos; declared on type &apos;{1}&apos; because multiple attributes are of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="T:Kingo.TypeSet">
            <summary>
            Represents an immutable set of types.
            </summary>
        </member>
        <member name="F:Kingo.TypeSet.Empty">
            <summary>
            Represents the empty set.
            </summary>
        </member>
        <member name="M:Kingo.TypeSet.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.TypeSet.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Kingo.TypeSet.Contains``1">
            <summary>
            Determines whether or not this set contains the specified <typeparamref name="TItem"/>.
            </summary>
            <typeparam name="TItem">The type to check.</typeparam>
            <returns><c>true</c> if this set contains the specified <typeparamref name="TItem"/>; otherwise <c>false</c>.</returns>        
        </member>
        <member name="M:Kingo.TypeSet.Contains(System.Type)">
            <summary>
            Determines whether or not this set contains the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type to check.</param>
            <returns><c>true</c> if this set contains the specified <paramref name="type"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.TypeSet.AddAssembliesFromCurrentDirectory(System.String,System.IO.SearchOption)">
            <summary>
            Adds all types defined in the assemblies that are located in the current directory and match the specified
            <paramref name="searchPattern"/> to this set.
            </summary>
            <param name="searchPattern">The pattern that is used to match specified files/assemblies.</param>
            <param name="searchOption">
            Indicates whether or not only the top-level directory is to be searched.        
            </param>
            <returns>A new set containing all types from the specified assemblies.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="searchPattern"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.IOException">
            An error occurred while reading files from the specified location(s).
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission
            </exception>
        </member>
        <member name="M:Kingo.TypeSet.AddAssembliesFromDirectory(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Adds all types defined in the assemblies that are located in the specified <paramref name="path"/> and match the specified
            <paramref name="searchPattern"/> to this set.
            </summary>
            <param name="path">A path pointing to a specific directory.</param>
            <param name="searchPattern">The pattern that is used to match specified files/assemblies.</param>
            <param name="searchOption">
            Indicates whether or not only the top-level directory specified by <paramref name="path"/> is to be searched.        
            </param>
            <returns>A new set containing all types from the specified assemblies.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> or <paramref name="searchPattern"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is not a valid path, <paramref name="searchPattern"/> is not a valid search-pattern,
            or <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption" />.
            </exception>
            <exception cref="T:System.IO.IOException">
            An error occurred while reading files from the specified location(s).
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission
            </exception>
        </member>
        <member name="M:Kingo.TypeSet.AddAssemblies(System.Reflection.Assembly[])">
            <summary>
            Adds all types from the specified <paramref name="assemblies"/> to this set.
            </summary>
            <param name="assemblies">A collection of assemblies.</param>
            <returns>A new set where all types from the specified <paramref name="assemblies"/> were added.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assemblies"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeSet.AddAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Adds all types from the specified <paramref name="assemblies"/> to this set.
            </summary>
            <param name="assemblies">A collection of assemblies.</param>
            <returns>A new set where all types from the specified <paramref name="assemblies"/> were added.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assemblies"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeSet.Add(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Adds all the specified <paramref name="types"/> to this set.
            </summary>
            <param name="types">A collection of types.</param>
            <returns>A new set containing all the specified <paramref name="types"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="types"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeSet.Add``1">
            <summary>
            Adds the specified <typeparamref name="TItem" /> to the set.
            </summary>
            <typeparam name="TItem">The type to add to this set.</typeparam>
            <returns>A new set containing the specified <typeparamref name="TItem"/>.</returns>
        </member>
        <member name="M:Kingo.TypeSet.Add(System.Type)">
            <summary>
            Adds the specified <paramref name="type" /> to the set.
            </summary>
            <param name="type">The type to add to this set.</param>
            <returns>A new set containing the specified <paramref name="type"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeSet.RemoveAssembliesFromCurrentDirectory(System.String,System.IO.SearchOption)">
            <summary>
            Removes all types defined in the assemblies that are located in the current directory and match the specified
            <paramref name="searchPattern"/> from this set.
            </summary>
            <param name="searchPattern">The pattern that is used to match specified files/assemblies.</param>
            <param name="searchOption">
            Indicates whether or not only the top-level directory is to be searched.        
            </param>
            <returns>A new set containing all types from the specified assemblies.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="searchPattern"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.IOException">
            An error occurred while reading files from the specified location(s).
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission
            </exception>
        </member>
        <member name="M:Kingo.TypeSet.RemoveAssembliesFromDirectory(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Adds all types defined in the assemblies that are located in the specified <paramref name="path"/> and match the specified
            <paramref name="searchPattern"/> from this set.
            </summary>
            <param name="path">A path pointing to a specific directory.</param>
            <param name="searchPattern">The pattern that is used to match specified files/assemblies.</param>
            <param name="searchOption">
            Indicates whether or not only the top-level directory specified by <paramref name="path"/> is to be searched.        
            </param>
            <returns>A new set containing all types from the specified assemblies.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> or <paramref name="searchPattern"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is not a valid path, <paramref name="searchPattern"/> is not a valid search-pattern,
            or <paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption" />.
            </exception>
            <exception cref="T:System.IO.IOException">
            An error occurred while reading files from the specified location(s).
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission
            </exception>
        </member>
        <member name="M:Kingo.TypeSet.RemoveAssemblies(System.Reflection.Assembly[])">
            <summary>
            Removes all types from the specified <paramref name="assemblies"/> from this set.
            </summary>
            <param name="assemblies">A collection of assemblies.</param>
            <returns>A new set where all types from the specified <paramref name="assemblies"/> have been removed.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assemblies"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeSet.RemoveAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Removes all types from the specified <paramref name="assemblies"/> from this set.
            </summary>
            <param name="assemblies">A collection of assemblies.</param>
            <returns>A new set where all types from the specified <paramref name="assemblies"/> have been removed.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assemblies"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeSet.Remove(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Removes all specified <paramref name="types"/> from this set.
            </summary>
            <param name="types">A collection of types to remove.</param>
            <returns>A new set where all the specified <paramref name="types"/> have been removed.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="types"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.TypeSet.Remove``1">
            <summary>
            Removes the specified <typeparamref name="TItem"/> from this set.
            </summary>
            <typeparam name="TItem">The type to remove.</typeparam>
            <returns>A new set where the specified <typeparamref name="TItem"/> has been removed.</returns>
        </member>
        <member name="M:Kingo.TypeSet.Remove(System.Type)">
            <summary>
            Removes the specified <paramref name="type"/> from this set.
            </summary>
            <param name="type">The type to remove.</param>
            <returns>A new set where the specified <paramref name="type"/> has been removed.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
    </members>
</doc>
