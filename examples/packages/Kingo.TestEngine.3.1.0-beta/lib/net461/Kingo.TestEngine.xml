<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kingo.TestEngine</name>
    </assembly>
    <members>
        <member name="T:Kingo.AutomatedTest">
            <summary>
            When implemented by a class, represents a test or collection of tests that can be executed automatically by a test framework.
            </summary>
        </member>
        <member name="M:Kingo.AutomatedTest.NewAssertFailedException(System.String,System.Exception)">
            <summary>
            Creates and returns a new exception that indicates that an assertion has failed.
            </summary>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Optional cause of the exception.</param>
            <returns>
            A new exception that indicates that an assertion has failed with the specified <paramref name="message"/>
            and <paramref name="innerException"/> as inner exception.
            </returns>
        </member>
        <member name="T:Kingo.Messaging.IIntegrationTestResult`1">
            <summary>
            When implemented by a class, represents a result that is expected from execution of a specific query.
            </summary>
            <typeparam name="TMessageOut">Type of the result of the query.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.IIntegrationTestResult`1.IsResponseAsync(System.Action{`0})">
            <summary>
            Asserts that the processor returns a specific message when executing a specific query.
            </summary>        
            <param name="assertCallback">
            Callback that will be used to assert the properties of the returned message.
            </param>
            <returns>A task that represents the execution of the associated scenario.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assertCallback"/> is <c>null</c>.
            </exception>      
        </member>
        <member name="T:Kingo.Messaging.IScenarioResult">
            <summary>
            when implemented by a class, represents a result that is expected from execution of a specific <see cref="T:Kingo.Messaging.Scenario" />.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.IScenarioResult.IsExceptionOfTypeAsync``1(System.Action{``0})">
            <summary>
            Asserts that the specified <typeparamref name="TException"/> is thrown when executing the scenario.
            </summary>
            <typeparam name="TException">Type of the expected exception.</typeparam>
            <param name="assertCallback">
            An optional delegate that can be used to assert the properties of the exception.
            </param>
            <returns>A task that represents the execution of the associated scenario.</returns>
        </member>
        <member name="T:Kingo.Messaging.IUnitTestResult">
            <summary>
            When implemented by a class, represents a result that is expected from processing a specific command or event.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.IUnitTestResult.IsEventStreamAsync(System.Int32,System.Action{System.Collections.Generic.IReadOnlyList{System.Object}})">
            <summary>
            Asserts that the processor returns a specific stream of events when the message has been processed.
            </summary>        
            <param name="expectedEventCount">The amount of events that are expected to be published.</param>
            <param name="assertCallback">
            Optional delegate that can be used to assert the types and properties of the events in the stream.
            </param>
            <returns>A task that represents the execution of the associated scenario.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="expectedEventCount" /> is a negative value by the processor.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.IntegrationTestBase`1">
            <summary>
            Represents a scenario that is used to test a query.
            </summary>    
            <typeparam name="TMessageOut">Type of the response that is returned by the query.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.IntegrationTestBase`1.WhenQueryIsExecuted(Kingo.Messaging.IMicroProcessor)">
            <summary>
            Executes the query to test and returns its result.
            </summary>
            <param name="processor">The processor to execute the query with.</param>
            <returns>The result of the query.</returns>
        </member>
        <member name="T:Kingo.Messaging.Scenario">
            <summary>
            Represents a scenario that follows the Behavior Driven Development (BDD) style, which is characterized
            by the Given-When-Then pattern.
            </summary>    
        </member>
        <member name="P:Kingo.Messaging.Scenario.Processor">
            <summary>
            Returns the processor that is used to execute this <see cref="T:Kingo.Messaging.Scenario`1"/>.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Scenario.CreateProcessor">
            <summary>
            Creates and returns the processor that is used to execute this <see cref="T:Kingo.Messaging.Scenario`1" />.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Scenario.ToString">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.Scenario.Count">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.Scenario.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Scenario.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Scenario.Append``1(``0,Kingo.Messaging.IMessageHandler{``0})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Scenario.AppendStream(Kingo.Messaging.IMessageStream)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Scenario.HandleMessagesWithAsync(Kingo.Messaging.IMessageHandler)">
            <summary>
            Lets the specified <paramref name="handler"/> handle all messages of this stream and returns a stream of events.
            </summary>
            <param name="handler">A handler of messages.</param>   
            <returns>A task representing the operation.</returns> 
        </member>
        <member name="M:Kingo.Messaging.Scenario.SetupAsync">
            <summary>
            Performs all necessary initialization of this scenario before it is executed.
            </summary>
            <returns>A task representing the operation.</returns>
        </member>
        <member name="M:Kingo.Messaging.Scenario.OnStateInitialized(Kingo.Messaging.IMessageStream)">
            <summary>
            This method is invoked once the scenario has initialized its begin state by processing
            all the message streams returns by the <see cref="M:Kingo.Messaging.Scenario.Given"/> method during the setup phase.
            </summary>
            <param name="stream">The stream of events that were publised during the setup phase.</param>
        </member>
        <member name="M:Kingo.Messaging.Scenario.TearDownAsync">
            <summary>
            Performs all necessary cleanup after this scenario has been executed.
            </summary>
            <returns>A task representing the operation.</returns>
        </member>
        <member name="M:Kingo.Messaging.Scenario.Given">
            <summary>
            Returns a collection of streams that are processed by the <see cref="P:Kingo.Messaging.Scenario.Processor" /> to setup a specific domain state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingo.Messaging.Scenario.ThenAsync">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Scenario.AssertInnerExceptionIsOfType``1(System.Exception,System.Action{``0})">
            <summary>
            Asserts that the inner exception of another exception is an instance of a specific type and invokes a callback
            which can be used to assert the properties of the inner exception.
            </summary>
            <typeparam name="TException">Type of the expected (inner) exception.</typeparam>
            <param name="exception">An exception.</param>
            <param name="assertCallback">
            Callback that can be used to assert the properties of the inner exception.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exception"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.Validation.IValidationResult">
            <summary>
            When implemented by a class, represents the result of a validation test.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Validation.IValidationResult.AssertInstanceError(System.String,System.StringComparison)">
            <summary>
            Asserts that an instance error is present and, if specified, that it is equal to the specified <paramref name="expectedErrorMessage" />.
            </summary>
            <param name="expectedErrorMessage">
            If not <c>null</c>, specifies the expected error message.
            </param>
            <param name="comparison">
            Indicates how to compare the expected error message and actual error message.
            </param>
            <returns>This result.</returns>
        </member>
        <member name="M:Kingo.Messaging.Validation.IValidationResult.AssertInstanceError(System.Action{System.String})">
            <summary>
            Asserts that an instance error is present and invokes the specified <paramref name="assertCallback" /> which can be used
            to assert the contents of the error message.
            </summary>
            <param name="assertCallback">
            Delegate that can be used to assert the content of the error message.
            </param>
            <returns>This result.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assertCallback"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Validation.IValidationResult.AssertMemberError(System.String,System.String,System.StringComparison)">
            <summary>
            Asserts that an error for a member with the specified <paramref name="memberName" /> is present and, if specified,
            that it is equal to the specified <paramref name="expectedErrorMessage" />.
            </summary>
            <param name="memberName">Name of the member with the error message.</param>
            <param name="expectedErrorMessage">
            If not <c>null</c>, specifies the expected error message.
            </param>
            <param name="comparison">
            Indicates how to compare the expected error message and actual error message.
            </param>
            <returns>This result.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="memberName"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Validation.IValidationResult.AssertMemberError(System.String,System.Action{System.String})">
            <summary>
            Asserts that an error for a member with the specified <paramref name="memberName" /> is present and invokes the
            specified <paramref name="assertCallback" /> which can be used to assert the contents of the error message.
            </summary>
            <param name="memberName">Name of the member with the error message.</param>
            <param name="assertCallback">
            Delegate that can be used to assert the content of the error message.
            </param>
            <returns>This result.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="memberName"/> or <paramref name="assertCallback"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.Validation.RequestMessageTestBase">
            <summary>
            Serves as a base-class for all validation tests for a specific request message.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Validation.RequestMessageTestBase.AssertIsValid(Kingo.Messaging.Validation.IRequestMessage)">
            <summary>
            Validates the specified <paramref name="message"/> and asserts that the message is valid.
            </summary>
            <param name="message">The message to validate.</param>
            <returns>The result of the validation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.Messaging.Validation.RequestMessageTestBase.AssertIsNotValid(Kingo.Messaging.Validation.IRequestMessage,System.Int32)">
            <summary>
            Validates the specified <paramref name="message"/> and asserts that the result contains a certain amount of errors.
            </summary>
            <param name="message">The message to validate.</param>
            <param name="expectedErrorCount">
            The expected amount of errors.
            </param>
            <returns>The result of the validation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>  
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="expectedErrorCount" /> is a negative number.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.Scenario`1">
            <summary>
            Represents a scenario that follows the Behavior Driven Development (BDD) style, which is characterized
            by the Given-When-Then pattern.
            </summary>           
        </member>
        <member name="P:Kingo.Messaging.Scenario`1.Result">
            <summary>
            Returns the instance that is used verify the results of this scenario.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.UnitTestBase`1">
            <summary>
            Represents a scenario that is used to test the business logic of a service or application.
            </summary>
            <typeparam name="TMessage">Type of the message that is processed on the When-phase.</typeparam>    
        </member>
        <member name="M:Kingo.Messaging.UnitTestBase`1.WhenMessageIsHandled">
            <summary>
            Creates and returns the message that will be handled by the processor and of which the results will be verified
            by the <see cref="P:Kingo.Messaging.Scenario`1.Result"/>.
            </summary>
            <returns>The message that will be handled by the processor.</returns>
        </member>
        <member name="M:Kingo.Messaging.UnitTestBase`1.CreateMessageHandler">
            <summary>
            Creates and returns a <see cref="T:Kingo.Messaging.IMessageHandler`1" /> that will be invoked by the processor to handle the message.
            By default, this method returns <c>null</c> so that the processor will attempt to resolve any registered handlers.
            </summary>
            <returns>
            A <see cref="T:Kingo.Messaging.IMessageHandler`1" /> that will be invoked by the processor to handle the message; <c>null</c> by default.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.UnitTestBase`1.AssertEvent``1(System.Collections.Generic.IReadOnlyList{System.Object},System.Int32,System.Action{``0})">
            <summary>
            Asserts that the specified <paramref name="stream"/> contains an event of the specified type <typeparamref name="TEvent"/>
            at the specified <paramref name="index"/>, and invokes the specified <paramref name="assertCallback"/> if it does.
            </summary>
            <typeparam name="TEvent">Type of the expected event.</typeparam>
            <param name="stream">An event stream.</param>
            <param name="index">Index at which the event is expected.</param>
            <param name="assertCallback">
            Callback that can be used to assert the properties of the event.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="index"/> is out of range of valid values for the specified <paramref name="stream"/>.
            </exception>
        </member>
        <member name="T:Kingo.ObjectExtensions">
            <summary>
            Contains extension methods for every object.
            </summary>
        </member>
        <member name="M:Kingo.ObjectExtensions.IgnoreValue(System.Object)">
            <summary>
            A method that simply ignores whatever is passed to it. The purpose of this method is to provide a clean syntax and increase code readability
            in test methods where return values of methods are to be ignored, but require consumption of it by the compiler, such as with property or
            indexer calls.
            </summary>
            <param name="instance">Any instance.</param>
        </member>
        <member name="T:Kingo.Resources.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.RequestMessageTest_InvalidErrorCount">
            <summary>
              Looks up a localized string similar to The specified number of expected errors ({0}) is invalid. This number must be greater than or equal to 1..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.RequestMessageTest_NoInstanceError">
            <summary>
              Looks up a localized string similar to An instance error was expected but the result of the validation contains no instance error..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.RequestMessageTest_NoMemberError">
            <summary>
              Looks up a localized string similar to An error for member &apos;{0}&apos; was expected, but the result contains no error for this member..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.RequestMessageTest_UnexpectedErrorCount">
            <summary>
              Looks up a localized string similar to The number of expected validation errors ({0}) does not match the actual amount of validation errors ({1})..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.RequestMessageTest_UnexpectedInstanceError">
            <summary>
              Looks up a localized string similar to The expected instance error ({0}) does not match the actual instance error ({1}) based on the type of comparison specified ({2})..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.RequestMessageTest_UnexpectedMemberError">
            <summary>
              Looks up a localized string similar to The expected error for member &apos;{0}&apos; ({1}) does not match the actual error ({2}) based on the type of comparison specified ({3})..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Scenario_ExceptionAssertFailed_NoException">
            <summary>
              Looks up a localized string similar to Expected exception of type &apos;{0}&apos;, but no exception was thrown..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Scenario_ExceptionAssertFailed_OtherExceptionType">
            <summary>
              Looks up a localized string similar to Expected exception of type &apos;{0}&apos; but exception of type &apos;{1}&apos; was thrown instead. See inner exception for details..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Scenario_InnerExceptionNotFound">
            <summary>
              Looks up a localized string similar to Expected inner exception of type &apos;{0}&apos; but exception of type &apos;{1}&apos; did not have an inner exception..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Scenario_InnerExceptionOfDifferentType">
            <summary>
              Looks up a localized string similar to Expected inner exception op type &apos;{0}&apos; but it was of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.WriteScenario_InvalidEventCount">
            <summary>
              Looks up a localized string similar to The number of expected events cannot be negative: {0}..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.WriteScenario_UnexpectedEventCount">
            <summary>
              Looks up a localized string similar to The number of expected events ({0}) does not match the actual amount of published events ({1})..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.WriteScenario_UnexpectedEventType">
            <summary>
              Looks up a localized string similar to Expected event of type &apos;{0}&apos; at index &apos;{1}&apos;, but found event of type &apos;{2}&apos;..
            </summary>
        </member>
    </members>
</doc>
