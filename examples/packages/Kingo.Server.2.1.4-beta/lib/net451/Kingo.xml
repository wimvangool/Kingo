<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kingo</name>
    </assembly>
    <members>
        <member name="T:Kingo.ArrayExtensions">
            <summary>
            Contains extension-methods for arrays.
            </summary>
        </member>
        <member name="M:Kingo.ArrayExtensions.Add``1(``0[],``0)">
            <summary>
            Creates and returns a new array containing all the elements of the source plus the element to add at the last index.
            </summary>
            <typeparam name="TElement">Type of the elements in the array.</typeparam>
            <param name="elements">An array of elements.</param>
            <param name="element">The element to add at the end of the new array.</param>
            <returns>A new array with the element at the last index.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="elements"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Clocks.Clock">
            <summary>
            Provides a basic implementation of the <see cref="T:Kingo.Clocks.IClock"/> interface.
            </summary>
        </member>
        <member name="T:Kingo.Clocks.IClock">
            <summary>
            When implemented by a class, represents a service that provides the current date and time.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.IClock.LocalTime">
            <summary>
            Returns the time of the day in local time.
            </summary>
            <returns>The time of the day in local time.</returns>
        </member>
        <member name="M:Kingo.Clocks.IClock.LocalDate">
            <summary>
            Returns the date in local time.
            </summary>
            <returns>The date in local time.</returns>
        </member>
        <member name="M:Kingo.Clocks.IClock.LocalDateAndTime">
            <summary>
            Returns the date and time in local time.
            </summary>
            <returns>The date and time in local time.</returns>
        </member>
        <member name="M:Kingo.Clocks.IClock.UtcTime">
            <summary>
            Returns the time of the day in UTC-time.
            </summary>
            <returns>Time of the day in UTC-time.</returns>
        </member>
        <member name="M:Kingo.Clocks.IClock.UtcDate">
            <summary>
            Returns the date in UTC-time.
            </summary>
            <returns>Date in UTC-time.</returns>
        </member>
        <member name="M:Kingo.Clocks.IClock.UtcDateAndTime">
            <summary>
            Returns the date and time in UTC-time.
            </summary>
            <returns>Date and time in UTC-time.</returns>
        </member>
        <member name="M:Kingo.Clocks.Clock.LocalTime">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.Clock.LocalDate">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.Clock.LocalDateAndTime">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.Clock.UtcTime">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.Clock.UtcDate">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.Clock.UtcDateAndTime">
            <inheritdoc />
        </member>
        <member name="F:Kingo.Clocks.Clock.Default">
            <summary>
            Returns the default clock of this system.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.Clock.OverrideThreadLocal(System.Func{System.DateTimeOffset})">
            <summary>
            Sets the current clock that is accessible by the current thread through <see cref="P:Kingo.Clocks.Clock.Current"/>
            only as long as the scope is active.
            </summary>
            <param name="utcDateAndTimeFactory">The delegate that is used to obtain the UTC date and time.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utcDateAndTimeFactory"/> is <c>null</c>.
            </exception>                       
        </member>
        <member name="M:Kingo.Clocks.Clock.OverrideThreadLocal(Kingo.Clocks.IClock)">
            <summary>
            Sets the current clock that is accessible by the current thread through <see cref="P:Kingo.Clocks.Clock.Current"/>
            only as long as the scope is active.
            </summary>
            <param name="clock">The clock to set.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="clock"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.Clocks.Clock.OverrideAsyncLocal(System.Func{System.DateTimeOffset})">
            <summary>
            Sets the current value that is accessible by all threads that share the same <see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext"/>
            through <see cref="P:Kingo.Clocks.Clock.Current"/> as long as the scope is active.
            </summary>
            <param name="utcDateAndTimeFactory">The delegate that is used to obtain the UTC date and time.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utcDateAndTimeFactory"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The call is made inside a thread local scope.
            </exception>
        </member>
        <member name="M:Kingo.Clocks.Clock.OverrideAsyncLocal(Kingo.Clocks.IClock)">
            <summary>
            Sets the current value that is accessible by all threads that share the same <see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext"/>
            through <see cref="P:Kingo.Clocks.Clock.Current"/> as long as the scope is active.
            </summary>
            <param name="clock">The clock to set.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="clock"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The call is made inside a thread local scope.
            </exception>
        </member>
        <member name="M:Kingo.Clocks.Clock.Override(System.Func{System.DateTimeOffset})">
            <summary>
            Sets the current value that is accessible by all threads
            through <see cref="P:Kingo.Clocks.Clock.Current"/> as long as the scope is active.
            </summary>
            <param name="utcDateAndTimeFactory">The delegate that is used to obtain the UTC date and time.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utcDateAndTimeFactory"/> is <c>null</c>.
            </exception>        
            <exception cref="T:System.InvalidOperationException">
            The call is made inside an async local or thread local scope.
            </exception>      
        </member>
        <member name="M:Kingo.Clocks.Clock.Override(Kingo.Clocks.IClock)">
            <summary>
            Sets the current value that is accessible by all threads
            through <see cref="P:Kingo.Clocks.Clock.Current"/> as long as the scope is active.
            </summary>
            <param name="clock">The clock to set.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="clock"/> is <c>null</c>.
            </exception>  
            <exception cref="T:System.InvalidOperationException">
            The call is made inside an async local or thread local scope.
            </exception>      
        </member>
        <member name="P:Kingo.Clocks.Clock.Current">
            <summary>
            Returns the clock associated to the current thread.
            </summary>
        </member>
        <member name="T:Kingo.Clocks.ClockExtensions">
            <summary>
            Contains extension methods for the <see cref="T:Kingo.Clocks.IClock"/> interface.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.ClockExtensions.Shift(Kingo.Clocks.IClock,System.TimeSpan)">
            <summary>
            Returns a clock that shows the time of the current clock, plus the given offset.
            </summary>
            <param name="clock">A clock.</param>
            <param name="offset">The offset to add to the time of the current clock.</param>
            <returns>A clock that shows the time of the current clock, plus the given offset.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="clock"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Clocks.DelegateClock">
            <summary>
            Represents a clock that implemented by a delegate.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.DelegateClock.#ctor(System.Func{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Clocks.DelegateClock"/> class.
            </summary>
            <param name="utcDateAndTimeFactory">The delegate that is used to obtain the UTC date and time.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utcDateAndTimeFactory"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Clocks.DelegateClock.UtcDateAndTime">
            <inheritdoc />
        </member>
        <member name="T:Kingo.EnumerableExtensions">
            <summary>
            Contains extension methods for the <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface.
            </summary>
        </member>
        <member name="M:Kingo.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection where all <c>null</c> values have been removed.
            </summary>
            <typeparam name="T">Type of the items in the collection.</typeparam>
            <param name="collection">A collection of items.</param>
            <returns>A subset of the specified <paramref name="collection"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.ExceptionExtensions">
            <summary>
            Contains extenion methods for the <see cref="T:System.Exception"/> class.
            </summary>
        </member>
        <member name="M:Kingo.ExceptionExtensions.Rethrow(System.Exception)">
            <summary>
            Rethrows the specified <paramref name="exception"/> without losing its stacktrace.
            </summary>
            <param name="exception">The exception to rethrow.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exception"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.Command">
            <summary>
            Represents a command that re-validates itself on every change and implements the <see cref="T:System.ComponentModel.INotifyPropertyChanging"/>,
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> and <see cref="T:System.ComponentModel.IDataErrorInfo"/> interfaces so that it can easily be bound to
            in WPF applications.
            </summary>    
        </member>
        <member name="T:Kingo.Messaging.Message">
            <summary>
            Provides a base-implementation of the <see cref="T:Kingo.Messaging.IMessage"/> interface.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.IMessage">
            <summary>
            When implemented by a class, represents a message that can validate and copy itself.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.IValidateable">
            <summary>
            When implemented by a class, represent an object that can be validated.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.IValidateable.Validate">
            <summary>
            Validates this instance and returns a <see cref="T:Kingo.Messaging.ErrorInfo"/> instance
            that contains error messages for the instance and all invalid members.
            </summary>                
            <returns>
            A <see cref="T:Kingo.Messaging.ErrorInfo"/> instance that contains all validation-errors (if any).
            </returns>   
        </member>
        <member name="M:Kingo.Messaging.IMessage.Copy">
            <summary>
            Creates and returns a deep copy of this message.
            </summary>
            <returns>A copy of this message.</returns>
        </member>
        <member name="M:Kingo.Messaging.Message.Equals(System.Object)">
            <summary>
            Determines whether this message is equal to the specified <paramref name="obj"/> based on all fields.
            </summary>
            <param name="obj">Another object.</param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is of the same type and has equal members; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.Message.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Message.Copy">
            <summary>
            Creates and returns a copy of this message. The default implementation uses
            the <see cref="T:System.Runtime.Serialization.DataContractSerializer"/> to copy this instance.
            </summary>
            <returns>A copy of this message.</returns>
        </member>
        <member name="M:Kingo.Messaging.Message.Validate">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Message.CreateValidator">
            <summary>
            Creates and returns a <see cref="T:Kingo.Messaging.IValidator"/> that can be used to validate this message.        
            </summary>
            <returns>A new <see cref="T:Kingo.Messaging.IValidator"/> that can be used to validate this message.</returns>
        </member>
        <member name="M:Kingo.Messaging.Message.TryGetStrategyFromAttribute``1(System.Object,``0@)">
            <summary>
            Attempts to retrieve a single attribute of type <typeparamref name="TStrategy"/> from a certain message.
            </summary>
            <typeparam name="TStrategy">Type of attribute to retrieve.</typeparam>
            <param name="message">Message to retrieve the attribute from.</param>
            <param name="attribute">
            When this method returns <c>true</c>, refers to the attribute that was retrieved;
            will be <c>null</c> otherwise.
            </param>
            <returns><c>true</c> if the attribute was retrieved; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Multiple attributes of type <typeparamref name="TStrategy"/> were found on the specified <paramref name="message"/>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Message.SelectAttributesOfType``1(System.Object)">
            <summary>
            Returns the collections of <see cref="T:System.Attribute">Attributes</see> that are declared on the specified <paramref name="message"/>
            and are assignable to <typeparamref name="TAttribute"/>.
            </summary>
            <typeparam name="TAttribute">Type of the attributes to select.</typeparam>
            <param name="message">The message on which the attributes are declared.</param>
            <returns>A collection of <typeparamref name="TAttribute"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Message.SelectAttributesOfType``1(System.Type)">
            <summary>
            Returns the collections of <see cref="T:System.Attribute">Attributes</see> that are declared on the specified <paramref name="messageType"/>
            and are assignable to <typeparamref name="TAttribute"/>.
            </summary>
            <typeparam name="TAttribute">Type of the attributes to select.</typeparam>
            <param name="messageType">The <see cref="T:System.Type"/> on which the attributes are declared.</param>
            <returns>A collection of <typeparamref name="TAttribute"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageType"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Command.AcceptChanges">
            <summary>
            Sets <see cref="P:Kingo.Messaging.Command.HasChanges"/> to <c>false</c>.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Command.SetValue``1(``0@,``0,System.Linq.Expressions.Expression{System.Func{``0}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Assigns the specified <paramref name="newValue"/> to the <paramref name="oldValue"/> and raises
            the <see cref="E:Kingo.Messaging.Command.PropertyChanging"/> and <see cref="E:Kingo.Messaging.Command.PropertyChanged"/> events, if and only if
            the values are different.
            </summary>
            <typeparam name="TProperty">Type of the property value.</typeparam>
            <param name="oldValue">The current value of the property.</param>
            <param name="newValue">The value to assign.</param>
            <param name="expression">
            An expression referring to the property that is about to be changed.
            </param>
            <param name="comparer">
            The comparer that is used to determine whether <paramref name="oldValue"/> and <paramref name="newValue"/> are
            equal or not. If <c>null</c> is specified, the default comparer is used.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="expression"/> does not refer to a property.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Command.SetValue``1(``0@,``0,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Assigns the specified <paramref name="newValue"/> to the <paramref name="oldValue"/> and raises
            the <see cref="E:Kingo.Messaging.Command.PropertyChanging"/> and <see cref="E:Kingo.Messaging.Command.PropertyChanged"/> events, if and only if
            the values are different.
            </summary>
            <typeparam name="TProperty">Type of the property value.</typeparam>
            <param name="oldValue">The current value of the property.</param>
            <param name="newValue">The value to assign.</param>
            <param name="propertyName">
            Name of the property that is about to be changed.
            </param>
            <param name="comparer">
            The comparer that is used to determine whether <paramref name="oldValue"/> and <paramref name="newValue"/> are
            equal or not. If <c>null</c> is specified, the default comparer is used.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="propertyName"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Command.OnPropertyChanging">
            <summary>
            Raises the <see cref="E:Kingo.Messaging.Command.PropertyChanging"/> event, indicating that the entire message is about to be changed.       
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Command.OnPropertyChanging``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Raises the <see cref="E:Kingo.Messaging.Command.PropertyChanging"/> event, indicating that the property referred to by the
            specified <paramref name="expression"/> is about to be changed.
            </summary>
            <typeparam name="TProperty">Type of the property that has changed.</typeparam>
            <param name="expression">
            An expression referring to the property that has changed.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="expression"/> does not refer to a property.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Command.OnPropertyChanging(System.String)">
            <summary>
            Raises the <see cref="E:Kingo.Messaging.Command.PropertyChanging"/> event, indicating that the property with the
            specified <paramref name="propertyName"/> is about to be changed.
            </summary>                
            <param name="propertyName">Name of the property that has changed.</param>
        </member>
        <member name="M:Kingo.Messaging.Command.OnPropertyChanging(System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Kingo.Messaging.Command.PropertyChanging"/> event with the specified argument.
            </summary>
            <param name="e">Argument of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Command.OnPropertyChanged">
            <summary>
            Raises the <see cref="E:Kingo.Messaging.Command.PropertyChanged"/> event, indicating that the entire message has changed
            and all bindings need to be refreshed.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Command.OnPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Raises the <see cref="E:Kingo.Messaging.Command.PropertyChanged"/> event, indicating that the property referred to by the
            specified <paramref name="expression"/> has changed.
            </summary>
            <typeparam name="TProperty">Type of the property that has changed.</typeparam>
            <param name="expression">
            An expression referring to the property that has changed.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="expression"/> does not refer to a property.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Command.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Kingo.Messaging.Command.PropertyChanged"/> event, indicating that the property with the
            specified <paramref name="propertyName"/> has changed.
            </summary>                
            <param name="propertyName">Name of the property that has changed.</param>
        </member>
        <member name="M:Kingo.Messaging.Command.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Kingo.Messaging.Command.PropertyChanged"/> event with the specified argument.
            </summary>
            <param name="e">Argument of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.Messaging.Command.HasChanges">
            <summary>
            Indicates whether or not this message has changes since it was created or the last time
            <see cref="M:Kingo.Messaging.Command.AcceptChanges"/> was called.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Command.HasErrors">
            <summary>
            Indicates whether or not this message is valid.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Command.ErrorInfo">
            <summary>
            Returns the set of validation errors related to this message.
            </summary>
        </member>
        <member name="E:Kingo.Messaging.Command.PropertyChanging">
            <inheritdoc />
        </member>
        <member name="E:Kingo.Messaging.Command.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.IMemberConstraintBuilder`2">
            <summary>
            Represents a constraint for a specific member of a message.
            </summary>    
            <typeparam name="T">Type of the message the error messages are produced for.</typeparam>
            <typeparam name="TValueOut">Type of the result the value is converted to.</typeparam>
        </member>
        <member name="T:Kingo.Constraints.IMemberConstraintBuilder`1">
            <summary>
            Represents a builder of constraints for a specific member of a message.
            </summary>
            <typeparam name="T">Type of the object the error messages are produced for.</typeparam>
        </member>
        <member name="T:Kingo.Messaging.IErrorMessageWriter`1">
            <summary>
            When implemented by a class, represents a producer of error messages.
            </summary>
            <typeparam name="T">Type of the instances for which the error messages are produced.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.IErrorMessageWriter`1.WriteErrorMessages(`0,Kingo.Messaging.IErrorMessageReader)">
            <summary>
            Validates the specified <paramref name="instance"/> and writes all error messages to the specified <paramref name="reader"/>.
            </summary>
            <param name="instance">The instance that is validated.</param>
            <param name="reader">A reader or consumer of all error messages.</param> 
            <returns><c>true</c> if any errors were detected; otherwise <c>false</c>.</returns>      
            <exception cref="T:System.ArgumentNullException">
            <paramref name="instance"/> or <paramref name="reader"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="P:Kingo.Constraints.IMemberConstraintBuilder`1.Key">
            <summary>
            Returns a unique identifier of the constraint.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.IMemberConstraintBuilder`2.And``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            Selects a field or property of type <typeparamref name="TOther"/> from the current value of type <typeparamref name="TValueOut"/>
            with the intention to add some field- or property-specific constraints.
            </summary>
            <typeparam name="TOther">Type of the member.</typeparam>
            <param name="fieldOrProperty">The expression that selects the member.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fieldOrProperty"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="fieldOrProperty"/> is not a supported expression.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IMemberConstraintBuilder`2.And``1(System.Func{`0,`1,``0},System.String)">
            <summary>
            Selects a field or property of type <typeparamref name="TOther"/> from the current value of type <typeparamref name="TValueOut"/>
            with the intention to add some field- or property-specific constraints.
            </summary>
            <typeparam name="TOther">Type of the member.</typeparam>
            <param name="fieldOrProperty">The delegate that selects the member.</param>
            <param name="fieldOrPropertyName">Name of the member.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fieldOrProperty"/> or <paramref name="fieldOrPropertyName"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="fieldOrPropertyName"/> is not a valid identifier.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IMemberConstraintBuilder`2.And``1(System.Func{`0,`1,``0},Kingo.Identifier)">
            <summary>
            Selects a field or property of type <typeparamref name="TOther"/> from the current value of type <typeparamref name="TValueOut"/>
            with the intention to add some field- or property-specific constraints.
            </summary>
            <typeparam name="TOther">Type of the member.</typeparam>
            <param name="fieldOrProperty">The delegate that selects the member.</param>
            <param name="fieldOrPropertyName">Name of the member.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fieldOrProperty"/> or <paramref name="fieldOrPropertyName"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IMemberConstraintBuilder`2.And(System.Action{Kingo.Constraints.IMemberConstraintSet{`1}})">
            <summary>
            Descends one level down in the validation-hierarchy.
            </summary>
            <param name="innerConstraintFactory">
            The delegate that is used to define constraints on the properties or children of this member's value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="innerConstraintFactory"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IMemberConstraintBuilder`2.IsNotInstanceOf``1(System.String)">
            <summary>
            Verifies that this member's value is not an instance of <typeparamref name="TOther"/>.
            </summary>
            <typeparam name="TOther">Type to compare this member's type to.</typeparam>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>This member.</returns>        
        </member>
        <member name="M:Kingo.Constraints.IMemberConstraintBuilder`2.IsInstanceOf``1(System.String)">
            <summary>
            Verifies that this member'value is an instance of <typeparamref name="TOther"/>.
            </summary>
            <typeparam name="TOther">Type to compare this member's type to.</typeparam>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>A member casted to <typeparamref name="TOther"/>.</returns>        
        </member>
        <member name="M:Kingo.Constraints.IMemberConstraintBuilder`2.As``1">
            <summary>
            Casts the output of this member to an instance of the specified type <typeparamref name="TOther"/>.
            </summary>
            <typeparam name="TOther">Type to cast this member's type to.</typeparam>
            <returns>The casted member.</returns>
        </member>
        <member name="M:Kingo.Constraints.IMemberConstraintBuilder`2.HasItem``1(System.Int32,System.String)">
            <summary>
            Verifies that this member has an item at the specified <paramref name="index"/> and returns it.
            </summary>               
            <param name="index">Index of the element to select.</param>      
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>     
            <returns>A <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/> instance that contains the member's value.</returns>              
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IMemberConstraintBuilder`2.HasItem``1(System.String,System.String)">
            <summary>
            Verifies that this member has an item at the specified <paramref name="index"/> and returns it.
            </summary>               
            <param name="index">Index of the element to select.</param>      
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>     
            <returns>A <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/> instance that contains the member's value.</returns>              
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IMemberConstraintBuilder`2.HasItem``2(``1,System.String)">
            <summary>
            Verifies that this member has an item at the specified <paramref name="index"/> and returns it.
            </summary>               
            <param name="index">Index of the element to select.</param>      
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>     
            <returns>A <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/> instance that contains the member's value.</returns>              
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IMemberConstraintBuilder`2.HasItem``3(``1,``2,System.String)">
            <summary>
            Verifies that this member has an item at the specified indices and returns it.
            </summary>              
            <param name="indexA">First index of the element to select.</param>      
            <param name="indexB">Second index of the element to select.</param>      
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>     
            <returns>A <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/> instance that contains the member's value.</returns>              
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IMemberConstraintBuilder`2.HasItem``2(System.Func{`0,``1},System.String)">
            <summary>
            Verifies that this member has an item at the specified <paramref name="indexFactory"/> and returns it.
            </summary>               
            <param name="indexFactory">Index of the element to select.</param>      
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>     
            <returns>A <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/> instance that contains the member's value.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexFactory"/> is <c>null</c>.
            </exception>            
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IMemberConstraintBuilder`2.HasItem``3(System.Func{`0,``1},System.Func{`0,``2},System.String)">
            <summary>
            Verifies that this member has an item at the specified indices and returns it.
            </summary>              
            <param name="indexAFactory">First index of the element to select.</param>      
            <param name="indexBFactory">Second index of the element to select.</param>      
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>     
            <returns>A <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/> instance that contains the member's value.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexAFactory"/> or <paramref name="indexBFactory"/> is <c>null</c>.
            </exception>               
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IMemberConstraintBuilder`2.HasItem``1(Kingo.Constraints.IndexListFactory{`0},System.String)">
            <summary>
            Verifies that this member has an item at the indicies that are provided by the specified <paramref name="indexListFactory"/>.
            </summary>               
            <param name="indexListFactory">A list of delegates that return the indices of the element to select.</param>      
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>     
            <returns>A <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/> instance that contains the member's value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexListFactory"/> is <c>null</c>.
            </exception>       
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IMemberConstraintBuilder`2.Satisfies(System.Predicate{`1},System.String,System.Object)">
            <summary>
            Applies the specified <paramref name="constraint"/>.
            </summary>
            <param name="constraint">The constraint to apply.</param>   
            <param name="errorMessage">Error message of the constraint.</param>  
            <param name="errorMessageArgument">
            The object that is used to format the error message on behalf of this constraint.
            </param>               
            <returns>A <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/> that has applied the specified <paramref name="constraint"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IMemberConstraintBuilder`2.Satisfies(Kingo.Constraints.IConstraint{`1})">
            <summary>
            Applies the specified <paramref name="constraint"/>.
            </summary>
            <param name="constraint">The constraint to apply.</param>                
            <returns>A <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/> that has applied the specified <paramref name="constraint"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IMemberConstraintBuilder`2.Satisfies(System.Func{`0,Kingo.Constraints.IConstraint{`1}})">
            <summary>
            Applies the constraint that is created by the specified <paramref name="constraintFactory"/>.
            </summary>
            <param name="constraintFactory">A delegate used to create the constraint to apply.</param>                
            <returns>A <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/> that has applied the specified <paramref name="constraintFactory"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraintFactory"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IMemberConstraintBuilder`2.Satisfies``1(Kingo.Constraints.IFilter{`1,``0})">
            <summary>
            Applies the specified <paramref name="constraint"/>.
            </summary>
            <param name="constraint">The constraint to apply.</param>                
            <returns>A <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/> that has applied the specified <paramref name="constraint"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IMemberConstraintBuilder`2.Satisfies``1(System.Func{`0,Kingo.Constraints.IFilter{`1,``0}})">
            <summary>
            Applies the constraint that is created by the specified <paramref name="constraintFactory"/>.
            </summary>
            <param name="constraintFactory">A delegate used to create the constraint to apply.</param>                
            <returns>A <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/> that has applied the specified <paramref name="constraintFactory"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraintFactory"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Constraints.BasicConstraints">
            <summary>
            Contains a set of extension methods specific for members of type <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/>.
            </summary>
            <summary>
            Contains a set of extension methods specific for members of type <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/>.
            </summary>
            <summary>
            Contains a set of extension methods specific for members of type <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/>.
            </summary>
            <summary>
            Contains a set of extension methods specific for members of type <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/>.
            </summary>
            <summary>
            Contains a set of extension methods specific for members of type <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/>.
            </summary>
            <summary>
            Contains a set of extension methods specific for members of type <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/>.
            </summary>
            <summary>
            Contains a set of extension methods specific for members of type <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/>.
            </summary>
            <summary>
            Contains a set of extension methods specific for members of type <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/>.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.Apply``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},Kingo.Constraints.IConstraint{``1})">
            <summary>
            Applies the specified <paramref name="constraint"/>.
            </summary>
            <param name="member">The member to apply the constraint to.</param>
            <param name="constraint">The constraint to apply.</param>                
            <returns>A <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/> that has applied the specified <paramref name="constraint"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.Apply``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,Kingo.Constraints.IConstraint{``1}})">
            <summary>
            Applies the constraint that is created by the specified <paramref name="constraintFactory"/>.
            </summary>
            <param name="member">The member to apply the constraint to.</param>
            <param name="constraintFactory">A delegate used to create the constraint to apply.</param>                
            <returns>A <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/> that has applied the specified <paramref name="constraintFactory"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="constraintFactory"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.Apply``3(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},Kingo.Constraints.IFilter{``1,``2})">
            <summary>
            Applies the specified <paramref name="constraint"/>.
            </summary>
            <param name="member">The member to apply the constraint to.</param>
            <param name="constraint">The constraint to apply.</param>                
            <returns>A <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/> that has applied the specified <paramref name="constraint"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.Apply``3(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,Kingo.Constraints.IFilter{``1,``2}})">
            <summary>
            Applies the constraint that is created by the specified <paramref name="constraintFactory"/>.
            </summary>
            <param name="member">The member to apply the constraint to.</param>
            <param name="constraintFactory">A delegate used to create the constraint to apply.</param>                
            <returns>A <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/> that has applied the specified <paramref name="constraintFactory"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="constraintFactory"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsNotEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Object,System.String)">
            <summary>
            Verifies that the member's value is not equal to <paramref name="other"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="other">The instance to compare the member's value to.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>        
            <returns>A member that has been merged with the specified member.</returns>    
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>    
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsNotEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},``1,System.String)">
            <summary>
            Verifies that the member's value is not equal to <paramref name="other"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="other">The instance to compare the member's value to.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>        
            <returns>A member that has been merged with the specified member.</returns>    
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>    
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsNotEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},``1,System.Collections.Generic.IEqualityComparer{``1},System.String)">
            <summary>
            Verifies that the member's value is not equal to <paramref name="other"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="other">The instance to compare the member's value to.</param>
            <param name="comparer">The comparer that is used to perform the comparison.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>     
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>    
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>     
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsNotEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.IEquatable{``1},System.String)">
            <summary>
            Verifies that the member's value is not equal to <paramref name="other"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="other">The instance to compare the member's value to.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>   
            <returns>A member that has been merged with the specified member.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception> 
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>           
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsNotEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,System.Object},System.String)">
            <summary>
            Verifies that the member's value is not equal to <paramref name="otherFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="otherFactory">Delegate that returns the instance to compare the member's value to.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>        
            <returns>A member that has been merged with the specified member.</returns>    
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="otherFactory"/> is <c>null</c>.
            </exception>    
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsNotEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,``1},System.String)">
            <summary>
            Verifies that the member's value is not equal to <paramref name="otherFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="otherFactory">Delegate that returns the instance to compare the member's value to.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>        
            <returns>A member that has been merged with the specified member.</returns>    
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="otherFactory"/> is <c>null</c>.
            </exception>    
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsNotEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.String)">
            <summary>
            Verifies that the member's value is not equal to <paramref name="otherFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="otherFactory">Delegate that returns the instance to compare the member's value to.</param>
            <param name="comparer">The comparer that is used to perform the comparison.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>     
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="otherFactory"/> is <c>null</c>.
            </exception>    
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>     
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsNotEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,System.IEquatable{``1}},System.String)">
            <summary>
            Verifies that the member's value is not equal to <paramref name="otherFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="otherFactory">Delegate that returns the instance to compare the member's value to.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>   
            <returns>A member that has been merged with the specified member.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="otherFactory"/> is <c>null</c>.
            </exception> 
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>           
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Object,System.String)">
            <summary>
            Verifies that the member's value is equal to <paramref name="other"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="other">The instance to compare the member's value to.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>   
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>          
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception> 
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},``1,System.String)">
            <summary>
            Verifies that the member's value is equal to <paramref name="other"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="other">The instance to compare the member's value to.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>        
            <returns>A member that has been merged with the specified member.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>      
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception> 
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},``1,System.Collections.Generic.IEqualityComparer{``1},System.String)">
            <summary>
            Verifies that the member's value is equal to <paramref name="other"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="other">The instance to compare the member's value to.</param>
            <param name="comparer">The comparer that is used to perform the comparison.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>        
            <returns>A member that has been merged with the specified member.</returns>    
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>    
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.IEquatable{``1},System.String)">
            <summary>
            Verifies that the member's value is equal to <paramref name="other"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="other">The instance to compare the member's value to.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param> 
            <returns>A member that has been merged with the specified member.</returns>     
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>      
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>    
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,System.Object},System.String)">
            <summary>
            Verifies that the member's value is equal to <paramref name="otherFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="otherFactory">Delegate that returns the instance to compare the member's value to.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>   
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="otherFactory"/> is <c>null</c>.
            </exception>          
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception> 
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,``1},System.String)">
            <summary>
            Verifies that the member's value is equal to <paramref name="otherFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="otherFactory">Delegate that returns the instance to compare the member's value to.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>        
            <returns>A member that has been merged with the specified member.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="otherFactory"/> is <c>null</c>.
            </exception>      
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception> 
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.String)">
            <summary>
            Verifies that the member's value is equal to <paramref name="otherFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="otherFactory">Delegate that returns the instance to compare the member's value to.</param>
            <param name="comparer">The comparer that is used to perform the comparison.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>        
            <returns>A member that has been merged with the specified member.</returns>    
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="otherFactory"/> is <c>null</c>.
            </exception>    
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,System.IEquatable{``1}},System.String)">
            <summary>
            Verifies that the member's value is equal to <paramref name="otherFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="otherFactory">Delegate that returns the instance to compare the member's value to.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param> 
            <returns>A member that has been merged with the specified member.</returns>     
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>      
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>    
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsGreaterThan``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},``1,System.String)">
            <summary>
            Verifies that the member is greater than <paramref name="other"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="other">The instance to compare the member's value to.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>    
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>          
            <exception cref="T:System.ArgumentException">
            <paramref name="other"/> does not implement the
            <see cref="T:System.IComparable`1"/> or <see cref="T:System.IComparable"/> interfaces
            - or -        
            <paramref name="errorMessage"/> is not in a correct format.        
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsGreaterThan``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},``1,System.Collections.Generic.IComparer{``1},System.String)">
            <summary>
            Verifies that the member is greater than <paramref name="other"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="other">The instance to compare the member's value to.</param>
            <param name="comparer">The comparer that is used to perform the comparison.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>    
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>          
            <exception cref="T:System.ArgumentException">
            <paramref name="comparer"/> is <c>null</c> and <paramref name="other"/> does not implement the
            <see cref="T:System.IComparable`1"/> or <see cref="T:System.IComparable"/> interfaces
            - or -        
            <paramref name="errorMessage"/> is not in a correct format.        
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsGreaterThan``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.IComparable{``1},System.String)">
            <summary>
            Verifies that the member is greater than <paramref name="other"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="other">The instance to compare the member's value to.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>     
            <returns>A member that has been merged with the specified member.</returns>   
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>          
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception> 
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsGreaterThan``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,``1},System.String)">
            <summary>
            Verifies that the member is greater than <paramref name="otherFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="otherFactory">Delegate that returns the instance to compare the member's value to.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>    
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="otherFactory"/> is <c>null</c>.
            </exception>          
            <exception cref="T:System.ArgumentException">
            <paramref name="otherFactory"/> does not implement the
            <see cref="T:System.IComparable`1"/> or <see cref="T:System.IComparable"/> interfaces
            - or -        
            <paramref name="errorMessage"/> is not in a correct format.        
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsGreaterThan``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.String)">
            <summary>
            Verifies that the member is greater than <paramref name="otherFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="otherFactory">Delegate that returns the instance to compare the member's value to.</param>
            <param name="comparer">The comparer that is used to perform the comparison.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>    
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="otherFactory"/> is <c>null</c>.
            </exception>          
            <exception cref="T:System.ArgumentException">
            <paramref name="comparer"/> is <c>null</c> and <paramref name="otherFactory"/> does not implement the
            <see cref="T:System.IComparable`1"/> or <see cref="T:System.IComparable"/> interfaces
            - or -        
            <paramref name="errorMessage"/> is not in a correct format.        
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsGreaterThan``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,System.IComparable{``1}},System.String)">
            <summary>
            Verifies that the member is greater than <paramref name="otherFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="otherFactory">Delegate that returns the instance to compare the member's value to.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>     
            <returns>A member that has been merged with the specified member.</returns>   
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="otherFactory"/> is <c>null</c>.
            </exception>          
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception> 
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsGreaterThanOrEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},``1,System.String)">
            <summary>
            Verifies that the member is greater than or equal to <paramref name="other"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="other">The instance to compare the member's value to.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>        
            <returns>This member.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>        
            <exception cref="T:System.ArgumentException">
            <paramref name="other"/> does not implement the
            <see cref="T:System.IComparable`1"/> or <see cref="T:System.IComparable"/> interfaces
            - or -        
            <paramref name="errorMessage"/> is not in a correct format.        
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsGreaterThanOrEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},``1,System.Collections.Generic.IComparer{``1},System.String)">
            <summary>
            Verifies that the member is greater than or equal to <paramref name="other"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="other">The instance to compare the member's value to.</param>
            <param name="comparer">The comparer that is used to perform the comparison.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>        
            <returns>This member.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>        
            <exception cref="T:System.ArgumentException">
            <paramref name="comparer"/> is <c>null</c> and <paramref name="other"/> does not implement the
            <see cref="T:System.IComparable`1"/> or <see cref="T:System.IComparable"/> interfaces
            - or -        
            <paramref name="errorMessage"/> is not in a correct format.        
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsGreaterThanOrEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.IComparable{``1},System.String)">
            <summary>
            Verifies that the member is equal to <paramref name="other"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="other">The instance to compare the member's value to.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>  
            <returns>A member that has been merged with the specified member.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>     
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>        
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsGreaterThanOrEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,``1},System.String)">
            <summary>
            Verifies that the member is greater than or equal to <paramref name="otherFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="otherFactory">Delegate that returns the instance to compare the member's value to.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>        
            <returns>This member.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="otherFactory"/> is <c>null</c>.
            </exception>        
            <exception cref="T:System.ArgumentException">
            <paramref name="otherFactory"/> does not implement the
            <see cref="T:System.IComparable`1"/> or <see cref="T:System.IComparable"/> interfaces
            - or -        
            <paramref name="errorMessage"/> is not in a correct format.        
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsGreaterThanOrEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.String)">
            <summary>
            Verifies that the member is greater than or equal to <paramref name="otherFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="otherFactory">Delegate that returns the instance to compare the member's value to.</param>
            <param name="comparer">The comparer that is used to perform the comparison.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>        
            <returns>This member.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="otherFactory"/> is <c>null</c>.
            </exception>        
            <exception cref="T:System.ArgumentException">
            <paramref name="comparer"/> is <c>null</c> and <paramref name="otherFactory"/> does not implement the
            <see cref="T:System.IComparable`1"/> or <see cref="T:System.IComparable"/> interfaces
            - or -        
            <paramref name="errorMessage"/> is not in a correct format.        
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsGreaterThanOrEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,System.IComparable{``1}},System.String)">
            <summary>
            Verifies that the member is equal to <paramref name="otherFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="otherFactory">Delegate that returns the instance to compare the member's value to.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>  
            <returns>A member that has been merged with the specified member.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="otherFactory"/> is <c>null</c>.
            </exception>     
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>        
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsNotInstanceOf``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Type,System.String)">
            <summary>
            Verifies that this member's value is not an instance of <paramref name="type"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="type">The type to compare this member's type to.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>This member.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="type"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>  
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsNotInstanceOf``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,System.Type},System.String)">
            <summary>
            Verifies that this member's value is not an instance of <paramref name="typeFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="typeFactory">Delegate that returns the type to compare this member's type to.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>This member.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="typeFactory"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>  
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.NewIsNotInstanceOfConstraint``1(System.Type,System.String)">
            <summary>
            Creates and returns a constraint that checks whether or not a certain value is of the specified <paramref name="type"/>.
            </summary>
            <typeparam name="TValue">Type of the value to check.</typeparam>
            <param name="type">Type that the value is compared to.</param>
            <param name="errorMessage">Error message of the constraint.</param>
            <returns>A new constraint.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsInstanceOf``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Type,System.String)">
            <summary>
            Verifies that the member's value is an instance of <paramref name="type"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="type">The type to compare the member's type to.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>This member.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="type"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>  
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsInstanceOf``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,System.Type},System.String)">
            <summary>
            Verifies that the member's value is an instance of <paramref name="typeFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="typeFactory">Delegate that returns the type to compare the member's type to.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>This member.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="typeFactory"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>  
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.NewIsInstanceOfConstraint``1(System.Type,System.String)">
            <summary>
            Creates and returns a constraint that checks whether or not a certain value is of the specified <paramref name="type"/>.
            </summary>
            <typeparam name="TValue">Type of the value to check.</typeparam>
            <param name="type">Type that the value is compared to or cast to.</param>
            <param name="errorMessage">Error message of the constraint.</param>
            <returns>A new constraint.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsNotNull``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.String)">
            <summary>
            Verifies whether or not the member's value is not <c>null</c>.
            </summary>     
            <param name="member">A member.</param>   
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>A member that has been merged with the specified member.</returns>       
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception> 
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsNull``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.String)">
            <summary>
            Verifies whether or not the member's value is <c>null</c>.
            </summary> 
            <param name="member">A member.</param> 
            <param name="errorMessage">Error message to return when the member fails.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>        
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsNotSameInstanceAs``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Object,System.String)">
            <summary>
            Verifies that the member's value does not refer to the same instance as <paramref name="other"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="other">The instance to compare the member's reference to.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>A member that has been merged with the specified member.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>       
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsNotSameInstanceAs``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,System.Object},System.String)">
            <summary>
            Verifies that the member's value does not refer to the same instance as <paramref name="otherFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="otherFactory">Delegate that returns the instance to compare the member's reference to.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>A member that has been merged with the specified member.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="otherFactory"/> is <c>null</c>.
            </exception>       
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsSameInstanceAs``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Object,System.String)">
            <summary>
            Verifies that the member's value refers to the same instance as <paramref name="other"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="other">The instance to compare the member's reference to.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>A member that has been merged with the specified member.</returns>     
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>   
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsSameInstanceAs``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,System.Object},System.String)">
            <summary>
            Verifies that the member's value refers to the same instance as <paramref name="otherFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="otherFactory">Delegate that returns the instance to compare the member's reference to.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>A member that has been merged with the specified member.</returns>     
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="otherFactory"/> is <c>null</c>.
            </exception>   
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsSmallerThan``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},``1,System.String)">
            <summary>
            Verifies that the member's value is smaller than <paramref name="other"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="other">The instance to compare the member's value to.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>  
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>            
            <exception cref="T:System.ArgumentException">
            <paramref name="other"/> does not implement the
            <see cref="T:System.IComparable`1"/> or <see cref="T:System.IComparable"/> interfaces
            - or -        
            <paramref name="errorMessage"/> is not in a correct format.        
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsSmallerThan``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},``1,System.Collections.Generic.IComparer{``1},System.String)">
            <summary>
            Verifies that the member's value is smaller than <paramref name="other"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="other">The instance to compare the member's value to.</param>
            <param name="comparer">The comparer that is used to perform the comparison.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>  
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>            
            <exception cref="T:System.ArgumentException">
            <paramref name="comparer"/> is <c>null</c> and <paramref name="other"/> does not implement the
            <see cref="T:System.IComparable`1"/> or <see cref="T:System.IComparable"/> interfaces
            - or -        
            <paramref name="errorMessage"/> is not in a correct format.        
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsSmallerThan``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.IComparable{``1},System.String)">
            <summary>
            Verifies that the member's value is smaller than <paramref name="other"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="other">The instance to compare the member's value to.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>  
            <returns>A member that has been merged with the specified member.</returns>   
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>           
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsSmallerThan``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,``1},System.String)">
            <summary>
            Verifies that the member's value is smaller than <paramref name="otherFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="otherFactory">Delegate that returns the instance to compare the member's value to.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>  
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>            
            <exception cref="T:System.ArgumentException">
            <paramref name="otherFactory"/> does not implement the
            <see cref="T:System.IComparable`1"/> or <see cref="T:System.IComparable"/> interfaces
            - or -        
            <paramref name="errorMessage"/> is not in a correct format.        
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsSmallerThan``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.String)">
            <summary>
            Verifies that the member's value is smaller than <paramref name="otherFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="otherFactory">Delegate that returns the instance to compare the member's value to.</param>
            <param name="comparer">The comparer that is used to perform the comparison.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>  
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>            
            <exception cref="T:System.ArgumentException">
            <paramref name="comparer"/> is <c>null</c> and <paramref name="otherFactory"/> does not implement the
            <see cref="T:System.IComparable`1"/> or <see cref="T:System.IComparable"/> interfaces
            - or -        
            <paramref name="errorMessage"/> is not in a correct format.        
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsSmallerThan``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,System.IComparable{``1}},System.String)">
            <summary>
            Verifies that the member's value is smaller than <paramref name="otherFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="otherFactory">Delegate that returns the instance to compare the member's value to.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>  
            <returns>A member that has been merged with the specified member.</returns>   
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="otherFactory"/> is <c>null</c>.
            </exception>           
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsSmallerThanOrEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},``1,System.String)">
            <summary>
            Verifies that the member's value is smaller than or equal to <paramref name="other"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="other">The instance to compare the member's value to.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>    
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>          
            <exception cref="T:System.ArgumentException">
            <paramref name="other"/> does not implement the
            <see cref="T:System.IComparable`1"/> or <see cref="T:System.IComparable"/> interfaces
            - or -        
            <paramref name="errorMessage"/> is not in a correct format.        
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsSmallerThanOrEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},``1,System.Collections.Generic.IComparer{``1},System.String)">
            <summary>
            Verifies that the member's value is smaller than or equal to <paramref name="other"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="other">The instance to compare the member's value to.</param>
            <param name="comparer">The comparer that is used to perform the comparison.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>    
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>          
            <exception cref="T:System.ArgumentException">
            <paramref name="comparer"/> is <c>null</c> and <paramref name="other"/> does not implement the
            <see cref="T:System.IComparable`1"/> or <see cref="T:System.IComparable"/> interfaces
            - or -        
            <paramref name="errorMessage"/> is not in a correct format.        
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsSmallerThanOrEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.IComparable{``1},System.String)">
            <summary>
            Verifies that the member's value is smaller than or equal to <paramref name="other"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="other">The instance to compare the member's value to.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>        
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>    
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>  
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsSmallerThanOrEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,``1},System.String)">
            <summary>
            Verifies that the member's value is smaller than or equal to <paramref name="otherFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="otherFactory">Delegate that returns the instance to compare the member's value to.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>    
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="otherFactory"/> is <c>null</c>.
            </exception>          
            <exception cref="T:System.ArgumentException">
            <paramref name="otherFactory"/> does not implement the
            <see cref="T:System.IComparable`1"/> or <see cref="T:System.IComparable"/> interfaces
            - or -        
            <paramref name="errorMessage"/> is not in a correct format.        
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsSmallerThanOrEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.String)">
            <summary>
            Verifies that the member's value is smaller than or equal to <paramref name="otherFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="otherFactory">Delegate that returns the instance to compare the member's value to.</param>
            <param name="comparer">The comparer that is used to perform the comparison.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>    
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="otherFactory"/> is <c>null</c>.
            </exception>          
            <exception cref="T:System.ArgumentException">
            <paramref name="comparer"/> is <c>null</c> and <paramref name="otherFactory"/> does not implement the
            <see cref="T:System.IComparable`1"/> or <see cref="T:System.IComparable"/> interfaces
            - or -        
            <paramref name="errorMessage"/> is not in a correct format.        
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsSmallerThanOrEqualTo``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,System.IComparable{``1}},System.String)">
            <summary>
            Verifies that the member's value is smaller than or equal to <paramref name="otherFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="otherFactory">Delegate that returns the instance to compare the member's value to.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>        
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="otherFactory"/> is <c>null</c>.
            </exception>    
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>  
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsNotInRange``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},``1,``1,System.String)">
            <summary>
            Verifies that the member's value does not lie within the specified range.
            </summary>
            <param name="member">A member.</param> 
            <param name="left">The lower boundary of the range.</param>
            <param name="right">The upper boundary of the range.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>    
            <returns>A member that has been merged with the specified member.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>           
            <exception cref="T:System.ArgumentException">
            <paramref name="left"/> and <paramref name="right"/> do not represent a valid range        
            - or -
            the specified instances do not implement the <see cref="T:System.IComparable`1"/> interface
            - or -
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsNotInRange``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},``1,``1,Kingo.RangeOptions,System.String)">
            <summary>
            Verifies that the member's value does not lie within the specified range.
            </summary>
            <param name="member">A member.</param> 
            <param name="left">The lower boundary of the range.</param>
            <param name="right">The upper boundary of the range.</param>
            <param name="options">
            The options that define whether or not <paramref name="left"/> and/or <paramref name="right"/> are part of the range themselves.
            </param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>  
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>            
            <exception cref="T:System.ArgumentException">
            <paramref name="left"/> and <paramref name="right"/> do not represent a valid range
            - or -
            both are equal and <paramref name="options"/> specifies at least one exclusive boundary
            - or -
            the specified instances do not implement the <see cref="T:System.IComparable`1"/> interface
            - or -
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsNotInRange``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},``1,``1,System.Collections.Generic.IComparer{``1},System.String)">
            <summary>
            Verifies that the member's value does not lie within the specified range.
            </summary>
            <param name="member">A member.</param> 
            <param name="left">The lower boundary of the range.</param>
            <param name="right">The upper boundary of the range.</param>        
            <param name="comparer">The comparer that is used to perform the comparison.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param> 
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>             
            <exception cref="T:System.ArgumentException">
            <paramref name="left"/> and <paramref name="right"/> do not represent a valid range        
            - or -
            <paramref name="comparer"/> is <c>null</c> and the specified instances do not implement the <see cref="T:System.IComparable`1"/> interface
            - or -
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsNotInRange``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},``1,``1,System.Collections.Generic.IComparer{``1},Kingo.RangeOptions,System.String)">
            <summary>
            Verifies that the member's value does not lie within the specified range.
            </summary>
            <param name="member">A member.</param> 
            <param name="left">The lower boundary of the range.</param>
            <param name="right">The upper boundary of the range.</param>        
            <param name="comparer">The comparer that is used to perform the comparison.</param>
            <param name="options">
            The options that define whether or not <paramref name="left"/> and/or <paramref name="right"/> are part of the range themselves.
            </param> 
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param> 
            <returns>A member that has been merged with the specified member.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>              
            <exception cref="T:System.ArgumentException">
            <paramref name="left"/> and <paramref name="right"/> do not represent a valid range
            - or -
            both are equal and <paramref name="options"/> specifies at least one exclusive boundary
            - or -
            <paramref name="comparer"/> is <c>null</c> and the specified instances do not implement the <see cref="T:System.IComparable`1"/> interface
            - or -
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsNotInRange``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},Kingo.IRange{``1},System.String)">
            <summary>
            Verifies that the member's value does not lie within the specified <paramref name="range"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="range">A range of values.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param> 
            <returns>A member that has been merged with the specified member.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>      
            <exception cref="T:System.ArgumentNullException">
            <paramref name="range"/> is <c>null</c>.
            </exception>      
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>  
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsNotInRange``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,``1},System.Func{``0,``1},System.String)">
            <summary>
            Verifies that the member's value does not lie within the specified range.
            </summary>
            <param name="member">A member.</param> 
            <param name="leftFactory">Delegate that returns the lower boundary of the range.</param>
            <param name="rightFactory">Delegate that returns the upper boundary of the range.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>    
            <returns>A member that has been merged with the specified member.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/>, <paramref name="leftFactory"/> or <paramref name="rightFactory"/> is <c>null</c>.
            </exception>           
            <exception cref="T:System.ArgumentException">             
            <paramref name="errorMessage"/> is not in a correct format.        
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsNotInRange``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,``1},System.Func{``0,``1},Kingo.RangeOptions,System.String)">
            <summary>
            Verifies that the member's value does not lie within the specified range.
            </summary>
            <param name="member">A member.</param> 
            <param name="leftFactory">Delegate that returns the lower boundary of the range.</param>
            <param name="rightFactory">Delegate that returns the upper boundary of the range.</param>
            <param name="options">
            The options that define whether or not <paramref name="leftFactory"/> and/or <paramref name="rightFactory"/> are part of the range themselves.
            </param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>  
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/>, <paramref name="leftFactory"/> or <paramref name="rightFactory"/> is <c>null</c>.
            </exception>            
            <exception cref="T:System.ArgumentException">             
            <paramref name="errorMessage"/> is not in a correct format.        
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsNotInRange``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,``1},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.String)">
            <summary>
            Verifies that the member's value does not lie within the specified range.
            </summary>
            <param name="member">A member.</param> 
            <param name="leftFactory">Delegate that returns the lower boundary of the range.</param>
            <param name="rightFactory">Delegate that returns the upper boundary of the range.</param>        
            <param name="comparer">The comparer that is used to perform the comparison.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param> 
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/>, <paramref name="leftFactory"/> or <paramref name="rightFactory"/> is <c>null</c>.
            </exception>             
            <exception cref="T:System.ArgumentException">             
            <paramref name="errorMessage"/> is not in a correct format.        
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsNotInRange``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,``1},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},Kingo.RangeOptions,System.String)">
            <summary>
            Verifies that the member's value does not lie within the specified range.
            </summary>
            <param name="member">A member.</param> 
            <param name="leftFactory">Delegate that returns the lower boundary of the range.</param>
            <param name="rightFactory">Delegate that returns the upper boundary of the range.</param>        
            <param name="comparer">The comparer that is used to perform the comparison.</param>
            <param name="options">
            The options that define whether or not <paramref name="leftFactory"/> and/or <paramref name="rightFactory"/> are part of the range themselves.
            </param> 
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param> 
            <returns>A member that has been merged with the specified member.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/>, <paramref name="leftFactory"/> or <paramref name="rightFactory"/> is <c>null</c>.
            </exception>              
            <exception cref="T:System.ArgumentException">             
            <paramref name="errorMessage"/> is not in a correct format.        
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsNotInRange``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,Kingo.IRange{``1}},System.String)">
            <summary>
            Verifies that the member's value does not lie within the specified <paramref name="rangeFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="rangeFactory">Delegate that returns a range of values.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param> 
            <returns>A member that has been merged with the specified member.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="rangeFactory"/> is <c>null</c>.
            </exception>      
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rangeFactory"/> is <c>null</c>.
            </exception>      
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>  
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsInRange``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},``1,``1,System.String)">
            <summary>
            Verifies that the member's value lies within the specified range.
            </summary>
            <param name="member">A member.</param> 
            <param name="left">The lower boundary of the range.</param>
            <param name="right">The upper boundary of the range.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>    
            <returns>A member that has been merged with the specified member.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>           
            <exception cref="T:System.ArgumentException">
            <paramref name="left"/> and <paramref name="right"/> do not represent a valid range        
            - or -
            the specified instances do not implement the <see cref="T:System.IComparable`1"/> interface
            - or -
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsInRange``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},``1,``1,Kingo.RangeOptions,System.String)">
            <summary>
            Verifies that the member's value lies within the specified range.
            </summary>
            <param name="member">A member.</param> 
            <param name="left">The lower boundary of the range.</param>
            <param name="right">The upper boundary of the range.</param>
            <param name="options">
            The options that define whether or not <paramref name="left"/> and/or <paramref name="right"/> are part of the range themselves.
            </param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>  
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>            
            <exception cref="T:System.ArgumentException">
            <paramref name="left"/> and <paramref name="right"/> do not represent a valid range
            - or -
            both are equal and <paramref name="options"/> specifies at least one exclusive boundary
            - or -
            the specified instances do not implement the <see cref="T:System.IComparable`1"/> interface
            - or -
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsInRange``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},``1,``1,System.Collections.Generic.IComparer{``1},System.String)">
            <summary>
            Verifies that the member's value lies within the specified range.
            </summary>
            <param name="member">A member.</param> 
            <param name="left">The lower boundary of the range.</param>
            <param name="right">The upper boundary of the range.</param>        
            <param name="comparer">The comparer that is used to perform the comparison.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param> 
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>             
            <exception cref="T:System.ArgumentException">
            <paramref name="left"/> and <paramref name="right"/> do not represent a valid range        
            - or -
            <paramref name="comparer"/> is <c>null</c> and the specified instances do not implement the <see cref="T:System.IComparable`1"/> interface
            - or -
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsInRange``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},``1,``1,System.Collections.Generic.IComparer{``1},Kingo.RangeOptions,System.String)">
            <summary>
            Verifies that the member's value lies within the specified range.
            </summary>
            <param name="member">A member.</param> 
            <param name="left">The lower boundary of the range.</param>
            <param name="right">The upper boundary of the range.</param>        
            <param name="comparer">The comparer that is used to perform the comparison.</param>
            <param name="options">
            The options that define whether or not <paramref name="left"/> and/or <paramref name="right"/> are part of the range themselves.
            </param> 
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param> 
            <returns>A member that has been merged with the specified member.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>              
            <exception cref="T:System.ArgumentException">
            <paramref name="left"/> and <paramref name="right"/> do not represent a valid range
            - or -
            both are equal and <paramref name="options"/> specifies at least one exclusive boundary
            - or -
            <paramref name="comparer"/> is <c>null</c> and the specified instances do not implement the <see cref="T:System.IComparable`1"/> interface
            - or -
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsInRange``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},Kingo.IRange{``1},System.String)">
            <summary>
            Verifies that the member's value lies within the specified <paramref name="range"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="range">A range of values.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param> 
            <returns>A member that has been merged with the specified member.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>      
            <exception cref="T:System.ArgumentNullException">
            <paramref name="range"/> is <c>null</c>.
            </exception>      
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>  
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsInRange``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,``1},System.Func{``0,``1},System.String)">
            <summary>
            Verifies that the member's value lies within the specified range.
            </summary>
            <param name="member">A member.</param> 
            <param name="leftFactory">Delegate that returns the lower boundary of the range.</param>
            <param name="rightFactory">Delegate that returns the upper boundary of the range.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>    
            <returns>A member that has been merged with the specified member.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/>, <paramref name="leftFactory"/> or <paramref name="rightFactory"/> is <c>null</c>.
            </exception>           
            <exception cref="T:System.ArgumentException">             
            <paramref name="errorMessage"/> is not in a correct format.        
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsInRange``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,``1},System.Func{``0,``1},Kingo.RangeOptions,System.String)">
            <summary>
            Verifies that the member's value lies within the specified range.
            </summary>
            <param name="member">A member.</param> 
            <param name="leftFactory">Delegate that returns the lower boundary of the range.</param>
            <param name="rightFactory">Delegate that returns the upper boundary of the range.</param>
            <param name="options">
            The options that define whether or not <paramref name="leftFactory"/> and/or <paramref name="rightFactory"/> are part of the range themselves.
            </param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>  
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/>, <paramref name="leftFactory"/> or <paramref name="rightFactory"/> is <c>null</c>.
            </exception>            
            <exception cref="T:System.ArgumentException">             
            <paramref name="errorMessage"/> is not in a correct format.        
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsInRange``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,``1},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.String)">
            <summary>
            Verifies that the member's value lies within the specified range.
            </summary>
            <param name="member">A member.</param> 
            <param name="leftFactory">Delegate that returns the lower boundary of the range.</param>
            <param name="rightFactory">Delegate that returns the upper boundary of the range.</param>        
            <param name="comparer">The comparer that is used to perform the comparison.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param> 
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/>, <paramref name="leftFactory"/> or <paramref name="rightFactory"/> is <c>null</c>.
            </exception>             
            <exception cref="T:System.ArgumentException">             
            <paramref name="errorMessage"/> is not in a correct format.        
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsInRange``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,``1},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},Kingo.RangeOptions,System.String)">
            <summary>
            Verifies that the member's value lies within the specified range.
            </summary>
            <param name="member">A member.</param> 
            <param name="leftFactory">Delegate that returns the lower boundary of the range.</param>
            <param name="rightFactory">Delegate that returns the upper boundary of the range.</param>        
            <param name="comparer">The comparer that is used to perform the comparison.</param>
            <param name="options">
            The options that define whether or not <paramref name="leftFactory"/> and/or <paramref name="rightFactory"/> are part of the range themselves.
            </param> 
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param> 
            <returns>A member that has been merged with the specified member.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/>, <paramref name="leftFactory"/> or <paramref name="rightFactory"/> is <c>null</c>.
            </exception>              
            <exception cref="T:System.ArgumentException">             
            <paramref name="errorMessage"/> is not in a correct format.        
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BasicConstraints.IsInRange``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.Func{``0,Kingo.IRange{``1}},System.String)">
            <summary>
            Verifies that the member's value lies within the specified <paramref name="rangeFactory"/>.
            </summary>
            <param name="member">A member.</param> 
            <param name="rangeFactory">Delegate that returns a range of values.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param> 
            <returns>A member that has been merged with the specified member.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="rangeFactory"/> is <c>null</c>.
            </exception>      
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rangeFactory"/> is <c>null</c>.
            </exception>      
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>  
        </member>
        <member name="T:Kingo.Constraints.CollectionConstraints">
            <summary>
            Contains a set of extension methods specific for members of type <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/>.
            </summary>
            <summary>
            Contains a set of extension methods specific for members of type <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/>.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.CollectionConstraints.IsNotNullOrEmpty``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.String)">
            <summary>
            Verifies that the specified collection has at least one element.
            </summary>       
            <param name="member">A member.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>     
            <returns>A <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/> instance that contains the member's value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.CollectionConstraints.IsNullOrEmpty``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.String)">
            <summary>
            Verifies that the specified collection is either <c>null</c> or empty.
            </summary>        
            <param name="member">A member.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>     
            <returns>A <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/> instance that contains the member's value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.CollectionConstraints.Length``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1[]})">
            <summary>
            Returns the length of the specified array.
            </summary>   
            <param name="member">A member.</param>                     
            <returns>A <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/> instance that contains the member's value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>                  
            <returns>A <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/> instance that contains the member's value.</returns>        
        </member>
        <member name="T:Kingo.Constraints.CollectionIsNotNullOrEmptyConstraint`1">
            <summary>
            Represents a constraint that checks whether or not a collection is <c>null</c> or empty.
            </summary>
        </member>
        <member name="T:Kingo.Constraints.Constraint`1">
            <summary>
            Provides a base implementation of the <see cref="T:Kingo.Constraints.IConstraint`1"/> interface.
            </summary>
            <typeparam name="TValue">Type of the constraint value.</typeparam>
        </member>
        <member name="T:Kingo.Constraints.Constraint">
            <summary>
            Provides a base implementation of the <see cref="T:Kingo.Constraints.IConstraintWithErrorMessage"/> interface.
            </summary>
        </member>
        <member name="T:Kingo.Constraints.IConstraintWithErrorMessage">
            <summary>
            When implemented by a class, represents a constraint with a name and associated error message.
            </summary>
        </member>
        <member name="T:Kingo.Constraints.IConstraint">
            <summary>
            When implemented by a class, represents a constraint.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.IConstraint.AcceptVisitor(Kingo.Constraints.IConstraintVisitor)">
            <summary>
            Accepts the specified <paramref name="visitor"/>.
            </summary>
            <param name="visitor">The visitor of this constraint.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="visitor"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IConstraintWithErrorMessage.WithName(System.String)">
            <summary>
            Creates and returns a copy of this constraint, assigning the specified <paramref name="name"/>.
            </summary>
            <param name="name">New name of the constraint.</param>
            <returns>A copy of this constraint with the specified <paramref name="name"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is not valid <see cref="T:Kingo.Identifier"/>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IConstraintWithErrorMessage.WithName(Kingo.Identifier)">
            <summary>
            Creates and returns a copy of this constraint, assigning the specified <paramref name="name"/>.
            </summary>
            <param name="name">New name of the constraint.</param>
            <returns>A copy of this constraint with the specified <paramref name="name"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.Constraints.IConstraintWithErrorMessage.WithErrorMessage(System.String)">
            <summary>
            Creates and returns a copy of this constraint, assigning the specified <paramref name="errorMessage"/>.
            </summary>
            <param name="errorMessage">New error message of the constraint.</param>
            <returns>A copy of this constraint with the specified <paramref name="errorMessage"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errorMessage"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IConstraintWithErrorMessage.WithErrorMessage(Kingo.StringTemplate)">
            <summary>
            Creates and returns a copy of this constraint, assigning the specified <paramref name="errorMessage"/>.
            </summary>
            <param name="errorMessage">New error message of the constraint.</param>
            <returns>A copy of this constraint with the specified <paramref name="errorMessage"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errorMessage"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="P:Kingo.Constraints.IConstraintWithErrorMessage.Name">
            <summary>
            Name of the constraint.
            </summary>
        </member>
        <member name="P:Kingo.Constraints.IConstraintWithErrorMessage.ErrorMessage">
            <summary>
            Error message associated with this constraint.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.Constraint.DefaultName">
            <summary>
            Represents the default name of a constraint when no name has been specified explicitly.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.Constraint.DefaultErrorMessage">
            <summary>
            Represents the default error message of a constraint when no error message has been specified explicitly.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.Constraint.AcceptVisitor(Kingo.Constraints.IConstraintVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Constraint.Any``1(Kingo.Constraints.IConstraint{``0}[])">
            <summary>
            Returns a logical OR-constraint composed of the specified <paramref name="constraints"/>.
            </summary>
            <typeparam name="TValue">Type of the value to check.</typeparam>
            <param name="constraints">A set of constraints.</param>
            <returns>A logical OR-constraint composed of the specified <paramref name="constraints"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraints"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.Constraint.All``1(Kingo.Constraints.IConstraint{``0}[])">
            <summary>
            Returns a logical AND-constraint composed of the specified <paramref name="constraints"/>.
            </summary>
            <typeparam name="TValue">Type of the value to check.</typeparam>
            <param name="constraints">A set of constraints.</param>
            <returns>A logical AND-constraint composed of the specified <paramref name="constraints"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraints"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.Constraints.Constraint.Name">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.Constraint.NameIfNotSpecified">
            <summary>
            Returns the name of this constraint if it was not explicitly specified.
            </summary>
        </member>
        <member name="P:Kingo.Constraints.Constraint.ErrorMessage">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.Constraint.ErrorMessageIfNotSpecified">
            <summary>
            Returns the error message of this constraint if it was not explicitly specified.
            </summary>
        </member>
        <member name="T:Kingo.Constraints.IConstraintWithErrorMessage`1">
            <summary>
            When implemented by a class, represents a constraint with a name and associated error message.
            </summary>
        </member>
        <member name="T:Kingo.Constraints.IConstraint`1">
            <summary>
            When implemented by a class, represents a constraint for a certain value.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="M:Kingo.Constraints.IConstraint`1.And(System.Predicate{`0},System.String,System.String)">
            <summary>
            Creates and returns a logical AND constraint for this and the specified <paramref name="constraint"/>.
            </summary>
            <param name="constraint">Another constraint.</param>
            <param name="errorMessage">Error message associated with the constraint.</param>
            <param name="name">Name of the constraint.</param>
            <returns>A logical AND constraint.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IConstraint`1.And(System.Predicate{`0},Kingo.StringTemplate,Kingo.Identifier)">
            <summary>
            Creates and returns a logical AND constraint for this and the specified <paramref name="constraint"/>.
            </summary>
            <param name="constraint">Another constraint.</param>
            <param name="errorMessage">Error message associated with the constraint.</param>
            <param name="name">Name of the constraint.</param>
            <returns>A logical AND constraint.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IConstraint`1.And(Kingo.Constraints.IConstraint{`0})">
            <summary>
            Creates and returns a logical AND constraint for this and the specified <paramref name="constraint"/>.
            </summary>
            <param name="constraint">Another constraint.</param>
            <returns>A logical AND constraint.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IConstraint`1.Or(System.Predicate{`0},System.String,System.String)">
            <summary>
            Creates and returns a logical OR constraint for this and the specified <paramref name="constraint"/>.
            </summary>
            <param name="constraint">Another constraint.</param>
            <param name="errorMessage">Error message associated with the constraint.</param>
            <param name="name">Name of the constraint.</param>
            <returns>A logical OR constraint.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IConstraint`1.Or(System.Predicate{`0},Kingo.StringTemplate,Kingo.Identifier)">
            <summary>
            Creates and returns a logical OR constraint for this and the specified <paramref name="constraint"/>.
            </summary>
            <param name="constraint">Another constraint.</param>
            <param name="errorMessage">Error message associated with the constraint.</param>
            <param name="name">Name of the constraint.</param>
            <returns>A logical OR constraint.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IConstraint`1.Or(Kingo.Constraints.IConstraint{`0})">
            <summary>
            Creates and returns a logical OR constraint for this and the specified <paramref name="constraint"/>.
            </summary>
            <param name="constraint">Another constraint.</param>
            <returns>A logical OR constraint.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IConstraint`1.Invert">
            <summary>
            Creates and returns a constraint that negates this constraint.
            </summary>        
            <returns>A constraint that is the logical opposite of this constraint.</returns>
        </member>
        <member name="M:Kingo.Constraints.IConstraint`1.Invert(System.String,System.String)">
            <summary>
            Creates and returns a constraint that negates this constraint.
            </summary>
            <param name="errorMessage">Error message of the inverting constraint.</param>
            <param name="name">Name of the inverting constraint.</param>
            <returns>A constraint that is the logical opposite of this constraint.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format or <paramref name="name"/> is not a valid identifier.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IConstraint`1.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <summary>
            Creates and returns a constraint that negates this constraint.
            </summary>
            <param name="errorMessage">Error message of the inverting constraint.</param>
            <param name="name">Name of the inverting constraint.</param>
            <returns>A constraint that is the logical opposite of this constraint.</returns>
        </member>
        <member name="M:Kingo.Constraints.IConstraint`1.MapInputToOutput">
            <summary>
            Converts this constraint to a constraint that maps the input to the output.
            </summary>
            <returns>A new constraint wrapping the current constraint that maps the input to the output.</returns>
        </member>
        <member name="M:Kingo.Constraints.IConstraint`1.ToDelegate">
            <summary>
            Converts this constraints to a delegate.
            </summary>
            <returns>A delegate that represents this constraint.</returns>
        </member>
        <member name="M:Kingo.Constraints.IConstraint`1.IsSatisfiedBy(`0)">
            <summary>
            Determines whether or not the specified <paramref name="value"/> satisfies this constraint.
            </summary>
            <param name="value">The value to check.</param>
            <returns><c>true</c> if the value satisfies this constraint; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Constraints.IConstraint`1.IsNotSatisfiedBy(`0,Kingo.Messaging.IErrorMessageBuilder@)">
            <summary>
            Determines whether or not the specified <paramref name="value"/> satisfies this constraint.
            </summary>
            <param name="value">The value to check.</param>
            <param name="errorMessage">
            If this method returns <c>true</c>, this parameter will be set to the error of the constraint that failed;
            otherwise, it will be <c>null</c>.
            </param>
            <returns><c>true</c> if the value satisfies this constraint; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Constraints.IConstraintWithErrorMessage`1.WithName(System.String)">
            <summary>
            Creates and returns a copy of this constraint, assigning the specified <paramref name="name"/>.
            </summary>
            <param name="name">New name of the constraint.</param>
            <returns>A copy of this constraint with the specified <paramref name="name"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is not valid <see cref="T:Kingo.Identifier"/>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IConstraintWithErrorMessage`1.WithName(Kingo.Identifier)">
            <summary>
            Creates and returns a copy of this constraint, assigning the specified <paramref name="name"/>.
            </summary>
            <param name="name">New name of the constraint.</param>
            <returns>A copy of this constraint with the specified <paramref name="name"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.Constraints.IConstraintWithErrorMessage`1.WithErrorMessage(System.String)">
            <summary>
            Creates and returns a copy of this constraint, assigning the specified <paramref name="errorMessage"/>.
            </summary>
            <param name="errorMessage">New error message of the constraint.</param>
            <returns>A copy of this constraint with the specified <paramref name="errorMessage"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errorMessage"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IConstraintWithErrorMessage`1.WithErrorMessage(Kingo.StringTemplate)">
            <summary>
            Creates and returns a copy of this constraint, assigning the specified <paramref name="errorMessage"/>.
            </summary>
            <param name="errorMessage">New error message of the constraint.</param>
            <returns>A copy of this constraint with the specified <paramref name="errorMessage"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errorMessage"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.Constraints.Constraint`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.Constraint`1"/> class.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.Constraint`1.#ctor(Kingo.Constraints.Constraint{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.Constraint`1"/> class.
            </summary>
            <param name="constraint">Constraint to copy.</param>        
        </member>
        <member name="M:Kingo.Constraints.Constraint`1.#ctor(Kingo.Constraints.Constraint{`0},Kingo.StringTemplate)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.Constraint`1"/> class.
            </summary>
            <param name="constraint">Constraint to copy.</param>
            <param name="errorMessage">The error message of this constraint.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.Constraint`1.#ctor(Kingo.Constraints.Constraint{`0},Kingo.Identifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.Constraint`1"/> class.
            </summary>
            <param name="constraint">Constraint to copy.</param>
            <param name="name">The name of this constraint.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.Constraint`1.WithName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Constraint`1.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Constraint`1.WithErrorMessage(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Constraint`1.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Constraint`1.And(System.Predicate{`0},System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Constraint`1.And(System.Predicate{`0},Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Constraint`1.And(Kingo.Constraints.IConstraint{`0})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Constraint`1.Or(System.Predicate{`0},System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Constraint`1.Or(System.Predicate{`0},Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Constraint`1.Or(Kingo.Constraints.IConstraint{`0})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Constraint`1.Kingo#Constraints#IConstraint{TValue}#Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Constraint`1.Invert">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Constraint`1.Invert(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Constraint`1.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Constraint`1.MapInputToOutput">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Constraint`1.ToDelegate">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Constraint`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Constraint`1.IsNotSatisfiedBy(`0,Kingo.Messaging.IErrorMessageBuilder@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.CollectionIsNotNullOrEmptyConstraint`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.CollectionIsNotNullOrEmptyConstraint`1"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.CollectionIsNotNullOrEmptyConstraint`1.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.CollectionIsNotNullOrEmptyConstraint`1.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.CollectionIsNotNullOrEmptyConstraint`1.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.CollectionIsNotNullOrEmptyConstraint`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.CollectionIsNotNullOrEmptyConstraint`1.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.CollectionIsNullOrEmptyConstraint`1">
            <summary>
            Represents a constraint that checks whether or not a collection is <c>null</c> or empty.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.CollectionIsNullOrEmptyConstraint`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.CollectionIsNullOrEmptyConstraint`1"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.CollectionIsNullOrEmptyConstraint`1.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.CollectionIsNullOrEmptyConstraint`1.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.CollectionIsNullOrEmptyConstraint`1.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.CollectionIsNullOrEmptyConstraint`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.CollectionIsNullOrEmptyConstraint`1.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.HasItemFilter`1">
            <summary>
            Represents a filter that selects an item from a value using a set of indices.
            </summary>
        </member>
        <member name="T:Kingo.Constraints.Filter`2">
            <summary>
            Provides a base class for the <see cref="T:Kingo.Constraints.IFilter`2"/> interface.
            </summary>
            <typeparam name="TValueIn">Type of the input (checked) value.</typeparam>
            <typeparam name="TValueOut">Type of the output value.</typeparam>
        </member>
        <member name="T:Kingo.Constraints.IFilterWithErrorMessage`2">
            <summary>
            When implemented by a class, represents a filter-constraint with a name and associated error message.
            </summary>
        </member>
        <member name="T:Kingo.Constraints.IFilter`2">
            <summary>
            When implemented by a class, represents a filter-constraint that transforms an input value to an output value.
            </summary>
            <typeparam name="TValueIn">Type in the input value.</typeparam>
            <typeparam name="TValueOut">Type of the output value.</typeparam>
        </member>
        <member name="M:Kingo.Constraints.IFilter`2.And``1(Kingo.Constraints.IFilter{`1,``0})">
            <summary>
            Creates and returns a logical AND constraint for this and the specified <paramref name="filter"/>.
            </summary>
            <param name="filter">Another constraint.</param>
            <returns>A logical AND constraint.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filter"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IFilter`2.IsSatisfiedBy(`0,`1@)">
            <summary>
            Determines whether or not the specified <paramref name="valueIn"/> satisfies this constraint.
            </summary>
            <param name="valueIn">The value to check.</param>
            <param name="valueOut">
            If this method returns <c>true</c>, will be assigned the output value of this constraint;
            otherwise it will be assigned the default value.
            </param>
            <returns><c>true</c> if the value satisfies this constraint; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Constraints.IFilter`2.IsNotSatisfiedBy(`0,Kingo.Messaging.IErrorMessageBuilder@,`1@)">
            <summary>
            Determines whether or not the specified <paramref name="valueIn"/> satisfies this constraint.
            </summary>
            <param name="valueIn">The value to check.</param>
            <param name="errorMessage">
            If this method returns <c>true</c>, this parameter will be set to the error of the constraint that failed;
            otherwise, it will be <c>null</c>.
            </param>
            <param name="valueOut">
            If this method returns <c>false</c>, will be assigned the output value of this constraint;
            otherwise it will be assigned the default value.
            </param>
            <returns><c>true</c> if the value satisfies this constraint; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Constraints.IFilterWithErrorMessage`2.WithName(System.String)">
            <summary>
            Creates and returns a copy of this constraint, assigning the specified <paramref name="name"/>.
            </summary>
            <param name="name">New name of the constraint.</param>
            <returns>A copy of this constraint with the specified <paramref name="name"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is not valid <see cref="T:Kingo.Identifier"/>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IFilterWithErrorMessage`2.WithName(Kingo.Identifier)">
            <summary>
            Creates and returns a copy of this constraint, assigning the specified <paramref name="name"/>.
            </summary>
            <param name="name">New name of the constraint.</param>
            <returns>A copy of this constraint with the specified <paramref name="name"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.Constraints.IFilterWithErrorMessage`2.WithErrorMessage(System.String)">
            <summary>
            Creates and returns a copy of this constraint, assigning the specified <paramref name="errorMessage"/>.
            </summary>
            <param name="errorMessage">New error message of the constraint.</param>
            <returns>A copy of this constraint with the specified <paramref name="errorMessage"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errorMessage"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IFilterWithErrorMessage`2.WithErrorMessage(Kingo.StringTemplate)">
            <summary>
            Creates and returns a copy of this constraint, assigning the specified <paramref name="errorMessage"/>.
            </summary>
            <param name="errorMessage">New error message of the constraint.</param>
            <returns>A copy of this constraint with the specified <paramref name="errorMessage"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errorMessage"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.Constraints.Filter`2.#ctor(Kingo.Constraints.Filter{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.Constraint`1"/> class.
            </summary>
            <param name="filter">Filter to copy.</param>        
        </member>
        <member name="M:Kingo.Constraints.Filter`2.#ctor(Kingo.Constraints.Filter{`0,`1},Kingo.StringTemplate)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.Filter`2"/> class.
            </summary>
            <param name="filter">Filter to copy.</param>
            <param name="errorMessage">The error message of this constraint.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filter"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.Filter`2.#ctor(Kingo.Constraints.Filter{`0,`1},Kingo.Identifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.Filter`2"/> class.
            </summary>
            <param name="filter">Filter to copy.</param>
            <param name="name">The name of this constraint.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filter"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.Filter`2.WithName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Filter`2.WithName(Kingo.Identifier)">
            <summary>
            When overridden, creates and returns a copy of this constraint, assigning the specified <paramref name="name"/>.
            </summary>
            <param name="name">New name of the constraint.</param>
            <returns>A copy of this constraint with the specified <paramref name="name"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>   
        </member>
        <member name="M:Kingo.Constraints.Filter`2.WithErrorMessage(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Filter`2.WithErrorMessage(Kingo.StringTemplate)">
            <summary>
            When overridden, creates and returns a copy of this constraint, assigning the specified <paramref name="errorMessage"/>.
            </summary>
            <param name="errorMessage">New error message of the constraint.</param>
            <returns>A copy of this constraint with the specified <paramref name="errorMessage"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errorMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.Filter`2.And(System.Predicate{`0},System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Filter`2.And(System.Predicate{`0},Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Filter`2.And(Kingo.Constraints.IConstraint{`0})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Filter`2.And``1(Kingo.Constraints.IFilter{`1,``0})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Filter`2.Or(System.Predicate{`0},System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Filter`2.Or(System.Predicate{`0},Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Filter`2.Or(Kingo.Constraints.IConstraint{`0})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Filter`2.Kingo#Constraints#IConstraint{TValueIn}#Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Filter`2.Invert">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Filter`2.Invert(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Filter`2.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Filter`2.ToDelegate">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Filter`2.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Filter`2.IsSatisfiedBy(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Filter`2.IsNotSatisfiedBy(`0,Kingo.Messaging.IErrorMessageBuilder@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.Filter`2.IsNotSatisfiedBy(`0,Kingo.Messaging.IErrorMessageBuilder@,`1@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.HasItemFilter`1.#ctor(System.Collections.Generic.IEnumerable{System.Tuple{System.Type,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.HasItemFilter`1"/> class.
            </summary>    
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexList"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.Constraints.HasItemFilter`1.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.HasItemFilter`1.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.HasItemFilter`1.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.HasItemFilter`1.IsSatisfiedBy(`0,System.Object@)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.HasItemFilter`1.IndexList">
            <summary>
            Indices of the element to select.
            </summary>
        </member>
        <member name="P:Kingo.Constraints.HasItemFilter`1.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.ConstraintVisitor">
            <summary>
            Provides a base implementation of the <see cref="T:Kingo.Constraints.IConstraintVisitor"/> interface.
            </summary>
        </member>
        <member name="T:Kingo.Constraints.IConstraintVisitor">
            <summary>
            When implemented by a class, represent a visitor of <see cref="T:Kingo.Constraints.IConstraint">Constraints</see>.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.IConstraintVisitor.VisitAnd(Kingo.Constraints.IConstraint,System.Collections.Generic.IEnumerable{Kingo.Constraints.IConstraint})">
            <summary>
            Visits the specified <paramref name="andConstraint"/> and its children.
            </summary>
            <param name="andConstraint">A logical AND-constraint.</param>
            <param name="childConstraints">The children of the AND-constraint.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="andConstraint"/> or <paramref name="childConstraints"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IConstraintVisitor.VisitOr(Kingo.Constraints.IConstraintWithErrorMessage,System.Collections.Generic.IEnumerable{Kingo.Constraints.IConstraint})">
            <summary>
            Visits the specified <paramref name="orConstraint"/> and its children.
            </summary>
            <param name="orConstraint">A logical OR-constraint.</param>
            <param name="childConstraints">The children of the OR-constraint.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="orConstraint"/> or <paramref name="childConstraints"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IConstraintVisitor.VisitInverse(Kingo.Constraints.IConstraintWithErrorMessage,Kingo.Constraints.IConstraint)">
            <summary>
            Visits the specified <paramref name="inverseConstraint"/> and the corresponding <paramref name="invertedConstraint"/>.
            </summary>
            <param name="inverseConstraint">The logical NOT- or inverse constraint.</param>
            <param name="invertedConstraint">The inverted constraint.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inverseConstraint"/> or <paramref name="invertedConstraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IConstraintVisitor.Visit(Kingo.Constraints.IConstraintWithErrorMessage)">
            <summary>
            Visits the specified <paramref name="constraint"/>.
            </summary>
            <param name="constraint">A non-composite constraint.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.ConstraintVisitor.VisitAnd(Kingo.Constraints.IConstraint)">
            <summary>
            Visits the specified <paramref name="andConstraint"/>.
            </summary>
            <param name="andConstraint">A logical AND-constraint.</param>
        </member>
        <member name="M:Kingo.Constraints.ConstraintVisitor.VisitOr(Kingo.Constraints.IConstraintWithErrorMessage)">
            <summary>
            Visits the specified <paramref name="orConstraint"/>.
            </summary>
            <param name="orConstraint">A logical OR-constraint.</param>
        </member>
        <member name="M:Kingo.Constraints.ConstraintVisitor.VisitInverse(Kingo.Constraints.IConstraintWithErrorMessage)">
            <summary>
            Visits the specified <paramref name="inverseConstraint"/>.
            </summary>
            <param name="inverseConstraint">A logical NOT-constraint.</param>
        </member>
        <member name="M:Kingo.Constraints.ConstraintVisitor.Visit(Kingo.Constraints.IConstraintWithErrorMessage)">
            <summary>
            Visits the specified <paramref name="constraint"/>.
            </summary>
            <param name="constraint">The visited constraint.</param>
        </member>
        <member name="T:Kingo.Constraints.IMember">
            <summary>
            When implemented by a class, represent a certain member that can be validated.
            </summary>
        </member>
        <member name="P:Kingo.Constraints.IMember.DisplayName">
            <summary>
            The display name of this member.
            </summary>
        </member>
        <member name="P:Kingo.Constraints.IMember.FullName">
            <summary>
            The full name of this member.
            </summary>
        </member>
        <member name="P:Kingo.Constraints.IMember.Name">
            <summary>
            The name of this member.
            </summary>
        </member>
        <member name="P:Kingo.Constraints.IMember.Type">
            <summary>
            The type of this member's value.
            </summary>
        </member>
        <member name="T:Kingo.Constraints.DelegateConstraint`1">
            <summary>
            Represents a constraint that checks whether or not a value satisfies a predicate that is passed in as a delegate.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.DelegateConstraint`1.#ctor(System.Predicate{`0},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.DelegateConstraint`1"/> class.
            </summary>
            <param name="constraint">A delegate that represents the constraint.</param> 
            <param name="errorMessageArgument">
            The object that is used to format the error message on behalf of this constraint.
            </param>       
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.DelegateConstraint`1.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.DelegateConstraint`1.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.DelegateConstraint`1.ToDelegate">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.DelegateConstraint`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.DelegateConstraint`1.IsNotSatisfiedBy(`0,Kingo.Messaging.IErrorMessageBuilder@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.DelegateFilter`3.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.DelegateFilter`3.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.DelegateFilter`3.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.DelegateFilter`3.IsSatisfiedBy(`1)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.DelegateFilter`3.IsSatisfiedBy(`1,`2@)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.IndexerInvocationException">
            <summary>
            This exception is thrown when an attempt to invoke an indexer on a instance failed
            because the indexer was not found or the specified index values were not valid.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.IndexerInvocationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IndexerInvocationException"/> class.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.IndexerInvocationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IndexerInvocationException"/> class.
            </summary>
            <param name="message">Message of the exception.</param>
        </member>
        <member name="M:Kingo.Constraints.IndexerInvocationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IndexerInvocationException"/> class.
            </summary>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>
        </member>
        <member name="T:Kingo.Constraints.IndexListFactory`1">
            <summary>
            Represents a list of delegates that are used to obtain the type and the argument-values for indexer-invocations.
            </summary>
            <typeparam name="T">Type of the instance that will serve as the input for the delegates.</typeparam>
        </member>
        <member name="M:Kingo.Constraints.IndexListFactory`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IndexList"/> class.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.IndexListFactory`1.Add``1(System.Func{`0,``0})">
            <summary>
            Adds a new index-delegate to this list.
            </summary>
            <typeparam name="TValue">Type of the return-value of the delegate.</typeparam>
            <param name="indexFactory">The delegate to add.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexFactory"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IndexListFactory`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IndexListFactory`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.IndexListFactory`1.Count">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.EnumConstraints">
            <summary>
            Contains a set of extension methods specific for members of type <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`2"/>.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.EnumConstraints.IsInRangeOfValidValues``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.String)">
            <summary>
            Verifies whether or not the specified <paramref name="member"/> does not contain any value or bitflags
            that is/are not in range of acceptable values of the defining Enum type.
            </summary>        
            <param name="member">A member.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>   
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>          
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception> 
        </member>
        <member name="M:Kingo.Constraints.EnumConstraints.IsInRangeOfValidValues``1(``0)">
            <summary>
            Determines whether or not the specified <paramref name="value"/> does not contain any value or bitflags
            that is/are not in range of acceptable values of the defining Enum type.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <c>true</c> if <paramref name="value"/> is not a Flags enum and represents one of the allowed values, or
            if <paramref name="value"/> is a flags enum and all flags are valid flags of this enum;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <typeparamref name="TEnum"/> is not an Enum type.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.EnumConstraints.IsFlagsEnum(System.Enum)">
            <summary>
            Determines whether or not the enum is decorated with the <see cref="T:System.FlagsAttribute"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <c>true</c> if the <see cref="T:System.FlagsAttribute"/> has been declared on the specified <paramref name="value"/>;
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Constraints.EnumConstraints.IsDefined``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},System.String)">
            <summary>
            Verifies whether or not the specified <paramref name="member"/> is defined as a constant by the specified Enum type.
            </summary>        
            <param name="member">A member.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>   
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>          
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception> 
        </member>
        <member name="M:Kingo.Constraints.EnumConstraints.IsDefined(System.Enum)">
            <summary>
            Determines whether or not the specified <paramref name="value"/> is valid relative to the values that have been
            declare on the enum type itself.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <c>true</c> if <paramref name="value"/> is not a Flags enum and represents one of the allowed values, or
            if <paramref name="value"/> is a flags enum and all flags are valid flags of this enum;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.EnumConstraints.HasFlag``2(Kingo.Constraints.IMemberConstraintBuilder{``0,``1},``1,System.String)">
            <summary>
            Verifies whether or not the specified <paramref name="member"/> has all specified flags of the <paramref name="flag"/> value set.
            </summary>        
            <param name="member">A member.</param>
            <param name="flag">The flag(s) to check for.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>   
            <returns>A member that has been merged with the specified member.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>          
            <exception cref="T:System.ArgumentException">
            <paramref name="flag"/> is not an Enum type or <paramref name="errorMessage"/> is not in a correct format.
            </exception> 
        </member>
        <member name="T:Kingo.Constraints.EnumIsInRangeOfValidValuesConstraint`1">
            <summary>
            Represents a constraint that checks whether or not an Enum value has any value or bitflags
            that is/are not in range of acceptable values of the defining Enum type.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.EnumIsInRangeOfValidValuesConstraint`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.EnumIsInRangeOfValidValuesConstraint`1"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.EnumIsInRangeOfValidValuesConstraint`1.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.EnumIsInRangeOfValidValuesConstraint`1.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.EnumIsInRangeOfValidValuesConstraint`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.EnumIsInRangeOfValidValuesConstraint`1.EnumType">
            <summary>
            Returns the type of enumeration this constraint is for.
            </summary>
        </member>
        <member name="P:Kingo.Constraints.EnumIsInRangeOfValidValuesConstraint`1.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.EnumIsDefinedConstraint`1">
            <summary>
            Represents a constraint that checks whether or not an enum value is within range of its valid values.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.EnumIsDefinedConstraint`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.EnumIsDefinedConstraint`1"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.EnumIsDefinedConstraint`1.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.EnumIsDefinedConstraint`1.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.EnumIsDefinedConstraint`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.EnumIsDefinedConstraint`1.EnumType">
            <summary>
            Returns the type of enumeration this constraint is for.
            </summary>
        </member>
        <member name="P:Kingo.Constraints.EnumIsDefinedConstraint`1.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.EnumHasFlagConstraint`1">
            <summary>
            Represents a constraint that checks whether or not all bitflags of a specific Enum value are set on the specified (checked) value.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.EnumHasFlagConstraint`1.Flag">
            <summary>
            The flag(s) to check.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.EnumHasFlagConstraint`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.EnumHasFlagConstraint`1"/> class.
            </summary>    
            <param name="flag">The flag(s) to check.</param>
        </member>
        <member name="M:Kingo.Constraints.EnumHasFlagConstraint`1.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.EnumHasFlagConstraint`1.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.EnumHasFlagConstraint`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.EnumHasFlagConstraint`1.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.ExpressionNotSupportedException">
            <summary>
            This exception is thrown when an expression of which its type or contents are not supported by a method.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.ExpressionNotSupportedException.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.ExpressionNotSupportedException"/> class.
            </summary>
            <param name="expression">The expression that was not supported.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.ExpressionNotSupportedException.#ctor(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.ExpressionNotSupportedException"/> class.
            </summary>
            <param name="expression">The expression that was not supported.</param>
            <param name="message">Message of the exception.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.ExpressionNotSupportedException.#ctor(System.Linq.Expressions.Expression,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.ExpressionNotSupportedException"/> class.
            </summary>
            <param name="expression">The expression that was not supported.</param>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.ExpressionNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.ExpressionNotSupportedException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Kingo.Constraints.ExpressionNotSupportedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.ExpressionNotSupportedException.Expression">
            <summary>
            The expression that was not supported in string-form.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.ErrorMessageReader">
            <summary>
            Provides a base implementation of the <see cref="T:Kingo.Messaging.IErrorMessageReader"/> class.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.IErrorMessageReader">
            <summary>
            When implemented by a class, represents a reader or consumer of error messages.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.IErrorMessageReader.Add(Kingo.Messaging.IErrorMessageBuilder,System.String)">
            <summary>
            Adds the specified <paramref name="errorMessageBuilder"/> to this reader.
            </summary>        
            <param name="errorMessageBuilder">An error message.</param>     
            <param name="memberName">
            Name of the member for which the <paramref name="errorMessageBuilder"/> was generated. If <c>null</c> or an empty string is specified,
            the <paramref name="errorMessageBuilder"/> is associated with the entire message or instance that was validated.
            </param>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errorMessageBuilder"/> is <c>null</c>.
            </exception>              
        </member>
        <member name="M:Kingo.Messaging.IErrorMessageReader.Add(Kingo.Messaging.IErrorMessageBuilder,System.String,Kingo.Messaging.ErrorInheritanceLevel)">
            <summary>
            Adds the specified <paramref name="errorMessageBuilder"/> to this reader.
            </summary>        
            <param name="errorMessageBuilder">An error message.</param>     
            <param name="memberName">
            Name of the member for which the <paramref name="errorMessageBuilder"/> was generated. If <c>null</c> or an empty string is specified,
            the <paramref name="errorMessageBuilder"/> is associated with the entire message or instance that was validated.
            </param>        
            <param name="inheritanceLevel">
            The error level of the <paramref name="errorMessageBuilder"/> in relation to the specified <paramref name="memberName"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errorMessageBuilder"/> is <c>null</c>.
            </exception>  
        </member>
        <member name="M:Kingo.Messaging.IErrorMessageReader.Add(System.String,System.String)">
            <summary>
            Adds the specified <paramref name="errorMessage"/> to this reader.
            </summary>        
            <param name="errorMessage">An error message.</param>        
            <param name="memberName">
            Name of the member for which the <paramref name="errorMessage"/> was generated. If <c>null</c> or an empty string is specified,
            <paramref name="errorMessage"/> is associated with the entire message or instance that was validated.
            </param>             
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errorMessage"/> is <c>null</c>.
            </exception>  
        </member>
        <member name="M:Kingo.Messaging.IErrorMessageReader.Add(System.String,System.String,Kingo.Messaging.ErrorInheritanceLevel)">
            <summary>
            Adds the specified <paramref name="errorMessage"/> to this reader.
            </summary>        
            <param name="errorMessage">An error message.</param>        
            <param name="memberName">
            Name of the member for which the <paramref name="errorMessage"/> was generated. If <c>null</c> or an empty string is specified,
            <paramref name="errorMessage"/> is associated with the entire message or instance that was validated.
            </param>     
            <param name="inheritanceLevel">
            The error level of the <paramref name="errorMessage"/> in relation to the specified <paramref name="memberName"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errorMessage"/> is <c>null</c>.
            </exception>  
        </member>
        <member name="M:Kingo.Messaging.ErrorMessageReader.Add(Kingo.Messaging.IErrorMessageBuilder,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.ErrorMessageReader.Add(Kingo.Messaging.IErrorMessageBuilder,System.String,Kingo.Messaging.ErrorInheritanceLevel)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.ErrorMessageReader.Add(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.ErrorMessageReader.Add(System.String,System.String,Kingo.Messaging.ErrorInheritanceLevel)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.ErrorMessageReader.FormatProvider">
            <summary>
            Returns the <see cref="T:System.IFormatProvider"/> that is used to format incoming error messages.
            </summary>
        </member>
        <member name="T:Kingo.Constraints.StringConstraints">
            <summary>
            Contains a set of extension methods specific for members of type <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/>.
            </summary>
            <summary>
            Contains a set of extension methods specific for members of type <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/>.
            </summary>
            <summary>
            Contains a set of extension methods specific for members of type <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/>.
            </summary>
            <summary>
            Contains a set of extension methods specific for members of type <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/>.
            </summary>
            <summary>
            Contains a set of extension methods specific for members of type <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/>.
            </summary>
            <summary>
            Contains a set of extension methods specific for members of type <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/>.
            </summary>
            <summary>
            Contains a set of extension methods specific for members of type <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/>.
            </summary>
            <summary>
            Contains a set of extension methods specific for members of type <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/>.
            </summary>
            <summary>
            Contains a set of extension methods specific for members of type <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/>.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.StringConstraints.DefaultByteNumberStyles">
            <summary>
            Defines the default <see cref="T:System.Globalization.NumberStyles"/> value to parse a byte.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.StringConstraints.DefaultSByteNumberStyles">
            <summary>
            Defines the default <see cref="T:System.Globalization.NumberStyles"/> value to parse a sbyte.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.StringConstraints.DefaultInt16NumberStyles">
            <summary>
            Defines the default <see cref="T:System.Globalization.NumberStyles"/> value to parse a short.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.StringConstraints.DefaultInt32NumberStyles">
            <summary>
            Defines the default <see cref="T:System.Globalization.NumberStyles"/> value to parse an int.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.StringConstraints.DefaultInt64NumberStyles">
            <summary>
            Defines the default <see cref="T:System.Globalization.NumberStyles"/> value to parse a long.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.StringConstraints.DefaultSingleNumberStyles">
            <summary>
            Defines the default <see cref="T:System.Globalization.NumberStyles"/> value to parse a float.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.StringConstraints.DefaultDoubleNumberStyles">
            <summary>
            Defines the default <see cref="T:System.Globalization.NumberStyles"/> value to parse a float.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.StringConstraints.DefaultDecimalNumberStyles">
            <summary>
            Defines the default <see cref="T:System.Globalization.NumberStyles"/> value to parse a float.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.IsIdentifier``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value can be converted to an <see cref="T:Kingo.Identifier"/>.
            </summary>
            <param name="member">A member.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.DoesNotContain``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.Char,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value does not contain the specified <paramref name="value"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="value">The value to check for.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.DoesNotContain``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value does not contain the specified <paramref name="value"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="value">The value to check for.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.Contains``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.Char,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value contains the specified <paramref name="value"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="value">The value to check for.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.Contains``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value contains the specified <paramref name="value"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="value">The value to check for.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.DoesNotEndWith``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value does not end with the specified <paramref name="postfix"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="postfix">The postfix this value should not end with.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="postfix"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.DoesNotEndWith``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String,System.StringComparison,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value does not end with the specified <paramref name="postfix"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="postfix">The postfix this value should not end with.</param>
            <param name="compareType">One of the enumeration values that specifies how the strings will be compared.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="postfix"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.EndsWith``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value ends with the specified <paramref name="postfix"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="postfix">The postfix this value should end with.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="postfix"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.EndsWith``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String,System.StringComparison,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value ends with the specified <paramref name="postfix"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="postfix">The postfix this value should end with.</param>
            <param name="compareType">One of the enumeration values that specifies how the strings will be compared.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="postfix"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.IsNotEqualTo``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String,System.StringComparison,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value is not equal to <paramref name="other"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="other">The value to compare.</param>
            <param name="compareType">One of the enumeration values that specifies how the strings will be compared.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.IsEqualTo``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String,System.StringComparison,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value is equal to <paramref name="other"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="other">The value to compare.</param>
            <param name="compareType">One of the enumeration values that specifies how the strings will be compared.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.IsNotNullOrEmpty``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value is not <c>null</c> or an empty string.
            </summary>
            <param name="member">A member.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.IsNullOrEmpty``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value is <c>null</c> or an empty string.
            </summary>
            <param name="member">A member.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.IsNotNullOrWhiteSpace``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value is not <c>null</c> or consists only of white space.
            </summary>
            <param name="member">A member.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.IsNullOrWhiteSpace``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value is <c>null</c> or consists only of white space.
            </summary>
            <param name="member">A member.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.DoesNotMatch``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value does not match the specified <paramref name="pattern"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="pattern">The pattern to match.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="pattern"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="pattern"/> is not a valid regular expression, or <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.DoesNotMatch``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String,System.Text.RegularExpressions.RegexOptions,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value does not match the specified <paramref name="pattern"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="pattern">The pattern to match.</param>
            <param name="options">A bitwise combination of the enumeration values that provide options for matching.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="pattern"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="pattern"/> is not a valid regular expression, or <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.DoesNotMatch``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value does not match the specified <paramref name="pattern"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="pattern">The pattern to match.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="pattern"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.Matches``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value matches the specified <paramref name="pattern"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="pattern">The pattern to match.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="pattern"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="pattern"/> is not a valid regular expression, or <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.Matches``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String,System.Text.RegularExpressions.RegexOptions,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value matches the specified <paramref name="pattern"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="pattern">The pattern to match.</param>
            <param name="options">A bitwise combination of the enumeration values that provide options for matching.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="pattern"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="pattern"/> is not a valid regular expression, or <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.Matches``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value matches the specified <paramref name="pattern"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="pattern">The pattern to match.</param>       
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="pattern"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.DoesNotStartWith``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value does not start with the specified <paramref name="prefix"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="prefix">The prefix this value should not start with.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="prefix"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.DoesNotStartWith``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String,System.StringComparison,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value does not start with the specified <paramref name="prefix"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="prefix">The prefix this value should not start with.</param>
            <param name="compareType">One of the enumeration values that specifies how the strings will be compared.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="prefix"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.StartsWith``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value starts with the specified <paramref name="prefix"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="prefix">The prefix this value should start with.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="prefix"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.StartsWith``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String,System.StringComparison,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value starts with the specified <paramref name="prefix"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="prefix">The prefix this value should start with.</param>
            <param name="compareType">One of the enumeration values that specifies how the strings will be compared.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> or <paramref name="prefix"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.IsByte``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value can be converted to a <see cref="T:System.Byte"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The <see cref="T:System.Byte"/> representation of the string.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.IsByte``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.Globalization.NumberStyles,System.IFormatProvider,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value can be converted to a <see cref="T:System.Byte"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="style">
            A bitwise combination of enumeration values that indicates the style elements that can be present
            in the <paramref name="member"/>'s value.
            </param>
            <param name="formatProvider">
            An object that supplies culture-specific formatting information about the <paramref name="member"/>'s value.
            </param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The <see cref="T:System.Byte"/> representation of the string.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.IsSByte``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value can be converted to a <see cref="T:System.SByte"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The <see cref="T:System.Byte"/> representation of the string.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.IsSByte``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.Globalization.NumberStyles,System.IFormatProvider,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value can be converted to a <see cref="T:System.SByte"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="style">
            A bitwise combination of enumeration values that indicates the style elements that can be present
            in the <paramref name="member"/>'s value.
            </param>
            <param name="formatProvider">
            An object that supplies culture-specific formatting information about the <paramref name="member"/>'s value.
            </param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The <see cref="T:System.Byte"/> representation of the string.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.IsChar``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value can be converted to a <see cref="T:System.Char"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The only character of the string.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.IsInt16``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value can be converted to a <see cref="T:System.Int16"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The <see cref="T:System.Int16"/> representation of the string.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.IsInt16``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.Globalization.NumberStyles,System.IFormatProvider,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value can be converted to a <see cref="T:System.Int16"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="style">
            A bitwise combination of enumeration values that indicates the style elements that can be present
            in the <paramref name="member"/>'s value.
            </param>
            <param name="formatProvider">
            An object that supplies culture-specific formatting information about the <paramref name="member"/>'s value.
            </param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The <see cref="T:System.Int16"/> representation of the string.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.IsInt32``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value can be converted to a <see cref="T:System.Int32"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The <see cref="T:System.Int32"/> representation of the string.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.IsInt32``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.Globalization.NumberStyles,System.IFormatProvider,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value can be converted to a <see cref="T:System.Int32"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="style">
            A bitwise combination of enumeration values that indicates the style elements that can be present
            in the <paramref name="member"/>'s value.
            </param>
            <param name="formatProvider">
            An object that supplies culture-specific formatting information about the <paramref name="member"/>'s value.
            </param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The <see cref="T:System.Int32"/> representation of the string.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.IsInt64``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value can be converted to a <see cref="T:System.Int64"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The <see cref="T:System.Int64"/> representation of the string.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.IsInt64``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.Globalization.NumberStyles,System.IFormatProvider,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value can be converted to a <see cref="T:System.Int64"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="style">
            A bitwise combination of enumeration values that indicates the style elements that can be present
            in the <paramref name="member"/>'s value.
            </param>
            <param name="formatProvider">
            An object that supplies culture-specific formatting information about the <paramref name="member"/>'s value.
            </param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The <see cref="T:System.Int64"/> representation of the string.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.IsSingle``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value can be converted to a <see cref="T:System.Single"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The <see cref="T:System.Single"/> representation of the string.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.IsSingle``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.Globalization.NumberStyles,System.IFormatProvider,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value can be converted to a <see cref="T:System.Single"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="style">
            A bitwise combination of enumeration values that indicates the style elements that can be present
            in the <paramref name="member"/>'s value.
            </param>
            <param name="formatProvider">
            An object that supplies culture-specific formatting information about the <paramref name="member"/>'s value.
            </param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The <see cref="T:System.Single"/> representation of the string.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.IsDouble``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value can be converted to a <see cref="T:System.Double"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The <see cref="T:System.Double"/> representation of the string.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.IsDouble``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.Globalization.NumberStyles,System.IFormatProvider,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value can be converted to a <see cref="T:System.Double"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="style">
            A bitwise combination of enumeration values that indicates the style elements that can be present
            in the <paramref name="member"/>'s value.
            </param>
            <param name="formatProvider">
            An object that supplies culture-specific formatting information about the <paramref name="member"/>'s value.
            </param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The <see cref="T:System.Double"/> representation of the string.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.IsDecimal``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value can be converted to a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The <see cref="T:System.Decimal"/> representation of the string.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringConstraints.IsDecimal``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.String},System.Globalization.NumberStyles,System.IFormatProvider,System.String)">
            <summary>
            Verifies that the <paramref name="member"/>'s value can be converted to a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="style">
            A bitwise combination of enumeration values that indicates the style elements that can be present
            in the <paramref name="member"/>'s value.
            </param>
            <param name="formatProvider">
            An object that supplies culture-specific formatting information about the <paramref name="member"/>'s value.
            </param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The <see cref="T:System.Decimal"/> representation of the string.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="T:Kingo.Constraints.StringIsIdentifierFilter">
            <summary>
            Represents a filter that transforms a string into an <see cref="T:Kingo.Identifier"/>.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.StringIsIdentifierFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringIsIdentifierFilter"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.StringIsIdentifierFilter.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsIdentifierFilter.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsIdentifierFilter.IsSatisfiedBy(System.String,Kingo.Identifier@)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.StringIsIdentifierFilter.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.EnumOperators`1">
            <summary>
            Contains several generic operators that can be used for Enum types.
            </summary>
            <typeparam name="TEnum">Type of the Enum</typeparam>
        </member>
        <member name="M:Kingo.EnumOperators`1.AllValuesCombined">
            <summary>
            Returns an Enum value where are values of the Enum are bitwise OR-ed into a single value.
            </summary>
            <returns>A bitwise OR-ed value of all defined values.</returns>
        </member>
        <member name="M:Kingo.EnumOperators`1.Or(`0,`0)">
            <summary>
            Performs a binary OR-operation on the specified Enum types.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>A value where the bits of <paramref name="x"/> and <paramref name="y"/> have been OR-ed.</returns>        
        </member>
        <member name="M:Kingo.EnumOperators`1.Or(`0,`0,`0[])">
            <summary>
            Performs a binary OR-operation on the specified Enum types.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <param name="values">A collection of Enum values.</param>
            <returns>A value where the bits of the specified <paramref name="values"/> have been OR-ed.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EnumOperators`1.Or(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Performs a binary OR-operation on the specified Enum types.
            </summary>        
            <param name="values">A collection of Enum values.</param>
            <returns>A value where the bits of the specified <paramref name="values"/> have been OR-ed.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EnumOperators`1.And(`0,`0)">
            <summary>
            Performs a binary AND-operation on the specified Enum types.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>A value where the bits of <paramref name="x"/> and <paramref name="y"/> have been AND-ed.</returns>        
        </member>
        <member name="M:Kingo.EnumOperators`1.And(`0,`0,`0[])">
            <summary>
            Performs a binary AND-operation on the specified Enum types.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <param name="values">A collection of Enum values.</param>
            <returns>A value where the bits of the specified <paramref name="values"/> have been AND-ed.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EnumOperators`1.And(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Performs a binary AND-operation on the specified Enum types.
            </summary>        
            <param name="values">A collection of Enum values.</param>
            <returns>A value where the bits of the specified <paramref name="values"/> have been AND-ed.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.CompositeValidator">
            <summary>
            Represents a validator that is composed of two other validators.
            </summary>    
        </member>
        <member name="T:Kingo.Messaging.IValidator">
            <summary>
            When implemented by a class, represents a validator for a specific instance.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.IValidator.Validate(System.Object)">
            <summary>
            Validates all values of the specified <paramref name="instance"/> and returns all the validation-errors, if any.
            </summary>   
            <param name="instance">The instance to validate.</param>             
            <returns>
            A <see cref="T:Kingo.Messaging.ErrorInfo"/> instance that contains all validation errors, if any. If <paramref name="instance"/>
            is <c>null</c> or this validator does not support the specified <paramref name="instance"/>,
            an empty <see cref="T:Kingo.Messaging.ErrorInfo"/> is returned.
            </returns>          
        </member>
        <member name="M:Kingo.Messaging.IValidator.MergeWith(Kingo.Messaging.IValidator,System.Boolean)">
            <summary>
            Merges this validator with another validator.
            </summary>
            <param name="validator">Another validator.</param>
            <param name="haltOnFirstError">
            Indicates whether or not the composite validator should not invoke the specified <paramref name="validator"/>
            validator when the current validator already detected errors on an instance.
            </param>
            <returns>
            A validator that contains the validation-logic of both the current and the specified <paramref name="validator"/>.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.CompositeValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.CompositeValidator.MergeWith(Kingo.Messaging.IValidator,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.CompositeValidator.Merge(Kingo.Messaging.IValidator,Kingo.Messaging.IValidator,System.Boolean)">
            <summary>
            Merges two validators into one.
            </summary>
            <param name="left">The first validator to merge.</param>
            <param name="right">The second validator to merge.</param>
            <param name="haltOnFirstError">
            Indicates whether or not the composite validator should not invoke the specified <paramref name="right"/>
            validator when the <paramref name="left"/> validator already detected errors on an instance.
            </param>
            <returns>A composite validator.</returns>        
        </member>
        <member name="T:Kingo.Messaging.Domain.DomainEvent">
            <summary>
            Serves as a base class for events that are published by aggregates.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.Domain.DomainEvent`2">
            <summary>
            Serves as a base class for events that are published by aggregates.
            </summary>
            <typeparam name="TKey">Key-type of the associated aggregate.</typeparam>
            <typeparam name="TVersion">Version-type of the associated aggregate.</typeparam>    
        </member>
        <member name="T:Kingo.Messaging.Domain.IHasKeyAndVersion`2">
            <summary>
            Represents an Aggregate, following the definition of a Domain Driven Design.
            </summary>
            <typeparam name="TKey">Key or identifier of the Aggregate.</typeparam>
            <typeparam name="TVersion">Version of the aggregate.</typeparam>
        </member>
        <member name="T:Kingo.Messaging.Domain.IHasKey`1">
            <summary>
            When implemented by a class, represents an object that can be identified by a unique key.
            </summary>
            <typeparam name="TKey">Type of the key or identifier of the object.</typeparam>
        </member>
        <member name="P:Kingo.Messaging.Domain.IHasKey`1.Key">
            <summary>
            The key or identifier of the object.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Domain.IHasKeyAndVersion`2.Version">
            <summary>
            Version of the Aggregate.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.Domain.DomainException">
            <summary>
            This type of exception is thrown when something goes wrong in the domain of an application.
            </summary>    
        </member>
        <member name="M:Kingo.Messaging.Domain.DomainException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.DomainException"/> class.
            </summary>
            <param name="message">Message of the exception.</param>
        </member>
        <member name="M:Kingo.Messaging.Domain.DomainException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.DomainException"/> class.
            </summary>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of the exception.</param>
        </member>
        <member name="M:Kingo.Messaging.Domain.DomainException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.DomainException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Kingo.Messaging.Domain.DomainException.CreateException(System.String,System.Object)">
            <summary>
            Formats the specified <paramref name="messageFormat"/> with the specified argument
            and creates and returns a new <see cref="T:Kingo.Messaging.Domain.DomainException"/> with the resulting message.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="argument">The message argument.</param>
            <returns>
            A new <see cref="T:Kingo.Messaging.Domain.DomainException"/> with the specified message.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageFormat"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="messageFormat"/> is not a valid format string.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.DomainException.CreateException(System.String,System.Object,System.Object)">
            <summary>
            Formats the specified <paramref name="messageFormat"/> with the specified arguments
            and creates and returns a new <see cref="T:Kingo.Messaging.Domain.DomainException"/> with the resulting message.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="argumentA">The first message argument.</param>
            <param name="argumentB">The second message argument.</param>
            <returns>
            A new <see cref="T:Kingo.Messaging.Domain.DomainException"/> with the specified message.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageFormat"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="messageFormat"/> is not a valid format string.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.DomainException.CreateException(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Formats the specified <paramref name="messageFormat"/> with the specified arguments
            and creates and returns a new <see cref="T:Kingo.Messaging.Domain.DomainException"/> with the resulting message.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="argumentA">The first message argument.</param>
            <param name="argumentB">The second message argument.</param>
            <param name="argumentC">The third message argument.</param>
            <returns>
            A new <see cref="T:Kingo.Messaging.Domain.DomainException"/> with the specified message.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageFormat"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="messageFormat"/> is not a valid format string.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.DomainException.CreateException(System.String,System.Object[])">
            <summary>
            Formats the specified <paramref name="messageFormat"/> with the specified arguments
            and creates and returns a new <see cref="T:Kingo.Messaging.Domain.DomainException"/> with the resulting message.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="arguments">The message arguments.</param>
            <returns>
            A new <see cref="T:Kingo.Messaging.Domain.DomainException"/> with the specified message.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageFormat"/> or <paramref name="arguments"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="messageFormat"/> is not a valid format string.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.DomainException.AsCommandExecutionException(System.Object)">
            <summary>
            Converts this instance into an instance of <see cref="T:Kingo.Messaging.CommandExecutionException"/>.
            </summary>
            <param name="failedMessage">The message that caused the exception.</param>
            <returns>
            An instance of <see cref="T:Kingo.Messaging.CommandExecutionException"/> that wraps this exception and the inner
            exception.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.DomainException.AsCommandExecutionException(System.Object,System.String)">
            <summary>
            Converts this instance into an instance of <see cref="T:Kingo.Messaging.CommandExecutionException"/>.
            </summary>
            <param name="failedMessage">The message that caused the exception.</param>
            <param name="message">Message of the exception.</param>
            <returns>
            An instance of <see cref="T:Kingo.Messaging.CommandExecutionException"/> that wraps this exception and the inner
            exception.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.DomainException.AsCommandExecutionException(System.Object,System.String,System.Exception)">
            <summary>
            Converts this instance into an instance of <see cref="T:Kingo.Messaging.CommandExecutionException"/>.
            </summary>
            <param name="failedMessage">The message that caused the exception.</param>
            <param name="message">Message of the exception.</param>
            <param name="innerException">This <see cref="T:Kingo.Messaging.Domain.DomainException"/>.</param>
            <returns>
            An instance of <see cref="T:Kingo.Messaging.CommandExecutionException"/> that wraps this exception and the inner
            exception.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.DomainException.AsTechnicalException(System.Object)">
            <summary>
            Converts this instance into an instance of <see cref="T:Kingo.Messaging.TechnicalException"/>.
            </summary>
            <param name="failedMessage">The message that caused the exception.</param>
            <returns>
            An instance of <see cref="T:Kingo.Messaging.TechnicalException"/> that wraps this exception and the inner
            exception.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.DomainException.AsTechnicalException(System.Object,System.String)">
            <summary>
            Converts this instance into an instance of <see cref="T:Kingo.Messaging.TechnicalException"/>.
            </summary>
            <param name="failedMessage">The message that caused the exception.</param>
            <param name="message">Message of the exception.</param>
            <returns>
            An instance of <see cref="T:Kingo.Messaging.TechnicalException"/> that wraps this exception and the inner
            exception.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Domain.DomainException.AsTechnicalException(System.Object,System.String,System.Exception)">
            <summary>
            Converts this instance into an instance of <see cref="T:Kingo.Messaging.TechnicalException"/>.
            </summary>
            <param name="failedMessage">The message that caused the exception.</param>
            <param name="message">Message of the exception.</param>
            <param name="innerException">This <see cref="T:Kingo.Messaging.Domain.DomainException"/>.</param>
            <returns>
            An instance of <see cref="T:Kingo.Messaging.TechnicalException"/> that wraps this exception and the inner
            exception.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.Domain.KeyAttribute">
            <summary>
            Can be used to decorate mark a field or property as the <see cref="!:IHasKeyAndVersion&lt;T, K&gt;.Key">Key</see> of an aggregate.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.Domain.VersionAttribute">
            <summary>
            Can be used to decorate mark a field or property as the <see cref="P:Kingo.Messaging.Domain.IHasKeyAndVersion`2.Version">Version</see> of an aggregate.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.ErrorInheritanceLevel">
            <summary>
            Represents a level of severity of an error message in relation to a certain member. The level
            itself indicates whether or not the error is associated to the member itself (<c>0</c>), or is inherited
            through one of its child-members (1 or higher).
            </summary>
        </member>
        <member name="F:Kingo.Messaging.ErrorInheritanceLevel.NotInherited">
            <summary>
            Represent a direct association of an error with a member.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.ErrorInheritanceLevel.MaxInherited">
            <summary>
            Represents the maximum level of inheritance, thus the weakest association possible.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.ErrorInheritanceLevel.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:Kingo.Messaging.ErrorInheritanceLevel"/> structure.
            </summary>
            <param name="value">Value of this structure.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.ErrorInheritanceLevel.Increment">
            <summary>
            Increments the current inheritance level by one.
            </summary>
            <returns>An incremented inheritance level.</returns>
        </member>
        <member name="M:Kingo.Messaging.ErrorInheritanceLevel.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.ErrorInheritanceLevel.Equals(Kingo.Messaging.ErrorInheritanceLevel)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.ErrorInheritanceLevel.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.ErrorInheritanceLevel.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="obj">An object to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="obj"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> is not an instance of type <see cref="T:Kingo.Messaging.ErrorInheritanceLevel"/>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.ErrorInheritanceLevel.CompareTo(Kingo.Messaging.ErrorInheritanceLevel)">
            <summary>
            Compares this instance to another <see cref="T:Kingo.Messaging.ErrorInheritanceLevel"/>-value and returns an
            indication of their relative values.
            </summary>
            <param name="other">Another value</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.ErrorInheritanceLevel.ToInt32">
            <summary>
            Converts the error level back to an integer.
            </summary>
            <returns>The integer value of this error level.</returns>
        </member>
        <member name="M:Kingo.Messaging.ErrorInheritanceLevel.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.ErrorInheritanceLevel.op_Equality(Kingo.Messaging.ErrorInheritanceLevel,Kingo.Messaging.ErrorInheritanceLevel)">
            <summary>
            Determines whether two specified <see cref="T:Kingo.Messaging.ErrorInheritanceLevel"/>-instances have the same value.
            </summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare</param>
            <returns><c>true</c> if both instances have the same value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Messaging.ErrorInheritanceLevel.op_Inequality(Kingo.Messaging.ErrorInheritanceLevel,Kingo.Messaging.ErrorInheritanceLevel)">
            <summary>
            Determines whether two specified <see cref="T:Kingo.Messaging.ErrorInheritanceLevel"/>-instances do not have the same value.
            </summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare</param>
            <returns><c>true</c> if both instances do not have the same value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Messaging.ErrorInheritanceLevel.op_LessThan(Kingo.Messaging.ErrorInheritanceLevel,Kingo.Messaging.ErrorInheritanceLevel)">
            <summary>Determines whether one value is smaller than another.</summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare.</param>
            <returns>
            <c>true</c> if the left operand is smaller than the right operand; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.ErrorInheritanceLevel.op_GreaterThan(Kingo.Messaging.ErrorInheritanceLevel,Kingo.Messaging.ErrorInheritanceLevel)">
            <summary>Determines whether one value is greater than another.</summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare.</param>
            <returns><c>true</c> if the left operand is greater than the right operand; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Messaging.ErrorInheritanceLevel.op_LessThanOrEqual(Kingo.Messaging.ErrorInheritanceLevel,Kingo.Messaging.ErrorInheritanceLevel)">
            <summary>Determines whether one value is smaller than or equal to another.</summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare.</param>
            <returns>
            <c>true</c> if the left operand is smaller than or equal to the right operand; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Messaging.ErrorInheritanceLevel.op_GreaterThanOrEqual(Kingo.Messaging.ErrorInheritanceLevel,Kingo.Messaging.ErrorInheritanceLevel)">
            <summary>Determines whether one value is greater than or equal to another.</summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare.</param>
            <returns>
            <c>true</c> if the left operand is greater than or equal to the right operand; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:Kingo.Identifier">
            <summary>
            Represents an identifier as defined by the C# language.
            </summary>
        </member>
        <member name="M:Kingo.Identifier.NewBuilder">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Identifier.Builder"/> to build a new <see cref="T:Kingo.Identifier"/> from a set of characters.
            </summary>
            <returns>A new <see cref="T:Kingo.Identifier.Builder"/>.</returns>
        </member>
        <member name="M:Kingo.Identifier.NewBuilder(System.Int32)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Identifier.Builder"/> to build a new <see cref="T:Kingo.Identifier"/> from a set of characters.
            </summary>
            <param name="capacity">The initial capacity of the builder; typically the expected length of the identifier.</param>
            <returns>A new <see cref="T:Kingo.Identifier.Builder"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is a negative number.
            </exception>
        </member>
        <member name="M:Kingo.Identifier.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Identifier.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Identifier.Equals(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Identifier.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Identifier.ParseOrNull(System.String)">
            <summary>
            Parses the specified <paramref name="value"/>, or returns <c>null</c> if <paramref name="value"/> is <c>null</c>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>
            A new <see cref="T:Kingo.Identifier"/> instance or <c>null</c> if <paramref name="value"/> is <c>null</c>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is not a valid identifier.
            </exception>
        </member>
        <member name="M:Kingo.Identifier.Parse(System.String)">
            <summary>
            Parses the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>
            A new <see cref="T:Kingo.Identifier"/> instance based on the specified <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is not a valid identifier.
            </exception>
        </member>
        <member name="M:Kingo.Identifier.TryParse(System.String,Kingo.Identifier@)">
            <summary>
            Attempts to parse the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="identifier">
            If this method returns <c>true</c>, this parameter will refer to the parsed <see cref="T:Kingo.Identifier"/>;
            otherwise <c>false</c>.
            </param>
            <returns>
            <c>true</c> if the specified <paramref name="value"/> could be parsed to an <see cref="T:Kingo.Identifier"/>;
            otherwise <c>false</c>.        
            </returns>        
        </member>
        <member name="M:Kingo.Identifier.op_Equality(Kingo.Identifier,Kingo.Identifier)">
            <summary>
            Determines whether or not <paramref name="left"/> is equal to <paramref name="right"/>.
            </summary>
            <param name="left">Left identifier.</param>
            <param name="right">Right identifier.</param>
            <returns><c>true</c> if both instances are considered equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Identifier.op_Inequality(Kingo.Identifier,Kingo.Identifier)">
            <summary>
            Determines whether or not <paramref name="left"/> is not equal to <paramref name="right"/>.
            </summary>
            <param name="left">Left identifier.</param>
            <param name="right">Right identifier.</param>
            <returns><c>true</c> if both instances are considered unequal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Identifier.op_Implicit(Kingo.Identifier)~System.String">
            <summary>
            Implicitly converts an identifier back to its string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>
            The string-representation of the identifier, or <c>null</c> if <paramref name="value"/> is <c>null</c>.
            </returns>
        </member>
        <member name="T:Kingo.Identifier.Builder">
            <summary>
            Represents a builder that can be used to build an <see cref="T:Kingo.Identifier"/> character by character.
            </summary>
        </member>
        <member name="M:Kingo.Identifier.Builder.Append(System.Char)">
            <summary>
            Attempts to append the specified <paramref name="character"/> to the identifier.
            </summary>
            <param name="character">the character to append.</param>
            <returns><c>true</c> if the specified <paramref name="character"/> was valid and appended; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Identifier.Builder.BuildIdentifier">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Identifier"/> based on all appended characters.            
            </summary>
            <returns>A new <see cref="T:Kingo.Identifier"/> instance.</returns>
            <exception cref="T:System.InvalidOperationException">
            No characters have been appended to the builder yet.
            </exception>
        </member>
        <member name="P:Kingo.Identifier.Builder.Length">
            <summary>
            Returns the current length of the identifier.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.CommandExecutionException">
            <summary>
            This exception is thrown when a business rule was violated while processing a command.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.FunctionalException">
            <summary>
            This exception is thrown when an application's pre-condition for handling a certain message failed.   
            </summary>
        </member>
        <member name="M:Kingo.Messaging.FunctionalException.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.FunctionalException"/> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.FunctionalException.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.FunctionalException"/> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <param name="message">Message of the exception.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.FunctionalException.#ctor(System.Object,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.FunctionalException"/> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.FunctionalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.FunctionalException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Kingo.Messaging.FunctionalException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.FunctionalException.FailedMessage">
            <summary>
            The message that could not be processed.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.CommandExecutionException.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.CommandExecutionException"/> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.CommandExecutionException.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.CommandExecutionException"/> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <param name="message">Message of the exception.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.CommandExecutionException.#ctor(System.Object,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.CommandExecutionException"/> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.CommandExecutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.CommandExecutionException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Kingo.LambdaExpressionExtensions">
            <summary>
            Contains extenion methods for the <see cref="T:System.Linq.Expressions.LambdaExpression"/> class.
            </summary>
        </member>
        <member name="M:Kingo.LambdaExpressionExtensions.ExtractMemberName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the name of the field or property accessed by the specified <paramref name="expression"/>.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>The name of the field or property that is accessed.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The name of a field or property could not be retrieved from the specified <paramref name="expression"/>.
            </exception>
        </member>
        <member name="M:Kingo.LambdaExpressionExtensions.TryExtractMemberName(System.Linq.Expressions.LambdaExpression,Kingo.Identifier@)">
            <summary>
            Attempts to return the name of the field or property accessed by the specified <paramref name="expression"/>.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <param name="memberName">
            If this method returns <c>true</c>, this parameter will refer to the name of the member that was extracted from the expression;
            otherwise it will be <c>null</c>.
            </param>
            <returns><c>true</c> if the name could be extracted; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.IErrorMessageBuilder">
            <summary>
            Represents a builder of an error message.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.IErrorMessageBuilder.Put(System.String,System.Object)">
            <summary>
            Assigns an argument to this error message that will be used to format the message on a call to one of the
            <see cref="M:Kingo.Messaging.IErrorMessageBuilder.ToString(System.IFormatProvider)"/> overloads. If an argument with the same name was already set, it
            will be replaced by the specified <paramref name="argument"/>.
            </summary>
            <param name="name">Name of the argument.</param>
            <param name="argument">Value of the argument.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is not a valid identifier, or
            an argument with the same name has already been added to this error message.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.IErrorMessageBuilder.Put(Kingo.Identifier,System.Object)">
            <summary>
            Adds an argument to this error message that will be used to format the message on a call to one of the
            <see cref="M:Kingo.Messaging.IErrorMessageBuilder.ToString(System.IFormatProvider)"/> overloads. If an argument with the same name was already set, it
            will be replaced by the specified <paramref name="argument"/>.
            </summary>
            <param name="name">Name of the argument.</param>
            <param name="argument">Value of the argument.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            An argument with the same name has already been added to this error message.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.IErrorMessageBuilder.ToString(System.IFormatProvider)">
            <summary>
            Returns a string-representation of the error message formatted using the specified <paramref name="formatProvider"/>.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> to use to format the error message.
            If <c>null</c>, the default formatter is used.
            </param>
            <returns>A string-representation of the error message.</returns>
        </member>
        <member name="T:Kingo.Messaging.TechnicalException">
            <summary>
            This exception can be thrown when an application's post-condition for handling a certain message failed.   
            </summary>
        </member>
        <member name="M:Kingo.Messaging.TechnicalException.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.FunctionalException"/> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.TechnicalException.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.FunctionalException"/> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <param name="message">Message of the exception.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.TechnicalException.#ctor(System.Object,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.FunctionalException"/> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.TechnicalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.FunctionalException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Kingo.Messaging.TechnicalException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.TechnicalException.FailedMessage">
            <summary>
            The message that could not be processed.
            </summary>
        </member>
        <member name="T:Kingo.Constraints.InputToOutputMapper`1">
            <summary>
            Represents a wrapper for an instance implementing the <see cref="T:Kingo.Constraints.IConstraint`1"/> interface
            so that it can be used as an instance implementing the <see cref="T:Kingo.Constraints.IFilter`2"/> interface.
            </summary>
            <typeparam name="TValue">Type of the constraint value.</typeparam>
        </member>
        <member name="M:Kingo.Constraints.InputToOutputMapper`1.#ctor(Kingo.Constraints.IConstraint{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.InputToOutputMapper`1"/> class.
            </summary>
            <param name="constraint">The constraint to wrap.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.InputToOutputMapper`1.AcceptVisitor(Kingo.Constraints.IConstraintVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.InputToOutputMapper`1.And(System.Predicate{`0},System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.InputToOutputMapper`1.And(System.Predicate{`0},Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.InputToOutputMapper`1.And(Kingo.Constraints.IConstraint{`0})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.InputToOutputMapper`1.And``1(Kingo.Constraints.IFilter{`0,``0})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.InputToOutputMapper`1.Or(System.Predicate{`0},System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.InputToOutputMapper`1.Or(System.Predicate{`0},Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.InputToOutputMapper`1.Or(Kingo.Constraints.IConstraint{`0})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.InputToOutputMapper`1.Invert">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.InputToOutputMapper`1.Invert(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.InputToOutputMapper`1.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.InputToOutputMapper`1.ToDelegate">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.InputToOutputMapper`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.InputToOutputMapper`1.IsSatisfiedBy(`0,`0@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.InputToOutputMapper`1.IsNotSatisfiedBy(`0,Kingo.Messaging.IErrorMessageBuilder@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.InputToOutputMapper`1.IsNotSatisfiedBy(`0,Kingo.Messaging.IErrorMessageBuilder@,`0@)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.IsNotEqualToConstraint`1">
            <summary>
            Represents a constraint that checks whether or not a value is equal to another value.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.IsNotEqualToConstraint`1.Other">
            <summary>
            The instance that the value is compared to.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.IsNotEqualToConstraint`1.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsNotEqualToConstraint`1"/> class.
            </summary>
            <param name="other">Instance to compare the value to.</param>
        </member>
        <member name="M:Kingo.Constraints.IsNotEqualToConstraint`1.#ctor(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsNotEqualToConstraint`1"/> class.
            </summary>
            <param name="other">Instance to compare the value to.</param>
            <param name="comparer">Optional comparer to use when comparing the two instances.</param>
        </member>
        <member name="M:Kingo.Constraints.IsNotEqualToConstraint`1.#ctor(System.IEquatable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsNotEqualToConstraint`1"/> class.
            </summary>
            <param name="other">Instance to compare the value to.</param>
        </member>
        <member name="M:Kingo.Constraints.IsNotEqualToConstraint`1.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsNotEqualToConstraint`1.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsNotEqualToConstraint`1.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsNotEqualToConstraint`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.IsNotEqualToConstraint`1.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.IsEqualToConstraint`1">
            <summary>
            Represents a constraint that checks whether or not a value is equal to another value.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.IsEqualToConstraint`1.Other">
            <summary>
            The instance that the value is compared to.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.IsEqualToConstraint`1.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsEqualToConstraint`1"/> class.
            </summary>
            <param name="other">Instance to compare the value to.</param>
        </member>
        <member name="M:Kingo.Constraints.IsEqualToConstraint`1.#ctor(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsEqualToConstraint`1"/> class.
            </summary>
            <param name="other">Instance to compare the value to.</param>
            <param name="comparer">Optional comparer to use when comparing the two instances.</param>
        </member>
        <member name="M:Kingo.Constraints.IsEqualToConstraint`1.#ctor(System.IEquatable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsEqualToConstraint`1"/> class.
            </summary>
            <param name="other">Instance to compare the value to.</param>
        </member>
        <member name="M:Kingo.Constraints.IsEqualToConstraint`1.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsEqualToConstraint`1.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsEqualToConstraint`1.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsEqualToConstraint`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.IsEqualToConstraint`1.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.IsGreaterThanConstraint`1">
            <summary>
            Represents a constraint that checks whether or not a value is greater than another value.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.IsGreaterThanConstraint`1.Other">
            <summary>
            Instance to compare the value to.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.IsGreaterThanConstraint`1.#ctor(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsGreaterThanConstraint`1"/> class.
            </summary>    
            <param name="other">Instance to compare the value to.</param>
            <param name="comparer">Optional comparer to use when comparing the two instances.</param>
        </member>
        <member name="M:Kingo.Constraints.IsGreaterThanConstraint`1.#ctor(System.IComparable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsGreaterThanConstraint`1"/> class.
            </summary>    
            <param name="other">Instance to compare the value to.</param>
        </member>
        <member name="M:Kingo.Constraints.IsGreaterThanConstraint`1.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsGreaterThanConstraint`1.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsGreaterThanConstraint`1.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsGreaterThanConstraint`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.IsGreaterThanConstraint`1.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.IsGreaterThanOrEqualToConstraint`1">
            <summary>
            Represents a constraint that checks whether or not a value is greater than or equal to another value.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.IsGreaterThanOrEqualToConstraint`1.Other">
            <summary>
            Instance to compare the value to.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.IsGreaterThanOrEqualToConstraint`1.#ctor(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsGreaterThanOrEqualToConstraint`1"/> class.
            </summary>    
            <param name="other">Instance to compare the value to.</param>
            <param name="comparer">Optional comparer to use when comparing the two instances.</param>
        </member>
        <member name="M:Kingo.Constraints.IsGreaterThanOrEqualToConstraint`1.#ctor(System.IComparable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsGreaterThanOrEqualToConstraint`1"/> class.
            </summary>    
            <param name="other">Instance to compare the value to.</param>
        </member>
        <member name="M:Kingo.Constraints.IsGreaterThanOrEqualToConstraint`1.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsGreaterThanOrEqualToConstraint`1.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsGreaterThanOrEqualToConstraint`1.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsGreaterThanOrEqualToConstraint`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.IsGreaterThanOrEqualToConstraint`1.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.IsInstanceOfFilter`2">
            <summary>
            Represents a filter that transforms a value into another type of value.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.IsInstanceOfFilter`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsInstanceOfFilter`2"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.IsInstanceOfFilter`2.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsInstanceOfFilter`2.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsInstanceOfFilter`2.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsInstanceOfFilter`2.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsInstanceOfFilter`2.IsSatisfiedBy(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.IsInstanceOfFilter`2.Type">
            <summary>
            Returns the type that the value is compared to or cast to.
            </summary>
        </member>
        <member name="P:Kingo.Constraints.IsInstanceOfFilter`2.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.AsFilter`2">
            <summary>
            Represents a filter that transforms a value into another type of value. This filter
            always succeeds, but outputs a <c>null</c> value if the conversion failed.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.AsFilter`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.AsFilter`2"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.AsFilter`2.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.AsFilter`2.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.AsFilter`2.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.AsFilter`2.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.AsFilter`2.IsSatisfiedBy(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.IsNotNullConstraint`1">
            <summary>
            Represents a constraint that checks whether or not a value is  not <c>null</c>.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.IsNotNullConstraint`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsNotNullConstraint`1"/> class.
            </summary>        
        </member>
        <member name="M:Kingo.Constraints.IsNotNullConstraint`1.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsNotNullConstraint`1.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsNotNullConstraint`1.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsNotNullConstraint`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.IsNotNullConstraint`1.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.IsNullConstraint`1">
            <summary>
            Represents a constraint that checks whether or not a value is <c>null</c>.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.IsNullConstraint`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsNullConstraint`1"/> class.
            </summary>       
        </member>
        <member name="M:Kingo.Constraints.IsNullConstraint`1.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsNullConstraint`1.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsNullConstraint`1.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsNullConstraint`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.IsNullConstraint`1.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.IsNotSameInstanceAsConstraint`1">
            <summary>
            Represents a constraint that checks whether or not a value refers to the same instance as another value.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.IsNotSameInstanceAsConstraint`1.Other">
            <summary>
            The instance to compare the value to.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.IsNotSameInstanceAsConstraint`1.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsNotSameInstanceAsConstraint`1"/> class.
            </summary>    
            <param name="other">The instance to compare the value to.</param>
        </member>
        <member name="M:Kingo.Constraints.IsNotSameInstanceAsConstraint`1.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsNotSameInstanceAsConstraint`1.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsNotSameInstanceAsConstraint`1.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsNotSameInstanceAsConstraint`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.IsNotSameInstanceAsConstraint`1.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.IsSameInstanceAsConstraint`1">
            <summary>
            Represents a constraint that checks whether or not a value refers to the same instance as another value.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.IsSameInstanceAsConstraint`1.Other">
            <summary>
            The instance to compare the value to.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.IsSameInstanceAsConstraint`1.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsSameInstanceAsConstraint`1"/> class.
            </summary>    
            <param name="other">The instance to compare the value to.</param>
        </member>
        <member name="M:Kingo.Constraints.IsSameInstanceAsConstraint`1.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsSameInstanceAsConstraint`1.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsSameInstanceAsConstraint`1.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsSameInstanceAsConstraint`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.IsSameInstanceAsConstraint`1.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.IsSmallerThanConstraint`1">
            <summary>
            Represents a constraint that checks whether or not a value is smaller than another value.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.IsSmallerThanConstraint`1.Other">
            <summary>
            Instance to compare the value to.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.IsSmallerThanConstraint`1.#ctor(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsSmallerThanConstraint`1"/> class.
            </summary>    
            <param name="other">Instance to compare the value to.</param>
            <param name="comparer">Optional comparer to use when comparing the two instances.</param>
        </member>
        <member name="M:Kingo.Constraints.IsSmallerThanConstraint`1.#ctor(System.IComparable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsSmallerThanConstraint`1"/> class.
            </summary>    
            <param name="other">Instance to compare the value to.</param>        
        </member>
        <member name="M:Kingo.Constraints.IsSmallerThanConstraint`1.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsSmallerThanConstraint`1.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsSmallerThanConstraint`1.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsSmallerThanConstraint`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.IsSmallerThanConstraint`1.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.IsSmallerThanOrEqualToConstraint`1">
            <summary>
            Represents a constraint that checks whether or not a value is smaller than or equal to another value.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.IsSmallerThanOrEqualToConstraint`1.Other">
            <summary>
            Instance to compare the value to.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.IsSmallerThanOrEqualToConstraint`1.#ctor(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsSmallerThanOrEqualToConstraint`1"/> class.
            </summary>    
            <param name="other">Instance to compare the value to.</param>
            <param name="comparer">Optional comparer to use when comparing the two instances.</param>
        </member>
        <member name="M:Kingo.Constraints.IsSmallerThanOrEqualToConstraint`1.#ctor(System.IComparable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsSmallerThanOrEqualToConstraint`1"/> class.
            </summary>    
            <param name="other">Instance to compare the value to.</param>        
        </member>
        <member name="M:Kingo.Constraints.IsSmallerThanOrEqualToConstraint`1.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsSmallerThanOrEqualToConstraint`1.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsSmallerThanOrEqualToConstraint`1.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsSmallerThanOrEqualToConstraint`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.IsSmallerThanOrEqualToConstraint`1.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.ConstraintInverter`1">
            <summary>
            Represents a constraint that negates another constraint.
            </summary>
            <typeparam name="TValue">Type of the constraint value.</typeparam>
        </member>
        <member name="M:Kingo.Constraints.ConstraintInverter`1.#ctor(Kingo.Constraints.IConstraintWithErrorMessage{`0},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.ConstraintInverter`1"/> class.
            </summary>
            <param name="constraint">The constraint that is to be negated.</param>  
            <param name="errorMessage">Error message to use when no other is specified.</param>      
            <param name="name">Name to use when no other is specified.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format or <paramref name="name"/> is not a valid identifier.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.ConstraintInverter`1.#ctor(Kingo.Constraints.IConstraintWithErrorMessage{`0},Kingo.StringTemplate,Kingo.Identifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.ConstraintInverter`1"/> class.
            </summary>
            <param name="constraint">The constraint that is to be negated.</param>  
            <param name="errorMessage">Error message to use when no other is specified.</param>      
            <param name="name">Name to use when no other is specified.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.ConstraintInverter`1.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.ConstraintInverter`1.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.ConstraintInverter`1.AcceptVisitor(Kingo.Constraints.IConstraintVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.ConstraintInverter`1.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.ConstraintInverter`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.ConstraintInverter`1.IsNotSatisfiedBy(`0,Kingo.Messaging.IErrorMessageBuilder@)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.ConstraintInverter`1.NameIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.ConstraintInverter`1.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.NullConstraint`1">
            <summary>
            Represents a constraint that is always satisfied.
            </summary>
            <typeparam name="TValue">Type of the constraint value.</typeparam>
        </member>
        <member name="M:Kingo.Constraints.NullConstraint`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.NullConstraint`1"/> class.
            </summary>        
        </member>
        <member name="M:Kingo.Constraints.NullConstraint`1.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.NullConstraint`1.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.NullConstraint`1.And(Kingo.Constraints.IConstraint{`0})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.NullConstraint`1.Or(Kingo.Constraints.IConstraint{`0})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.NullConstraint`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.StringContainsConstraint">
            <summary>
            Represents a constraint that checks whether or not a string contains a certain value.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.StringContainsConstraint.Value">
            <summary>
            The value to check for.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.StringContainsConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringContainsConstraint"/> class.
            </summary>    
            <param name="value">The value to check for.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringContainsConstraint.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringContainsConstraint.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringContainsConstraint.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringContainsConstraint.IsSatisfiedBy(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.StringContainsConstraint.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.StringEndsWithConstraint">
            <summary>
            Represents a constraint that checks whether or not a <see cref="T:System.String"/> ends with a certain value.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.StringEndsWithConstraint.Postfix">
            <summary>
            The postfix the value should end with.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.StringEndsWithConstraint.CompareType">
            <summary>
            One of the enumeration values that specifies how the strings will be compared.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.StringEndsWithConstraint.#ctor(System.String,System.StringComparison)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringEndsWithConstraint"/> class.
            </summary>    
            <param name="postfix">The prefix the value should end with.</param>
            <param name="compareType">One of the enumeration values that specifies how the strings will be compared.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="postfix"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringEndsWithConstraint.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringEndsWithConstraint.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringEndsWithConstraint.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringEndsWithConstraint.IsSatisfiedBy(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.StringEndsWithConstraint.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.StringIsNotEqualToConstraint">
            <summary>
            Represents a constraint that checks whether or not a string is equal to another string.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.StringIsNotEqualToConstraint.Other">
            <summary>
            The value to compare.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.StringIsNotEqualToConstraint.CompareType">
            <summary>
            One of the enumeration values that specifies how the strings will be compared.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.StringIsNotEqualToConstraint.#ctor(System.String,System.StringComparison)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringIsNotEqualToConstraint"/> class.
            </summary>    
            <param name="other">The value to compare.</param>
            <param name="compareType">One of the enumeration values that specifies how the strings will be compared.</param>
        </member>
        <member name="M:Kingo.Constraints.StringIsNotEqualToConstraint.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsNotEqualToConstraint.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsNotEqualToConstraint.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsNotEqualToConstraint.IsSatisfiedBy(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.StringIsNotEqualToConstraint.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.StringIsEqualToConstraint">
            <summary>
            Represents a constraint that checks whether or not a string is equal to another string.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.StringIsEqualToConstraint.Other">
            <summary>
            The value to compare.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.StringIsEqualToConstraint.CompareType">
            <summary>
            One of the enumeration values that specifies how the strings will be compared.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.StringIsEqualToConstraint.#ctor(System.String,System.StringComparison)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringIsEqualToConstraint"/> class.
            </summary>    
            <param name="other">The value to compare.</param>
            <param name="compareType">One of the enumeration values that specifies how the strings will be compared.</param>
        </member>
        <member name="M:Kingo.Constraints.StringIsEqualToConstraint.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsEqualToConstraint.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsEqualToConstraint.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsEqualToConstraint.IsSatisfiedBy(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.StringIsEqualToConstraint.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.StringIsNotNullOrEmptyConstraint">
            <summary>
            Represents a constraint that checks whether or not a string is <c>null</c> or empty.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.StringIsNotNullOrEmptyConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringIsNotNullOrEmptyConstraint"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.StringIsNotNullOrEmptyConstraint.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsNotNullOrEmptyConstraint.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsNotNullOrEmptyConstraint.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsNotNullOrEmptyConstraint.IsSatisfiedBy(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.StringIsNotNullOrEmptyConstraint.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.StringIsNullOrEmptyConstraint">
            <summary>
            Represents a constraint that checks whether or not a string is <c>null</c> or empty.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.StringIsNullOrEmptyConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringIsNullOrEmptyConstraint"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.StringIsNullOrEmptyConstraint.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsNullOrEmptyConstraint.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsNullOrEmptyConstraint.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsNullOrEmptyConstraint.IsSatisfiedBy(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.StringIsNullOrEmptyConstraint.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.StringIsNotNullOrWhiteSpaceConstraint">
            <summary>
            Represents a constraint that checks whether or not a string is <c>null</c> or empty.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.StringIsNotNullOrWhiteSpaceConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringIsNotNullOrWhiteSpaceConstraint"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.StringIsNotNullOrWhiteSpaceConstraint.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsNotNullOrWhiteSpaceConstraint.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsNotNullOrWhiteSpaceConstraint.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsNotNullOrWhiteSpaceConstraint.IsSatisfiedBy(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.StringIsNotNullOrWhiteSpaceConstraint.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.StringIsNullOrWhiteSpaceConstraint">
            <summary>
            Represents a constraint that checks whether or not a string is <c>null</c> or empty.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.StringIsNullOrWhiteSpaceConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringIsNullOrWhiteSpaceConstraint"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.StringIsNullOrWhiteSpaceConstraint.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsNullOrWhiteSpaceConstraint.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsNullOrWhiteSpaceConstraint.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsNullOrWhiteSpaceConstraint.IsSatisfiedBy(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.StringIsNullOrWhiteSpaceConstraint.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.StringMatchesConstraint">
            <summary>
            Represents a constraint that checks whether or not a string matches a specified pattern.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.StringMatchesConstraint.Pattern">
            <summary>
            The pattern to match.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.StringMatchesConstraint.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringMatchesConstraint"/> class.
            </summary>    
            <param name="pattern">The pattern to match.</param>
            <param name="options">A bitwise combination of the enumeration values that provide options for matching.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="pattern"/> is not a valid regular expression.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringMatchesConstraint.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringMatchesConstraint"/> class.
            </summary>
            <param name="pattern">The pattern to match.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pattern"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringMatchesConstraint.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringMatchesConstraint.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringMatchesConstraint.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringMatchesConstraint.IsSatisfiedBy(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.StringMatchesConstraint.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.StringStartsWithConstraint">
            <summary>
            Represents a constraint that checks whether or not a <see cref="T:System.String"/> starts with a certain value.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.StringStartsWithConstraint.Prefix">
            <summary>
            The prefix the value should start with.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.StringStartsWithConstraint.CompareType">
            <summary>
            One of the enumeration values that specifies how the strings will be compared.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.StringStartsWithConstraint.#ctor(System.String,System.StringComparison)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringStartsWithConstraint"/> class.
            </summary>    
            <param name="prefix">The prefix the value should start with.</param>
            <param name="compareType">One of the enumeration values that specifies how the strings will be compared.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="prefix"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.StringStartsWithConstraint.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringStartsWithConstraint.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringStartsWithConstraint.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringStartsWithConstraint.IsSatisfiedBy(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.StringStartsWithConstraint.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.ErrorInfoBuilder">
            <summary>
            A builder that can be used to build an instance of the <see cref="T:Kingo.Messaging.ErrorInfo"/> class.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.ErrorInfoBuilder.#ctor(System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.ErrorInfoBuilder"/> class.
            </summary>
            <param name="formatProvider">Optional <see cref="T:System.IFormatProvider"/> to use when formatting error messages.</param>
        </member>
        <member name="M:Kingo.Messaging.ErrorInfoBuilder.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.ErrorInfoBuilder.Add(System.String,System.String,Kingo.Messaging.ErrorInheritanceLevel)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.ErrorInfoBuilder.BuildErrorInfo">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Messaging.ErrorInfo"/> instance containing all added error messages.
            </summary>
            <returns>A new <see cref="T:Kingo.Messaging.ErrorInfo"/> instance.</returns>
        </member>
        <member name="M:Kingo.Messaging.ErrorInfoBuilder.ConvertToSingleErrorMessage(Kingo.Messaging.SortedErrorMessageList)">
            <summary>
            Converts the specified list of <paramref name="errorMessages"/> to a single error message. By default,
            the first error message with the lowest inheritance level is selected.       
            </summary>
            <param name="errorMessages">A list of error messages.</param>
            <returns>A single error message.</returns>
        </member>
        <member name="M:Kingo.Messaging.ErrorInfoBuilder.BuildDataErrorInfo(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Messaging.ErrorInfo"/> instance containing all added error messages.
            </summary>
            <returns>A new <see cref="T:Kingo.Messaging.ErrorInfo"/> instance.</returns>
        </member>
        <member name="P:Kingo.Messaging.ErrorInfoBuilder.FormatProvider">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.InvalidMessageException">
            <summary>
            This exception or any derived type is thrown if a request was found to be invalid
            when executing it.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.InvalidMessageException.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.InvalidMessageException"/> class.
            </summary>
            <param name="failedMessage">The invalid request.</param>  
            <param name="message">Message of the exception.</param>     
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="M:Kingo.Messaging.InvalidMessageException.#ctor(System.Object,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.InvalidMessageException"/> class.
            </summary>
            <param name="failedMessage">The invalid request.</param>  
            <param name="message">Message of the exception.</param>  
            <param name="innerException">Cause of this exception.</param>    
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="M:Kingo.Messaging.InvalidMessageException.#ctor(System.Object,System.String,Kingo.Messaging.ErrorInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.InvalidMessageException"/> class.
            </summary>
            <param name="failedMessage">The invalid request.</param>  
            <param name="message">Message of the exception.</param> 
            <param name="errorInfo">
            If specified, contains all the validation-errors of the <paramref name="failedMessage"/>.
            </param>
        </member>
        <member name="M:Kingo.Messaging.InvalidMessageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.InvalidMessageException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Kingo.Messaging.InvalidMessageException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.InvalidMessageException.ErrorInfo">
            <summary>
            If specified, contains all the validation-errors of the <see cref="P:Kingo.Messaging.FunctionalException.FailedMessage"/>.
            </summary>
        </member>
        <member name="T:Kingo.Security.AuthorizationException">
            <summary>
            This exception is thrown when the current user, typically the identity of the sender of a message,
            has insufficient rights to process a specific message.
            </summary>
        </member>
        <member name="M:Kingo.Security.AuthorizationException.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Security.AuthorizationException"/> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Security.AuthorizationException.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.FunctionalException"/> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <param name="message">Message of the exception.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Security.AuthorizationException.#ctor(System.Object,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.FunctionalException"/> class.
            </summary>
            <param name="failedMessage">The message that could not be processed.</param>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="failedMessage"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Security.AuthorizationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.FunctionalException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Kingo.Messaging.NullValidator">
            <summary>
            Represents a validator that performs no validation at all.
            </summary>    
        </member>
        <member name="M:Kingo.Messaging.NullValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.NullValidator.MergeWith(Kingo.Messaging.IValidator,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Resources.ErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.BasicConstraints_Default">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) is not valid..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.BasicConstraints_IsEqualTo">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must be equal to &apos;{constraint.Other}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.BasicConstraints_IsGreaterThan">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must be greater than &apos;{constraint.Other}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.BasicConstraints_IsGreaterThanOrEqualTo">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must be greater than or equal to &apos;{constraint.Other}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.BasicConstraints_IsInRange">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must be within the following range: {constraint.Range}..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.BasicConstraints_IsInstanceOf">
            <summary>
              Looks up a localized string similar to {member} of type &apos;{member.Type.FullName}&apos; must be an instance of type &apos;{constraint.Type.FullName}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.BasicConstraints_IsNotEqualTo">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must not be equal to &apos;{constraint.Other}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.BasicConstraints_IsNotInRange">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must not be within the following range: {constraint.Range}..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.BasicConstraints_IsNotInstanceOf">
            <summary>
              Looks up a localized string similar to {member} of type &apos;{member.Type.FullName}&apos; must not be an instance of type &apos;{constraint.Type.FullName}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.BasicConstraints_IsNotNull">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must refer to an instance of an object..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.BasicConstraints_IsNotSameInstanceAs">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must not refer to the same instance as &apos;{constraint.Other}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.BasicConstraints_IsNull">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must be null..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.BasicConstraints_IsSameInstanceAs">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must refer to the same instance as &apos;{constraint.Other}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.BasicConstraints_IsSmallerThan">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must be smaller than &apos;{constraint.Other}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.BasicConstraints_IsSmallerThanOrEqualTo">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must be smaller than or equal to &apos;{constraint.Other}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.BasicConstraints_MultipleConstraintsFailed">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) did not satisfy the following constraint: &apos;{constraint}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.BooleanConstraints_IsFalse">
            <summary>
              Looks up a localized string similar to {member} (true) must be false..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.BooleanConstraints_IsTrue">
            <summary>
              Looks up a localized string similar to {member} (false) must be true..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.CollectionConstraints_HasItem">
            <summary>
              Looks up a localized string similar to {member} ({member.Value.Count} item(s)) contains no element at key or index {constraint.IndexList}..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.CollectionConstraints_HasNoItem">
            <summary>
              Looks up a localized string similar to {member} ({member.Value.Count} item(s)) does contain an element at {constraint.IndexList}..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.CollectionConstraints_IsNotNullOrEmpty">
            <summary>
              Looks up a localized string similar to {member} must not be null and contain at least one element..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.CollectionConstraints_IsNullOrEmpty">
            <summary>
              Looks up a localized string similar to {member} ({member.Value.Count} item(s)) must be null or empty..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.EnumConstraints_HasFlag">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) does not have all bitflags specified by &apos;{constraint.Flag}&apos; set..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.EnumConstraints_IsDefined">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) is not defined in Enum of type {constraint.EnumType.Name}..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.EnumConstraints_IsInRangeOfValidValues">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) has a value or contains bitflags that are not defined by type {constraint.EnumType.Name}..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.GuidConstraints_IsEmpty">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must be empty..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.GuidConstraints_IsNotEmpty">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must not be empty..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.ListConstraints_ElementAt">
            <summary>
              Looks up a localized string similar to {member} ({member.Value.Count} item(s)) contains no element at index {constraint.Index}..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.NullableConstraints_HasValue">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must have a value..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.StringConstraints_Contains">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must contain &apos;{constraint.Value}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.StringConstraints_DoesNotContain">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must not contain &apos;{constraint.Value}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.StringConstraints_DoesNotEndWith">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must not end with &apos;{constraint.Postfix}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.StringConstraints_DoesNotMatch">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must not match pattern &apos;{constraint.Pattern}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.StringConstraints_DoesNotStartWith">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must not start with &apos;{constraint.Prefix}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.StringConstraints_EndsWith">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must end with &apos;{constraint.Postfix}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.StringConstraints_IsByte">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) could not be converted to a byte..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.StringConstraints_IsChar">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) could not be converted to a single character..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.StringConstraints_IsDecimal">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) could not be converted to a 96-bit floating point number..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.StringConstraints_IsDouble">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) could not be converted to a 64-bit floating point number..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.StringConstraints_IsIdentifier">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) could not be converted to an identifier..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.StringConstraints_IsInt16">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) could not be converted to a 16-bit integer..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.StringConstraints_IsInt32">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) could not be converted to a 32-bit integer..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.StringConstraints_IsInt64">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) could not be converted to a 64-bit integer..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.StringConstraints_IsSByte">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) could not be converted to a signed byte..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.StringConstraints_IsSingle">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) could not be converted to a 32-bit floating point number..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.StringConstraints_Matches">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must match pattern &apos;{constraint.Pattern}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.StringConstraints_NotNullOrEmpty">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) is not allowed to be null or empty..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.StringConstraints_NotNullOrWhiteSpace">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) is not allowed to be null or contain only white space..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.StringConstraints_NullOrEmpty">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must be either null or empty..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.StringConstraints_NullOrWhiteSpace">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must be either null or contain only white space..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ErrorMessages.StringConstraints_StartsWith">
            <summary>
              Looks up a localized string similar to {member} ({member.Value}) must start with &apos;{constraint.Prefix}&apos;..
            </summary>
        </member>
        <member name="T:Kingo.Messaging.SortedErrorMessageList">
            <summary>
            Represents a list of error messages that is sorted by its inheritance level.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.SortedErrorMessageList.CountNonInheritedErrors">
            <summary>
            Returns the number of non-herited error messages in this list.
            </summary>
            <returns>The number of non-herited error messages in this list.</returns>
        </member>
        <member name="M:Kingo.Messaging.SortedErrorMessageList.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.SortedErrorMessageList.ToString">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.SortedErrorMessageList.Count">
            <summary>
            Returns the number of error messages in this list.
            </summary>
        </member>
        <member name="T:Kingo.StringTemplate">
            <summary>
            Represents a format string that can contain placeholder values that are identified by an instance name.
            </summary>
        </member>
        <member name="F:Kingo.StringTemplate.NullValue">
            <summary>
            The value that is used in templates to represent the <c>null</c>-value.
            </summary>
        </member>
        <member name="M:Kingo.StringTemplate.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.StringTemplate.Equals(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.StringTemplate.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Kingo.StringTemplate.Format(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Kingo.Identifier,System.Object}},System.IFormatProvider)">
            <summary>
            Replaces all placeholders of this template with the argument-values that are specified in the collection.
            </summary>
            <param name="arguments">A collection of arguments.</param>
            <param name="formatProvider">Optional <see cref="T:System.IFormatProvider"/> that is used for placeholders that define a specific format.</param>
            <returns>A new <see cref="T:Kingo.StringTemplate"/> that has replaced all matching placeholder with their values.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="arguments"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.StringTemplate.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Replaces all placeholders of the specified <paramref name="identifier"/> with the value of <paramref name="argument"/>.
            </summary>
            <param name="identifier">Identifier of the placeholder.</param>
            <param name="argument">Value of the placeholder.</param>
            <param name="formatProvider">Optional <see cref="T:System.IFormatProvider"/> that is used for placeholders that define a specific format.</param>
            <returns>A new <see cref="T:Kingo.StringTemplate"/> that has replaced all matching placeholder with their values.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="identifier"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="identifier"/> is not a valid identifier.
            </exception>
        </member>
        <member name="M:Kingo.StringTemplate.Format(Kingo.Identifier,System.Object,System.IFormatProvider)">
            <summary>
            Replaces all placeholders of the specified <paramref name="identifier"/> with the value of <paramref name="argument"/>.
            </summary>
            <param name="identifier">Identifier of the placeholder.</param>
            <param name="argument">Value of the placeholder.</param>
            <param name="formatProvider">Optional <see cref="T:System.IFormatProvider"/> that is used for placeholders that define a specific format.</param>
            <returns>A new <see cref="T:Kingo.StringTemplate"/> that has replaced all matching placeholder with their values.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="identifier"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.StringTemplate.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.StringTemplate.Concat(System.String)">
            <summary>
            Concatenates this template with another template.
            </summary>
            <param name="template">The template to concatenate.</param>
            <returns>The concatenated template.</returns>
        </member>
        <member name="M:Kingo.StringTemplate.Concat(Kingo.StringTemplate)">
            <summary>
            Concatenates this template with another template.
            </summary>
            <param name="template">The template to concatenate.</param>
            <returns>The concatenated template.</returns>
        </member>
        <member name="M:Kingo.StringTemplate.op_Addition(Kingo.StringTemplate,System.String)">
            <summary>
            Returns the concatenation of <paramref name="left"/> and <paramref name="right"/>.
            </summary>
            <param name="left">Left template.</param>
            <param name="right">Right template.</param>
            <returns>The concatenated template.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="right"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.StringTemplate.op_Addition(Kingo.StringTemplate,Kingo.StringTemplate)">
            <summary>
            Returns the concatenation of <paramref name="left"/> and <paramref name="right"/>.
            </summary>
            <param name="left">Left template.</param>
            <param name="right">Right template.</param>
            <returns>The concatenated template.</returns>
        </member>
        <member name="M:Kingo.StringTemplate.ParseOrNull(System.String)">
            <summary>
            Parses the specified <paramref name="templateFormat"/> such that it can be formatted using arbitrary arguments.
            </summary>
            <param name="templateFormat">The format string to parse.</param>
            <returns><c>null</c> if <paramref name="templateFormat"/> is <c>null</c>; otherwise a parsed format string.</returns>        
            <exception cref="T:System.ArgumentException">
            <paramref name="templateFormat"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.StringTemplate.Parse(System.String)">
            <summary>
            Parses the specified <paramref name="templateFormat"/> such that it can be formatted using arbitrary arguments.
            </summary>
            <param name="templateFormat">The format string to parse.</param>
            <returns>A new <see cref="T:Kingo.StringTemplate"/> instance.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="templateFormat"/> is <c>null</c>.
            </exception>       
            <exception cref="T:System.ArgumentException">
            <paramref name="templateFormat"/> is not in a correct format.
            </exception>
        </member>
        <member name="P:Kingo.StringTemplate.LiteralCount">
            <summary>
            Returns the amount of literal characters in this template.
            </summary>
        </member>
        <member name="T:Kingo.Constraints.IsNotInRangeConstraint`1">
            <summary>
            Represents a constraint that checks whether or not a value is within a certain range of values.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.IsNotInRangeConstraint`1.Range">
            <summary>
            The range that the value is checked to be a part of.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.IsNotInRangeConstraint`1.#ctor(`0,`0,Kingo.RangeOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsNotInRangeConstraint`1"/> class.
            </summary>
            <param name="left">The lower boundary of this range.</param>
            <param name="right">The upper boundary of this range.</param>        
            <param name="options">
            The options indicating whether or <paramref name="left"/> and/or <paramref name="right"/> are part of this range themselves.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="left"/> and <paramref name="right"/> do not represent a valid range
            - or -
            both are equal and <paramref name="options"/> specifies at least one exclusive boundary
            - or -
            the specified instances do not implement the <see cref="T:System.IComparable`1"/> interface.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IsNotInRangeConstraint`1.#ctor(`0,`0,System.Collections.Generic.IComparer{`0},Kingo.RangeOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsNotInRangeConstraint`1"/> class.
            </summary>
            <param name="left">The lower boundary of this range.</param>
            <param name="right">The upper boundary of this range.</param>
            <param name="comparer">Optional comparer to use when comparing two instances.</param>
            <param name="options">
            The options indicating whether or <paramref name="left"/> and/or <paramref name="right"/> are part of this range themselves.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="left"/> and <paramref name="right"/> do not represent a valid range
            - or -
            both are equal and <paramref name="options"/> specifies at least one exclusive boundary
            - or -
            <paramref name="comparer"/> is <c>null</c> and the specified instances do not implement the <see cref="T:System.IComparable`1"/> interface.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IsNotInRangeConstraint`1.#ctor(Kingo.IRange{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsNotInRangeConstraint`1"/> class.
            </summary>   
            <param name="range">The range that the value is checked to be a part of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="range"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="M:Kingo.Constraints.IsNotInRangeConstraint`1.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsNotInRangeConstraint`1.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsNotInRangeConstraint`1.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsNotInRangeConstraint`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.IsNotInRangeConstraint`1.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.IsInRangeConstraint`1">
            <summary>
            Represents a constraint that checks whether or not a value is within a certain range of values.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.IsInRangeConstraint`1.Range">
            <summary>
            The range that the value is checked to be a part of.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.IsInRangeConstraint`1.#ctor(`0,`0,Kingo.RangeOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsInRangeConstraint`1"/> class.
            </summary>
            <param name="left">The lower boundary of this range.</param>
            <param name="right">The upper boundary of this range.</param>        
            <param name="options">
            The options indicating whether or <paramref name="left"/> and/or <paramref name="right"/> are part of this range themselves.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="left"/> and <paramref name="right"/> do not represent a valid range
            - or -
            both are equal and <paramref name="options"/> specifies at least one exclusive boundary
            - or -
            the specified instances do not implement the <see cref="T:System.IComparable`1"/> interface.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IsInRangeConstraint`1.#ctor(`0,`0,System.Collections.Generic.IComparer{`0},Kingo.RangeOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsInRangeConstraint`1"/> class.
            </summary>
            <param name="left">The lower boundary of this range.</param>
            <param name="right">The upper boundary of this range.</param>
            <param name="comparer">Optional comparer to use when comparing two instances.</param>
            <param name="options">
            The options indicating whether or <paramref name="left"/> and/or <paramref name="right"/> are part of this range themselves.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="left"/> and <paramref name="right"/> do not represent a valid range
            - or -
            both are equal and <paramref name="options"/> specifies at least one exclusive boundary
            - or -
            <paramref name="comparer"/> is <c>null</c> and the specified instances do not implement the <see cref="T:System.IComparable`1"/> interface.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IsInRangeConstraint`1.#ctor(Kingo.IRange{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.IsInRangeConstraint`1"/> class.
            </summary>   
            <param name="range">The range that the value is checked to be a part of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="range"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="M:Kingo.Constraints.IsInRangeConstraint`1.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsInRangeConstraint`1.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsInRangeConstraint`1.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.IsInRangeConstraint`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.IsInRangeConstraint`1.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.BooleanConstraints">
            <summary>
            Contains a set of extension methods specific for members of type <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/>.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.BooleanConstraints.IsTrue``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.Boolean},System.String)">
            <summary>
            Verifies that the member's value is <c>true</c>.
            </summary>        
            <param name="member">A member.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>     
            <returns>A <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/> instance that contains the member's value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.BooleanConstraints.IsFalse``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.Boolean},System.String)">
            <summary>
            Verifies that the member's value is <c>false</c>.
            </summary>        
            <param name="member">A member.</param>        
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>     
            <returns>A <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/> instance that contains the member's value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="T:Kingo.Constraints.BooleanIsTrueConstraint">
            <summary>
            Represents a constraint that checks whether or not a value is <c>false</c>.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.BooleanIsTrueConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.BooleanIsTrueConstraint"/> class.
            </summary>        
        </member>
        <member name="M:Kingo.Constraints.BooleanIsTrueConstraint.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.BooleanIsTrueConstraint.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.BooleanIsTrueConstraint.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.BooleanIsTrueConstraint.IsSatisfiedBy(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.BooleanIsTrueConstraint.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.BooleanIsFalseConstraint">
            <summary>
            Represents a constraint that checks whether or not a value is <c>false</c>.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.BooleanIsFalseConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.BooleanIsFalseConstraint"/> class.
            </summary>        
        </member>
        <member name="M:Kingo.Constraints.BooleanIsFalseConstraint.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.BooleanIsFalseConstraint.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.BooleanIsFalseConstraint.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.BooleanIsFalseConstraint.IsSatisfiedBy(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.BooleanIsFalseConstraint.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.ConstraintValidator`1">
            <summary>
            Represents a <see cref="T:Kingo.Messaging.IValidator`1"/> that is implemented using constraints.
            </summary>    
        </member>
        <member name="T:Kingo.Constraints.MemberConstraintSet`1">
            <summary>
            Represents a set of constraints declared or added for (members of) a specific type.
            </summary>
            <typeparam name="T">Type of the object the constraints are added for.</typeparam>
        </member>
        <member name="T:Kingo.Constraints.IMemberConstraintSet`1">
            <summary>
            When implemented by a class, a <see cref="T:Kingo.Constraints.IMemberConstraintSet`1"/> can be used to validate the values of
            certain members of another instance.
            </summary>
            <typeparam name="T">Type of the message the constraints apply to.</typeparam>
        </member>
        <member name="M:Kingo.Constraints.IMemberConstraintSet`1.VerifyThatInstance">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`2"/> that can be used to define certain
            constraints on the message itself instead on one of its particular members.
            </summary>
            <returns>A new <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`2"/>.</returns>
        </member>
        <member name="M:Kingo.Constraints.IMemberConstraintSet`1.VerifyThat``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`2"/> that can be used to define certain
            constraints on <typeparamref name="TValue"/>.
            </summary>
            <typeparam name="TValue">Type of the value to verify.</typeparam>
            <param name="fieldOrProperty">
            An expression that returns an instance of <typeparamref name="TValue"/>.
            </param>
            <returns>A new <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`2"/> that can be used to define certain
            constraints on <typeparamref name="TValue"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fieldOrProperty"/> is <c>null</c>.
            </exception>        
            <exception cref="T:System.ArgumentException">
            <paramref name="fieldOrProperty"/> is not a supported expression.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IMemberConstraintSet`1.VerifyThat``1(System.Func{`0,``0},System.String)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`2"/> that can be used to define certain
            constraints on <typeparamref name="TValue"/>.
            </summary>
            <typeparam name="TValue">Type of the value to verify.</typeparam>
            <param name="fieldOrProperty">
            A delegate that returns an instance of <typeparamref name="TValue"/>.
            </param>
            <param name="fieldOrPropertyName">The name of the member to add constraints for.</param>
            <returns>A new <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`2"/> that can be used to define certain
            constraints on <typeparamref name="TValue"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fieldOrProperty"/> or <paramref name="fieldOrPropertyName"/> is <c>null</c>.
            </exception> 
            <exception cref="T:System.ArgumentException">
            <paramref name="fieldOrPropertyName"/> is not a valid identifier.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.IMemberConstraintSet`1.VerifyThat``1(System.Func{`0,``0},Kingo.Identifier)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`2"/> that can be used to define certain
            constraints on <typeparamref name="TValue"/>.
            </summary>
            <typeparam name="TValue">Type of the value to verify.</typeparam>
            <param name="fieldOrProperty">
            A delegate that returns an instance of <typeparamref name="TValue"/>.
            </param>
            <param name="fieldOrPropertyName">The name of the member to add constraints for.</param>
            <returns>A new <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`2"/> that can be used to define certain
            constraints on <typeparamref name="TValue"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fieldOrProperty"/> or <paramref name="fieldOrPropertyName"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="M:Kingo.Constraints.MemberConstraintSet`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.MemberConstraintSet`1"/> class.
            </summary>        
            <param name="haltOnFirstError">
            Indicates whether or not this constraint set should stop evaluating constraints once a constraint has failed.
            </param>
        </member>
        <member name="M:Kingo.Constraints.MemberConstraintSet`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.MemberConstraintSet`1.VerifyThatInstance">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.MemberConstraintSet`1.VerifyThat``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.MemberConstraintSet`1.VerifyThat``1(System.Func{`0,``0},System.String)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.MemberConstraintSet`1.VerifyThat``1(System.Func{`0,``0},Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.MemberConstraintSet`1.WriteErrorMessages(`0,Kingo.Messaging.IErrorMessageReader)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.MemberConstraintSet`1.HaltsOnFirstError">
            <summary>
            Indicates whether or not this constraint set stops evaluating constraints once a constraint has failed.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.IValidator`1">
            <summary>
            When implemented by a class, represents a validator for a specific instance.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.IValidator`1.Validate(`0)">
            <summary>
            Validates all values of the specified <paramref name="instance"/> and returns all the validation-errors, if any.
            </summary>   
            <param name="instance">The instance to validate.</param>             
            <returns>
            A <see cref="T:Kingo.Messaging.ErrorInfo"/> instance that contains all validation errors, if any. If <paramref name="instance"/> is
            <c>null</c>, an empty <see cref="T:Kingo.Messaging.ErrorInfo"/> instance is returned.
            </returns>         
        </member>
        <member name="M:Kingo.Constraints.ConstraintValidator`1.#ctor(System.Boolean,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.ConstraintValidator`1"/> class.
            </summary>        
            <param name="haltOnFirstError">
            Indicates whether or not this constraint set should stop evaluating constraints once a constraint has failed.
            </param>
            <param name="formatProvider">Optional <see cref="T:System.IFormatProvider"/> to use when formatting error messages.</param>
        </member>
        <member name="M:Kingo.Constraints.ConstraintValidator`1.Validate(`0)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.ConstraintValidator`1.CreateErrorInfoBuilder(System.IFormatProvider)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Messaging.ErrorInfoBuilder"/> that will be used to collect all error messages during validation.
            </summary>
            <param name="formatProvider">
            The format provider that is used to format all error messages.
            </param>
            <returns>A new <see cref="T:Kingo.Messaging.ErrorInfoBuilder"/>.</returns>
        </member>
        <member name="M:Kingo.Constraints.ConstraintValidator`1.MergeWith(Kingo.Messaging.IValidator,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.GuidConstraints">
            <summary>
            Contains a set of extension methods specific for members of type <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/>.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.GuidConstraints.IsNotEmpty``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.Guid},System.String)">
            <summary>
            Verifies that the value is not an empty <see cref="T:System.Guid"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Constraints.GuidConstraints.IsEmpty``1(Kingo.Constraints.IMemberConstraintBuilder{``0,System.Guid},System.String)">
            <summary>
            Verifies that the value is an empty <see cref="T:System.Guid"/>.
            </summary>
            <param name="member">A member.</param>
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>
            <returns>The specified <paramref name="member"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Constraints.GuidIsNotEmptyConstraint">
            <summary>
            Represents a constraint that checks whether or not a <see cref="T:System.Guid"/> is an empty guid..
            </summary>
        </member>
        <member name="M:Kingo.Constraints.GuidIsNotEmptyConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.GuidIsNotEmptyConstraint"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.GuidIsNotEmptyConstraint.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.GuidIsNotEmptyConstraint.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.GuidIsNotEmptyConstraint.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.GuidIsNotEmptyConstraint.IsSatisfiedBy(System.Guid)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.GuidIsNotEmptyConstraint.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.GuidIsEmptyConstraint">
            <summary>
            Represents a constraint that checks whether or not a <see cref="T:System.Guid"/> is an empty guid..
            </summary>
        </member>
        <member name="M:Kingo.Constraints.GuidIsEmptyConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.GuidIsEmptyConstraint"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.GuidIsEmptyConstraint.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.GuidIsEmptyConstraint.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.GuidIsEmptyConstraint.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.GuidIsEmptyConstraint.IsSatisfiedBy(System.Guid)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.GuidIsEmptyConstraint.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.MemberConstraintBuilder`3.IsNotInstanceOf``1(System.String)">
            <inheritdoc />      
        </member>
        <member name="M:Kingo.Constraints.MemberConstraintBuilder`3.IsInstanceOf``1(System.String)">
            <inheritdoc />     
        </member>
        <member name="M:Kingo.Constraints.MemberConstraintBuilder`3.As``1">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.NullableConstraints">
            <summary>
            Contains a set of extension methods specific for members of type <see cref="T:Kingo.Constraints.IMemberConstraintBuilder`1"/>.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.NullableConstraints.HasValue``2(Kingo.Constraints.IMemberConstraintBuilder{``0,System.Nullable{``1}},System.String)">
            <summary>
            Verifies whether or not the <paramref name="member"/>'s value is not <c>null</c>.
            </summary>
            <param name="member">A member.</param> 
            <param name="errorMessage">
            The error message that is added to a <see cref="T:Kingo.Messaging.IErrorMessageReader"/> when verification fails.
            </param>       
            <returns>A member containing the value of this member's value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="errorMessage"/> is not in a correct format.
            </exception>
        </member>
        <member name="T:Kingo.Constraints.HasValueFilter`1">
            <summary>
            Represents a filter that transforms a <see cref="T:System.Nullable`1"/> into a value.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.HasValueFilter`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.HasValueFilter`1"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.HasValueFilter`1.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.HasValueFilter`1.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.HasValueFilter`1.Invert(Kingo.StringTemplate,Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.HasValueFilter`1.IsSatisfiedBy(System.Nullable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.HasValueFilter`1.IsSatisfiedBy(System.Nullable{`0},`0@)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.HasValueFilter`1.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.StringIsNumberFilter`1">
            <summary>
            Represents a filter that transforms a string into a number.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.StringIsNumberFilter`1.Style">
            <summary>
            A bitwise combination of enumeration values that indicates the style elements that can be present in the value.
            </summary>
        </member>
        <member name="F:Kingo.Constraints.StringIsNumberFilter`1.FormatProvider">
            <summary>
            An object that supplies culture-specific formatting information about the value.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.StringIsNumberFilter`1.IsSatisfiedBy(System.String,`0@)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.StringIsByteFilter">
            <summary>
            Represents a filter that transforms a string into a byte.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.StringIsByteFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringIsByteFilter"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.StringIsByteFilter.#ctor(System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringIsByteFilter"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.StringIsByteFilter.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsByteFilter.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.StringIsByteFilter.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.StringIsSByteFilter">
            <summary>
            Represents a filter that transforms a string into an sbyte.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.StringIsSByteFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringIsSByteFilter"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.StringIsSByteFilter.#ctor(System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringIsSByteFilter"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.StringIsSByteFilter.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsSByteFilter.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.StringIsSByteFilter.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.StringIsCharFilter">
            <summary>
            Represents a filter that transforms a string into a character.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.StringIsCharFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringIsCharFilter"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.StringIsCharFilter.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsCharFilter.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsCharFilter.IsSatisfiedBy(System.String,System.Char@)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.StringIsCharFilter.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.StringIsInt16Filter">
            <summary>
            Represents a filter that transforms a string into a short.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.StringIsInt16Filter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringIsInt16Filter"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.StringIsInt16Filter.#ctor(System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringIsInt16Filter"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.StringIsInt16Filter.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsInt16Filter.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.StringIsInt16Filter.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.StringIsInt32Filter">
            <summary>
            Represents a filter that transforms a string into an int.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.StringIsInt32Filter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringIsInt32Filter"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.StringIsInt32Filter.#ctor(System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringIsInt32Filter"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.StringIsInt32Filter.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsInt32Filter.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.StringIsInt32Filter.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.StringIsInt64Filter">
            <summary>
            Represents a filter that transforms a string into a long.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.StringIsInt64Filter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringIsInt64Filter"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.StringIsInt64Filter.#ctor(System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringIsInt64Filter"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.StringIsInt64Filter.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsInt64Filter.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.StringIsInt64Filter.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.StringIsSingleFilter">
            <summary>
            Represents a filter that transforms a string into a float.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.StringIsSingleFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringIsSingleFilter"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.StringIsSingleFilter.#ctor(System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringIsSingleFilter"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.StringIsSingleFilter.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsSingleFilter.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.StringIsSingleFilter.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.StringIsDoubleFilter">
            <summary>
            Represents a filter that transforms a string into a double.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.StringIsDoubleFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringIsDoubleFilter"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.StringIsDoubleFilter.#ctor(System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringIsDoubleFilter"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.StringIsDoubleFilter.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsDoubleFilter.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.StringIsDoubleFilter.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Constraints.StringIsDecimalFilter">
            <summary>
            Represents a filter that transforms a string into a decimal.
            </summary>
        </member>
        <member name="M:Kingo.Constraints.StringIsDecimalFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringIsDecimalFilter"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.StringIsDecimalFilter.#ctor(System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Constraints.StringIsDecimalFilter"/> class.
            </summary>    
        </member>
        <member name="M:Kingo.Constraints.StringIsDecimalFilter.WithName(Kingo.Identifier)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Constraints.StringIsDecimalFilter.WithErrorMessage(Kingo.StringTemplate)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Constraints.StringIsDecimalFilter.ErrorMessageIfNotSpecified">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Threading.AsyncMethod">
            <summary>
            Contains several helper methods for async methods that need to run synchronously.
            </summary>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.RunSynchronously(System.Action)">
            <summary>
            Executes the specified <paramref name="action"/> synchronously and
            returns a completed <see cref="T:System.Threading.Tasks.Task"/> while encapsulation any exceptions
            that might be thrown.
            </summary>
            <param name="action">The delegate to invoke.</param>
            <returns>A completed <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.RunSynchronously``1(System.Func{``0})">
            <summary>
            Executes the specified <paramref name="func"/> synchronously and
            returns a completed <see cref="T:System.Threading.Tasks.Task`1"/> while encapsulation any exceptions
            that might be thrown.
            </summary>
            <typeparam name="TResult">Type of the result of the delegate.</typeparam>
            <param name="func">The delegate to invoke.</param>
            <returns>A completed <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="func"/> is <c>null</c>.
            </exception>
        </member>
        <member name="F:Kingo.Threading.AsyncMethod.Void">
            <summary>
            Represents a completed <see cref="T:System.Threading.Tasks.Task"/> that can be returned
            from a synchronous method with an asynchronous signature.
            </summary>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Value``1(``0)">
            <summary>
            Creates and returns a completed <see cref="T:System.Threading.Tasks.Task`1"/> that can be returned
            from a synchronous method with an asynchronous signature.
            </summary>
            <typeparam name="TResult">Type of the result to return.</typeparam>
            <param name="returnValue">The result to return.</param>
            <returns>A completed <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Throw(System.Exception)">
            <summary>
            Creates and returns a new completed <see cref="T:System.Threading.Tasks.Task`1"/> that encapsulates
            the specified <paramref name="exception"/>.
            </summary>        
            <param name="exception">The exception to encapsulate.</param>
            <returns>A new completed <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exception"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Throw``1(System.Exception)">
            <summary>
            Creates and returns a new completed <see cref="T:System.Threading.Tasks.Task`1"/> that encapsulates
            the specified <paramref name="exception"/>.
            </summary>
            <typeparam name="TResult">Return-type of the <see cref="T:System.Threading.Tasks.Task`1"/>.</typeparam>
            <param name="exception">The exception to encapsulate.</param>
            <returns>A new completed <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exception"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Threading.Context`1">
            <summary>
            Represents a contextual container for a specific value. All instance methods on this
            class are thread-safe.
            </summary>
            <typeparam name="TValue">Type of the value to store.</typeparam>
        </member>
        <member name="M:Kingo.Threading.Context`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Threading.Context`1"/> class.
            </summary>
        </member>
        <member name="M:Kingo.Threading.Context`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Threading.Context`1"/> class.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Kingo.Threading.Context`1.OverrideThreadLocal(`0)">
            <summary>
            Sets the current value that is accessible by the current thread through <see cref="P:Kingo.Threading.Context`1.Current"/>
            only as long as the scope is active.
            </summary>
            <param name="value">The value to set.</param>
            <returns>The scope that is to be disposed when ended.</returns>
        </member>
        <member name="M:Kingo.Threading.Context`1.OverrideAsyncLocal(`0)">
            <summary>
            Sets the current value that is accessible by all threads that share the same <see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext"/>
            through <see cref="P:Kingo.Threading.Context`1.Current"/> as long as the scope is active.
            </summary>
            <param name="value">The value to set.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.InvalidOperationException">
            The call is made inside a thread local scope.
            </exception>
        </member>
        <member name="M:Kingo.Threading.Context`1.Override(`0)">
            <summary>
            Sets the current value that is accessible by all threads
            through <see cref="P:Kingo.Threading.Context`1.Current"/> as long as the scope is active.
            </summary>
            <param name="value">The value to set.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.InvalidOperationException">
            The call is made inside an async local or thread local scope.
            </exception>
        </member>
        <member name="M:Kingo.Threading.Context`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Kingo.Threading.Context`1.Current">
            <summary>
            Returns the value of the item that is current with respect to the current thread.
            </summary>
        </member>
        <member name="T:Kingo.Threading.ContextScope`1">
            <summary>
            Represents a scope that is used to temporarily set the current value of a context.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="M:Kingo.Threading.ContextScope`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Kingo.Threading.ContextScope`1.Value">
            <summary>
            Returns the value that is managed by this scope.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.DataAnnotationValidator">
            <summary>
            Represents a <see cref="T:Kingo.Messaging.IValidator`1"/> that validates an instance through
            all <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute">ValidationAttributes</see> that have been declared on the
            members of an instance.
            </summary>    
        </member>
        <member name="M:Kingo.Messaging.DataAnnotationValidator.#ctor(System.IFormatProvider,System.Func{System.Object,System.ComponentModel.DataAnnotations.ValidationContext})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.DataAnnotationValidator"/> class.
            </summary>  
            <param name="formatProvider">
            Optional <see cref="T:System.IFormatProvider"/> to use when formatting error messages.
            </param>              
            <param name="validationContextFactory">
            The method used to create a <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext"/> for a specific instance. Specify <c>null</c>
            to use the default factory.
            </param>             
        </member>
        <member name="M:Kingo.Messaging.DataAnnotationValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.DataAnnotationValidator.CreateErrorInfoBuilder(System.IFormatProvider)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Messaging.ErrorInfoBuilder"/> that will be used to collect all error messages during validation.
            </summary>
            <param name="formatProvider">
            The format provider that is used to format all error messages.
            </param>
            <returns>A new <see cref="T:Kingo.Messaging.ErrorInfoBuilder"/>.</returns>
        </member>
        <member name="M:Kingo.Messaging.DataAnnotationValidator.MergeWith(Kingo.Messaging.IValidator,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.DataAnnotationValidator.FormatProvider">
            <summary>
            The <see cref="T:System.IFormatProvider"/> to use when formatting error messages.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.ErrorInfo">
            <summary>
            Represents a tree of errors that have been detected on a specific instance.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.ErrorInfo.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.ErrorInfo"/> class.
            </summary>        
            <param name="memberErrors">Error messages indexed by property- or fieldname.</param> 
            <param name="error">Error message for the whole object.</param>    
            <exception cref="T:System.ArgumentException">
            <paramref name="memberErrors"/> contains a duplicate key.
            </exception>          
        </member>
        <member name="M:Kingo.Messaging.ErrorInfo.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.ErrorInfo"/> class.
            </summary>        
            <param name="memberErrors">Error messages indexed by property- or fieldname.</param> 
            <param name="error">Error message for the whole object.</param>              
        </member>
        <member name="M:Kingo.Messaging.ErrorInfo.ToString">
            <inheritdoc />
        </member>
        <member name="F:Kingo.Messaging.ErrorInfo.Empty">
            <summary>
            An instance of the <see cref="T:Kingo.Messaging.ErrorInfo"/> class without any errors.
            </summary>       
        </member>
        <member name="M:Kingo.Messaging.ErrorInfo.Merge(Kingo.Messaging.ErrorInfo,Kingo.Messaging.ErrorInfo,Kingo.Messaging.ErrorInfoBuilder)">
            <summary>
            Merges two <see cref="T:Kingo.Messaging.ErrorInfo"/> instances into one uisng the specified <paramref name="builder"/>.
            </summary>
            <param name="left">The first error info instance.</param>
            <param name="right">The second error info instance.</param>
            <param name="builder">Builder that is used to build the merged instance.</param>
            <returns>
            A new <see cref="T:Kingo.Messaging.ErrorInfo"/> instance that contains all errors of both <paramref name="left"/> and <paramref name="right"/>.        
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="left"/> or <paramref name="right"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.Messaging.ErrorInfo.HasErrors">
            <summary>
            Indicates whether or not this instance carries any error messages.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.ErrorInfo.ErrorCount">
            <summary>
            Returns the number of error messages this instance carries.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.ErrorInfo.Error">
            <summary>
            Returns the error message that applies to the entire instance.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.ErrorInfo.MemberErrors">
            <summary>
            Returns a collection of error messages per member.
            </summary>
        </member>
        <member name="T:Kingo.Clocks.HighResolutionClock">
            <summary>
            Represents a clock that uses a <see cref="T:System.Diagnostics.Stopwatch"/> in combination with
            the system clock to simulate a high resolution system time clock.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.HighResolutionClock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.HighResolutionClock.UtcDateAndTime">
            <inheritdoc />
        </member>
        <member name="F:Kingo.Clocks.HighResolutionClock.DefaultSynchronizationInterval">
            <summary>
            The default synchronization interval used when not explicitly specified is 10 seconds.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.HighResolutionClock.StartNew">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Clocks.HighResolutionClock"/> that is counting from the current date and time.
            </summary>        
            <returns>A new <see cref="T:Kingo.Clocks.HighResolutionClock"/>.</returns>
        </member>
        <member name="M:Kingo.Clocks.HighResolutionClock.StartNew(Kingo.Clocks.IClock)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Clocks.HighResolutionClock"/> based on the specified <paramref name="referenceClock"/>.
            </summary> 
            <param name="referenceClock">
            The clock that will be used as a reference for this clock.
            </param>        
            <returns>A new <see cref="T:Kingo.Clocks.HighResolutionClock"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="referenceClock "/> is <c>null</c>.
            </exception>         
        </member>
        <member name="M:Kingo.Clocks.HighResolutionClock.StartNew(Kingo.Clocks.IClock,System.TimeSpan)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Clocks.HighResolutionClock"/> based on the specified <paramref name="referenceClock"/>.
            </summary> 
            <param name="referenceClock">
            The clock that will be used as a reference for this clock.
            </param>
            <param name="synchronizationInterval">
            The interval that is used to periodically synchronize this clock with the specified <paramref name="referenceClock"/>.
            A value of <see cref="F:System.TimeSpan.Zero"/> means this clock is never synchronized.
            </param>
            <returns>A new <see cref="T:Kingo.Clocks.HighResolutionClock"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="referenceClock "/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="synchronizationInterval"/> is a negative <see cref="T:System.TimeSpan"/>.
            </exception>               
        </member>
        <member name="T:Kingo.Clocks.StopwatchClock">
            <summary>
            This clock represents a stopwatch that starts at a specified date and/or time and can be started and stopped.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.StopwatchClock.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Clocks.StopwatchClock"/> class.
            </summary>
            <param name="startTime">The initial date and time.</param>
        </member>
        <member name="M:Kingo.Clocks.StopwatchClock.Start">
            <summary>
            Starts the clock.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.StopwatchClock.Stop">
            <summary>
            Stops the clock.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.StopwatchClock.UtcDateAndTime">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.StopwatchClock.StartNew">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Clocks.StopwatchClock"/> that is started immediately.
            </summary>        
            <returns>A new <see cref="T:Kingo.Clocks.StopwatchClock"/>.</returns>
        </member>
        <member name="M:Kingo.Clocks.StopwatchClock.StartNew(System.DateTimeOffset)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Clocks.StopwatchClock"/> that is started immediately.
            </summary>    
            <param name="startTime">The initial date and time.</param>    
            <returns>A new <see cref="T:Kingo.Clocks.StopwatchClock"/>.</returns>
        </member>
        <member name="P:Kingo.Clocks.StopwatchClock.IsRunning">
            <summary>
            Indicates whether or not this clock is running.
            </summary>
        </member>
        <member name="P:Kingo.Clocks.StopwatchClock.ElapsedTime">
            <summary>
            Returns the total amount of time the stopwatch has been running.
            </summary>
        </member>
        <member name="T:Kingo.EventHandlerExtensions">
            <summary>
            Contains extension-methods for raising events.
            </summary>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.Raise(System.EventHandler,System.Object)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using empty arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sender"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using the specified arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The arguments of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sender"/> or <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using the specified arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The arguments of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sender"/> or <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.Raise``1(System.Delegate,System.Object,``0)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using the specified arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The arguments of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sender"/> or <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.RaiseStatic(System.EventHandler)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using empty arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.RaiseStatic(System.EventHandler,System.EventArgs)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using the specified arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>        
            <param name="e">The arguments of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.RaiseStatic``1(System.EventHandler{``0},``0)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using the specified arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>        
            <param name="e">The arguments of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.RaiseStatic``1(System.Delegate,``0)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using the specified arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>        
            <param name="e">The arguments of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.HashCode">
            <summary>
            Contains specific methods for object to calculate a hashcode based on their (immutable) members.
            </summary>
        </member>
        <member name="M:Kingo.HashCode.Of(System.Object)">
            <summary>
            Returns the hashcode of the specified instance, or <c>0</c> if <paramref name="a"/> is <c>null</c>.
            </summary>
            <param name="a">The instance to get the hashcode for.</param>
            <returns>The hashcode of the specified instance.</returns>
        </member>
        <member name="M:Kingo.HashCode.Of(System.Object,System.Object)">
            <summary>
            Returns the combined hashcode of the specified instances using a bitwise XOR operation.
            </summary>
            <param name="a">A certain instance.</param>
            <param name="b">Another instance.</param>
            <returns>A combined hashcode of the specified instances.</returns>
        </member>
        <member name="M:Kingo.HashCode.Of(System.Object,System.Object,System.Object)">
            <summary>
            Returns the combined hashcode of the specified instances using a bitwise XOR operation.
            </summary>
            <param name="a">A certain instance.</param>
            <param name="b">Another instance.</param>
            <param name="c">Yet another instance.</param>
            <returns>A combined hashcode of the specified instances.</returns>
        </member>
        <member name="M:Kingo.HashCode.Of(System.Object[])">
            <summary>
            Returns the combined hashcode of the specified instances using a bitwise XOR operation.
            </summary>
            <param name="instances">A collection of instances.</param>
            <returns>A combined hashcode of the specified instances.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="instances"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.IRange`1">
            <summary>
            When implemented by a class, represents a range of values of type <typeparamref name="TValue"/>.
            </summary>
            <typeparam name="TValue">Type of the values in the range.</typeparam>
        </member>
        <member name="M:Kingo.IRange`1.Contains(`0)">
            <summary>
            Indicates whether or not the specified <paramref name="value"/> lies within the current range.
            </summary>
            <param name="value">The value to check.</param>
            <returns><c>true</c> when <paramref name="value"/> is part of this range; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Kingo.IRange`1.Left">
            <summary>
            Returns the left boundary of this range.
            </summary>
        </member>
        <member name="P:Kingo.IRange`1.Right">
            <summary>
            Returns the right boundary of the range.
            </summary>
        </member>
        <member name="P:Kingo.IRange`1.IsLeftInclusive">
            <summary>
            Indicates whether or not <see cref="P:Kingo.IRange`1.Left"/> is part of this range.
            </summary>
        </member>
        <member name="P:Kingo.IRange`1.IsRightInclusive">
            <summary>
            Indicates whether or not <see cref="P:Kingo.IRange`1.Right"/> is part of this range.
            </summary>
        </member>
        <member name="T:Kingo.Range`1">
            <summary>
            Represents a range or domain of values.
            </summary>
            <typeparam name="TValue">Type of values in this range.</typeparam>
        </member>
        <member name="M:Kingo.Range`1.#ctor(`0,`0,Kingo.RangeOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Range`1"/> class.
            </summary>
            <param name="left">The lower boundary of this range.</param>
            <param name="right">The upper boundary of this range.</param>
            <param name="options">
            The options indicating whether or <paramref name="left"/> and/or <paramref name="right"/> are part of this range themselves.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="left"/> and <paramref name="right"/> do not represent a valid range
            - or -
            both are equal and <paramref name="options"/> specifies at least one exclusive boundary
            - or -
            the specified instances do not implement the <see cref="T:System.IComparable`1"/> interface.
            </exception>
        </member>
        <member name="M:Kingo.Range`1.#ctor(`0,`0,System.Collections.Generic.IComparer{`0},Kingo.RangeOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Range`1"/> class.
            </summary>
            <param name="left">The lower boundary of this range.</param>
            <param name="right">The upper boundary of this range.</param>
            <param name="comparer">Optional comparer to use when comparing two instances.</param>
            <param name="options">
            The options indicating whether or <paramref name="left"/> and/or <paramref name="right"/> are part of this range themselves.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="left"/> and <paramref name="right"/> do not represent a valid range
            - or -
            both are equal and <paramref name="options"/> specifies at least one exclusive boundary
            - or -
            <paramref name="comparer"/> is <c>null</c> and the specified instances do not implement the <see cref="T:System.IComparable`1"/> interface.
            </exception>
        </member>
        <member name="M:Kingo.Range`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Range`1.Equals(Kingo.Range{`0})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Range`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Range`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Range`1.ToString">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Range`1.Left">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Range`1.Right">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Range`1.IsLeftInclusive">
            <summary>
            Indicates whether or not the lower boundary is included within the range.
            </summary>
        </member>
        <member name="P:Kingo.Range`1.IsLeftExclusive">
            <summary>
            Indicates whether or not the lower boundary is excluded from the range.
            </summary>
        </member>
        <member name="P:Kingo.Range`1.IsRightInclusive">
            <summary>
            Indicates whether or not the upper boundary is included within the range.
            </summary>
        </member>
        <member name="P:Kingo.Range`1.IsRightExclusive">
            <summary>
            Indicates whether or not the upper boundary is excluded from the range.
            </summary>
        </member>
        <member name="T:Kingo.RangeOptions">
            <summary>
            Represents a set of options that can be used to determine whether or not a <see cref="T:Kingo.Range`1"/>'s
            boundaries are part of that range themselves.
            </summary>
        </member>
        <member name="F:Kingo.RangeOptions.AllInclusive">
            <summary>
            Specifies that both boundaries are included in the range themselves.
            </summary>
        </member>
        <member name="F:Kingo.RangeOptions.LeftExclusive">
            <summary>
            Specifies that the left boundary of not part of the range.
            </summary>
        </member>
        <member name="F:Kingo.RangeOptions.RightExclusive">
            <summary>
            Specifies that the right boundary is not part of the range.
            </summary>
        </member>
        <member name="F:Kingo.RangeOptions.AllExclusive">
            <summary>
            Specifies that both the left and the right boundary are not part of the range.
            </summary>
        </member>
        <member name="T:Kingo.Resources.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Comparable_IncomparableType">
            <summary>
              Looks up a localized string similar to The specified object of type &apos;{0}&apos; cannot be compared to instance of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Constraint_WithErrorMessageNotSupported">
            <summary>
              Looks up a localized string similar to WithErrorMessage is not supported by constraint &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Constraint_WithNameNotSupported">
            <summary>
              Looks up a localized string similar to WithName is not supported by constraint &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Context_IllegalScopeStarted">
            <summary>
              Looks up a localized string similar to Cannot start this scope because a more restrive scope is still active..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.DomainEvent_IncompatibleKeyType">
            <summary>
              Looks up a localized string similar to Event &apos;{0}&apos; contains a member marked with the KeyAttribute which type is not compatible with the Key-type of the event..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.DomainEvent_IncompatibleVersionType">
            <summary>
              Looks up a localized string similar to Event &apos;{0}&apos; contains a member marked with the VersionAttribute which type is not compatible with the Version-type of the event..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.DomainEvent_KeyMemberNotFound">
            <summary>
              Looks up a localized string similar to Could not resolve Key on event of type &apos;{0}&apos;. Please mark one field or property as the Key of this event..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.DomainEvent_MultipleKeyMembersFound">
            <summary>
              Looks up a localized string similar to Event &apos;{0}&apos; contains more than one member that is decorated with KeyAttribute, where only one is allowed..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.DomainEvent_MultipleVersionMembersFound">
            <summary>
              Looks up a localized string similar to Event &apos;{0}&apos; contains more than one member that is decorated with VersionAttribute, where only one is allowed..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.DomainEvent_VersionMemberNotFound">
            <summary>
              Looks up a localized string similar to Could not resolve Version on event of type &apos;{0}&apos;. Please mark one field or property as the Version of this event..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.DomainModelException_CommandFailed">
            <summary>
              Looks up a localized string similar to Command &apos;{0}&apos; failed..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.DomainModelException_EventFailed">
            <summary>
              Looks up a localized string similar to An error occurred while processing event &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.EnumIsInRangeOfValidValues_UnsupportedValue">
            <summary>
              Looks up a localized string similar to Instance &apos;{0}&apos; of type &apos;{1}&apos; is not supported because it is not an Enum type..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.ErrorLevel_InvalidErrorLevel">
            <summary>
              Looks up a localized string similar to ErrorLevel must be 0 or higher: {0}..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.ExpressionBuilder_ExpressionNotSupported">
            <summary>
              Looks up a localized string similar to The specified node or expression is not supported inside a member expression: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.ExpressionExtensions_UnsupportedExpression">
            <summary>
              Looks up a localized string similar to Specified expression is not supported: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.HasItemFilter_IndexerNotFound">
            <summary>
              Looks up a localized string similar to Instance of type &apos;{0}&apos; does not contain an indexer with argument types &apos;[{1}]&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.HasItemFilter_InvalidArrayIndexValues">
            <summary>
              Looks up a localized string similar to The specified values are not valid to index an array: {0}..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Identifier_EmptyIdentifier">
            <summary>
              Looks up a localized string similar to Cannot create an empty identifier..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Identifier_InvalidIdentifier">
            <summary>
              Looks up a localized string similar to Invalid identifier specified: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Message_AmbiguousAttributeMatch">
            <summary>
              Looks up a localized string similar to Two or more attributes declared on message &apos;{0}&apos; are assignable to &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Range_InvalidRange">
            <summary>
              Looks up a localized string similar to The specified range is not valid: {0}..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.ReadOnlyDictionary_KeyNotFound">
            <summary>
              Looks up a localized string similar to The specified key &apos;{0}&apos; is not a valid index for this collection..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Scope_CannotCompleteScope">
            <summary>
              Looks up a localized string similar to Cannot complete this scope because it is not the current scope..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Scope_IncorrectNesting">
            <summary>
              Looks up a localized string similar to The scopes were not nested correctly..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Scope_ScopeAlreadyCompleted">
            <summary>
              Looks up a localized string similar to The scope has already completed..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.StringTemplate_MissingClosingBrace">
            <summary>
              Looks up a localized string similar to Invalid format string specified: &apos;{0}&apos;. Missing closing brace of variable at index {1}..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.StringTemplate_MissingIdentifier">
            <summary>
              Looks up a localized string similar to Invalid format string specified: &apos;{0}&apos;. Missing identifier at index {1}..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.StringTemplate_UnexpectedCharacter">
            <summary>
              Looks up a localized string similar to Invalid format string specified: &apos;{0}&apos;. Unexpected character &apos;{1}&apos; at index {2}..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.StringTemplateVariable_MemberNotFound">
            <summary>
              Looks up a localized string similar to Instance of type &apos;{0}&apos; does not contain public field or property &apos;{1}&apos;..
            </summary>
        </member>
        <member name="M:Kingo.Clocks.DefaultClock.LocalDateAndTime">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.DefaultClock.UtcDateAndTime">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Threading.AsyncLocal`1">
            <summary>
            Represents a memory slot inside the <see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext"/>.
            </summary>
            <typeparam name="T">Type of the value to store.</typeparam>
        </member>
        <member name="M:Kingo.Threading.AsyncLocal`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Threading.AsyncLocal`1"/> class.
            </summary>
        </member>
        <member name="M:Kingo.Threading.AsyncLocal`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Threading.AsyncLocal`1"/> class.
            </summary>
            <param name="defaultValue">The default value of this slot.</param>
        </member>
        <member name="P:Kingo.Threading.AsyncLocal`1.Value">
            <summary>
            Gets or sets the value of the memory slot.
            </summary>
        </member>
        <member name="T:Kingo.Threading.TaskExtensions">
            <summary>
            Contains several extension methods for the <see cref="T:System.Threading.Tasks.Task"/> class.
            </summary>
        </member>
        <member name="M:Kingo.Threading.TaskExtensions.Await(System.Threading.Tasks.Task,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Awaits the specified task, blocking the current thread, and unwraps any <see cref="T:System.AggregateException"/>
            by rethrowing the first inner exception, just like the await-statement would do.
            </summary>
            <param name="task">The task to await.</param>
            <param name="token">Optional cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="task"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.TaskExtensions.Await(System.Threading.Tasks.Task,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Awaits the specified task, blocking the current thread, and unwraps any <see cref="T:System.AggregateException"/>
            by rethrowing the first inner exception, just like the await-statement would do.
            </summary>
            <param name="task">The task to await.</param>
            <param name="timeoutInMilliseconds">Maximum amount of time in milliseconds to wait for the task to complete.</param>
            <param name="token">Optional cancellation token.</param>
            <returns><c>true</c> if the Task completed execution within the allotted time; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="task"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="timeoutInMilliseconds"/> is not a valid timeout period.
            </exception>
        </member>
        <member name="M:Kingo.Threading.TaskExtensions.Await(System.Threading.Tasks.Task,System.TimeSpan,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Awaits the specified task, blocking the current thread, and unwraps any <see cref="T:System.AggregateException"/>
            by rethrowing the first inner exception, just like the await-statement would do.
            </summary>
            <param name="task">The task to await.</param>
            <param name="timeout">Maximum amount of time to wait for the task to complete.</param>
            <param name="token">Optional cancellation token.</param>
            <returns><c>true</c> if the Task completed execution within the allotted time; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="task"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.TaskExtensions.Await``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Awaits the specified task, blocking the current thread, and unwraps any <see cref="T:System.AggregateException"/>
            by rethrowing the first inner exception, just like the await-statement would do.
            </summary>
            <param name="task">The task to await.</param>        
            <exception cref="T:System.ArgumentNullException">
            <paramref name="task"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.TaskExtensions.RethrowInnerException(System.AggregateException)">
            <summary>
            Re-throws the first inner exception of the specified <paramref name="exception"/> if it has any
            inner exceptions, without losing the stacktrace of this exception.
            </summary>
            <param name="exception">The exception to unwrap.</param>
            <returns><c>false</c> if the exception was not re-thrown.</returns>
            <exception cref="T:System.Exception">
            If <paramref name="exception"/> has any inner exceptions.
            </exception>
        </member>
    </members>
</doc>
