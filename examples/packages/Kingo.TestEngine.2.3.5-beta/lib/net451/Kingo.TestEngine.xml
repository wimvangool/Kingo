<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kingo.TestEngine</name>
    </assembly>
    <members>
        <member name="T:Kingo.Messaging.AlternateFlow`1">
            <summary>
            Represents an alterate flow, in which a certain type of <see cref="T:Kingo.Messaging.FunctionalException" /> is to be thrown.
            </summary>
            <typeparam name="TMessage">Type of the message that is processed on the When-phase.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.AlternateFlow`1.Expect``1(System.Action{Kingo.Constraints.IMemberConstraintSet{``0}})">
            <summary>
            Specifies that a certain type of exception is expected to be thrown.
            </summary>
            <typeparam name="TException">Type of the expected exception.</typeparam>        
            <param name="validateMethod">
            Optional delegate that is used to add certain constraints to the expected exception.
            </param>
            <returns>This flow.</returns>
        </member>
        <member name="M:Kingo.Messaging.AlternateFlow`1.ExecuteAsync">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.Domain.InMemoryRepository`3">
            <summary>
            Represents an in-memory repository of aggregates that can be used in combination with
            write-only scenarios to temporarily store data when testing business logic.
            </summary>
            <typeparam name="TKey">Type of the key that identifies an aggregate.</typeparam>
            <typeparam name="TVersion">Type of the version of the aggregate.</typeparam>
            <typeparam name="TAggregate">Type of aggregates that are managed.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.Domain.InMemoryRepository`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Domain.InMemoryRepository`3" /> class.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Domain.InMemoryRepository`3.TypeToContractMap">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.Domain.InMemoryRepository`3.Snapshots">
            <summary>
            Returns a thread-safe dictionary of aggregates.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Domain.InMemoryRepository`3.SelectSnapshotByKeyAsync(`0,Kingo.Messaging.ITypeToContractMap)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Domain.InMemoryRepository`3.UpdateAsync(Kingo.Messaging.Domain.SnapshotToSave{`0,`1},`1)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Domain.InMemoryRepository`3.InsertAsync(Kingo.Messaging.Domain.SnapshotToSave{`0,`1})">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.ExecutionFlow`1">
            <summary>
            Represents a certain type of flow that can be defines for a scenario.
            </summary>
            <typeparam name="TMessage">Type of the message that is processed on the When-phase.</typeparam>
        </member>
        <member name="P:Kingo.Messaging.ExecutionFlow`1.FormatProvider">
            <inheritdoc /> 
        </member>
        <member name="M:Kingo.Messaging.ExecutionFlow`1.Execute">
            <inheritdoc /> 
        </member>
        <member name="M:Kingo.Messaging.ExecutionFlow`1.ExecuteAsync">
            <inheritdoc /> 
        </member>
        <member name="M:Kingo.Messaging.ExecutionFlow`1.Add(System.String,System.String,Kingo.Messaging.ErrorInheritanceLevel)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.HappyFlow`1">
            <summary>
            Represents a happy flow, in which a certain number of events is expected to be published.
            </summary>
            <typeparam name="TMessage">Type of the message that is processed on the When-phase.</typeparam>
        </member>
        <member name="M:Kingo.Messaging.HappyFlow`1.Expect``1(System.Action{Kingo.Constraints.IMemberConstraintSet{``0}})">
            <summary>
            Specifies that a certain type of event is expected to be published at a certain time.
            </summary>
            <typeparam name="TEvent">Type of the expected event.</typeparam>        
            <param name="validateMethod">
            Optional delegate that is used to add certain constraints to the expected event.
            </param>
            <returns>This flow.</returns>                
        </member>
        <member name="M:Kingo.Messaging.HappyFlow`1.ExecuteAsync">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Messaging.IExecutable">
            <summary>
            Represents a component that can be executed.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.IExecutable.Execute">
            <summary>
            Executes this component.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.IExecutable.ExecuteAsync">
            <summary>
            Executes this component asynchronously.
            </summary>
            <returns>The task carrying out the operation.</returns>
        </member>
        <member name="T:Kingo.Messaging.ScenarioMode">
            <summary>
            Represents a mode in which a scenario can execute.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.ScenarioMode.WriteOnly">
            <summary>
            Represents the write-only mode, in which a scenario is used to test message-in/message-out behavior only.
            </summary>
        </member>
        <member name="F:Kingo.Messaging.ScenarioMode.ReadWrite">
            <summary>
            Represents the read-write mode, in which a scenario is used to test both write (commands/events) and read
            (query) logic.
            </summary>
        </member>
        <member name="T:Kingo.Messaging.Scenario">
            <summary>
            Represents a scenario that follows the Behavior Driven Development (BDD) style, which is characterized
            by the Given-When-Then pattern.
            </summary>           
        </member>
        <member name="P:Kingo.Messaging.Scenario.Mode">
            <summary>
            The mode this scenario will execute in.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Scenario.MessageProcessor">
            <summary>
            Returns the processor that is used to execute this <see cref="T:Kingo.Messaging.Scenario" />.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Scenario.Then">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Scenario.ThenAsync">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Messaging.Scenario.NumberGenerator">
            <summary>
            Returns a random number generator.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Scenario.CurrentDateAndTime">
            <summary>
            Returns the current (local) date and time.
            </summary>
            <returns>The current date and time.</returns>
        </member>
        <member name="M:Kingo.Messaging.Scenario.PickValueFrom``1(``0[])">
            <summary>
            Picks and returns a random value from the specified collection.
            </summary>
            <typeparam name="TValue">Type of the value of the collection.</typeparam>
            <param name="values">The collection of values to pick the value from.</param>
            <returns>One element of the specified collection of <paramref name="values"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="values"/> does not contain any elements.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Scenario.PickValueFrom``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Picks and returns a random value from the specified collection.
            </summary>
            <typeparam name="TValue">Type of the value of the collection.</typeparam>
            <param name="values">The collection of values to pick the value from.</param>
            <returns>One element of the specified collection of <paramref name="values"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="values"/> does not contain any elements.
            </exception>
        </member>
        <member name="M:Kingo.Messaging.Scenario.PickValueFrom``1(System.Collections.Generic.IList{``0})">
            <summary>
            Picks and returns a random value from the specified collection.
            </summary>
            <typeparam name="TValue">Type of the value of the collection.</typeparam>
            <param name="values">The collection of values to pick the value from.</param>
            <returns>One element of the specified collection of <paramref name="values"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="values"/> does not contain any elements.
            </exception>
        </member>
        <member name="T:Kingo.Messaging.Scenario`1">
            <summary>
            Represents a scenario that follows the Behavior Driven Development (BDD) style, which is characterized
            by the Given-When-Then pattern.
            </summary>
            <typeparam name="TMessage">Type of the message that is processed on the When-phase.</typeparam>    
        </member>
        <member name="M:Kingo.Messaging.Scenario`1.#ctor(Kingo.Messaging.ScenarioMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Messaging.Scenario`1" /> class.
            </summary>
            <param name="mode">The mode this scenario will execute in.</param>
        </member>
        <member name="P:Kingo.Messaging.Scenario`1.Message">
            <summary>
            Returns the last message that was handled in the When-phase.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Scenario`1.ThrownException">
            <summary>
            Gets the <see cref="T:Kingo.Messaging.FunctionalException" /> that was caught during the When-phase.
            </summary>
        </member>
        <member name="P:Kingo.Messaging.Scenario`1.PublishedEvents">
            <summary>
            Returns the collection of events that were published during the When-phase.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Scenario`1.ThenAsync">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Messaging.Scenario`1.ExpectedEvent``1(System.Action{Kingo.Constraints.IMemberConstraintSet{``0}})">
            <summary>
            Executes this scenario while expecting exactly one event of the specified type to be published.
            </summary>
            <typeparam name="TEvent">Type of the expected event.</typeparam>
            <param name="validator">Optional delegate to define constraints on the expected event.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</returns>
        </member>
        <member name="M:Kingo.Messaging.Scenario`1.Events">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Messaging.HappyFlow`1" /> which can be used to define
            which events are expected to be published.
            </summary>        
            <returns>A happy flow.</returns>        
        </member>
        <member name="M:Kingo.Messaging.Scenario`1.ExpectedCommandExecutionException(System.Action{Kingo.Constraints.IMemberConstraintSet{Kingo.Messaging.CommandExecutionException}},System.Boolean)">
            <summary>
            Executes this scenario while expecting a <see cref="T:Kingo.Messaging.CommandExecutionException" /> to be thrown.
            </summary>        
            <param name="validator">Optional delegate to define constraints on the expected exception.</param>
            <param name="rethrowException">
            Indicates whether or not the exception should be rethron after it has been caught and verified.
            </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</returns>
        </member>
        <member name="M:Kingo.Messaging.Scenario`1.ExpectedException``1(System.Action{Kingo.Constraints.IMemberConstraintSet{``0}},System.Boolean)">
            <summary>
            Executes this scenario while expecting the specified type of exception to be thrown.
            </summary>
            <typeparam name="TException">The expected type of exception.</typeparam>
            <param name="validator">Optional delegate to define constraints on the expected exception.</param>
            <param name="rethrowException">
            Indicates whether or not the exception should be rethron after it has been caught and verified.
            </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</returns>
        </member>
        <member name="M:Kingo.Messaging.Scenario`1.Exception(System.Boolean)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Messaging.AlternateFlow`1" /> which can be used to set some
            expectations on the <see cref="T:Kingo.Messaging.FunctionalException" /> that is expected to be thrown.
            </summary>
            <param name="rethrowException">
            Indicates whether or not the exception should be rethron after it has been caught and verified.
            </param>
            <returns>An alternate flow.</returns>
        </member>
        <member name="M:Kingo.Messaging.Scenario`1.ProcessWithAsync(Kingo.Messaging.IMessageProcessor,System.Threading.CancellationToken)">
            <summary>
            Executes the scenario in two phases: first the <i>Given</i>-phase, followed by the <i>When</i>-phase.
            </summary>                        
        </member>
        <member name="M:Kingo.Messaging.Scenario`1.Given">
            <summary>
            Returns a sequence of messages that are used to put the system into a desired state.
            </summary>
            <returns>A sequence of messages that are used to put the system into a desired state.</returns>
            <remarks>
            The default implementation returns an empty sequence. When overridden, this method should never return
            <c>null</c>.
            </remarks>
        </member>
        <member name="M:Kingo.Messaging.Scenario`1.When">
            <summary>
            Returns a message that is used to test a system's behavior.
            </summary>
            <returns>A single message of which the effects will be verified in the Then-phase.</returns>
        </member>
        <member name="M:Kingo.Messaging.Scenario`1.OnEventPublished(System.Object)">
            <summary>
            This method is called every time an event is published during execution of When().
            </summary>
            <param name="domainEvent">The event that was published.</param>
        </member>
        <member name="P:Kingo.Messaging.Scenario`1.FormatProvider">
            <summary>
            Gets or sets the <see cref="T:System.IFormatProvider" /> that is used to format all the error messages.
            </summary>
        </member>
        <member name="M:Kingo.Messaging.Scenario`1.OnVerificationFailed(System.String)">
            <summary>
            Occurs when verification of a certain member during the Then-phase failed.
            </summary>        
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Kingo.Messaging.Scenario`1.NewScenarioFailedException(System.String,System.Exception)">
            <summary>
            Creates and returns a new <see cref="P:Kingo.Messaging.Scenario`1.ThrownException" /> that will be thrown to mark the failure of this scenario.
            </summary>
            <param name="errorMessage">The reason why the scenario failed.</param>
            <param name="innerException">Optional Exception that was the root-cause of the failure.</param>
            <returns>A new <see cref="P:Kingo.Messaging.Scenario`1.ThrownException" />-instance with the specfied <paramref name="errorMessage"/>.</returns>
        </member>
        <member name="T:Kingo.Resources.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Scenario_EmptyCollectionSpecified">
            <summary>
              Looks up a localized string similar to Cannot pick a value of type &apos;{0}&apos; because the specified collection is empty..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Scenario_ExceptionExpectationAlreadySet">
            <summary>
              Looks up a localized string similar to Cannot set the expectation for exception of type &apos;{0}&apos; because another expectation has already been set..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Scenario_ExpectedExceptionNotThrown">
            <summary>
              Looks up a localized string similar to Expected exception was not thrown..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Scenario_GivenFailed">
            <summary>
              Looks up a localized string similar to An exception of type &apos;{0}&apos; was thrown during the Given()-phase of scenario &apos;{1}&apos;: {2}..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Scenario_InvalidMode">
            <summary>
              Looks up a localized string similar to Invalid mode has been set for scenario &apos;{0}&apos;: {1}..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Scenario_NoEventAtIndex">
            <summary>
              Looks up a localized string similar to Scenario &apos;{0}&apos; did not publish an event at index &apos;{1}&apos;. Did you forget to put this scenario in the Given()-method of the current scenario?.
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Scenario_UnexpectedEventCount">
            <summary>
              Looks up a localized string similar to The amount of expected events ({0}) does not match the actual amount of published events ({1})..
            </summary>
        </member>
        <member name="P:Kingo.Resources.ExceptionMessages.Scenario_UnexpectedEventsPublished">
            <summary>
              Looks up a localized string similar to Instead, the following events were published: {0}..
            </summary>
        </member>
    </members>
</doc>
