<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kingo.MicroServices.Contract.ServiceBus</name>
    </assembly>
    <members>
        <member name="T:Kingo.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.EndpointNameFormat_IllegalCharacter">
            <summary>
              Looks up a localized string similar to Name &apos;{0}&apos; contains illegal character &apos;{1}&apos; encountered at index &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.EndpointNameFormat_MissingClosingBracket">
            <summary>
              Looks up a localized string similar to Name &apos;{0}&apos; is missing the closing bracket for placeholder started at index &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.EndpointNameFormat_UnknownPlaceholderName">
            <summary>
              Looks up a localized string similar to Unknown placeholder specified: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MicroServiceBusClient_EndpointNotSupported">
            <summary>
              Looks up a localized string similar to Cannot connect endpoint &apos;{0}&apos; (Name = {1}) to the service-bus because it is not supported by this client..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MicroServiceBusController_AlreadyStarted">
            <summary>
              Looks up a localized string similar to Controller of type &apos;{0}&apos; cannot be started because it has already been started..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MicroServiceBusController_CannotPublishEvents">
            <summary>
              Looks up a localized string similar to Controller of type &apos;{0}&apos; cannot publish the specified event(s) because it has not been (fully) started yet..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MicroServiceBusController_CannotSendCommands">
            <summary>
              Looks up a localized string similar to Controller of type &apos;{0}&apos; cannot send the specified command(s) because it has not been (fully) started yet..
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.Controllers.EndpointNameFormat">
            <summary>
            Represents a specific format for the name of an endpoint.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameFormat.ResolveName(Kingo.MicroServices.IMicroServiceBusEndpoint)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameFormat.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameFormat.Parse(System.String)">
            <summary>
            Parses the specified <paramref name="format"/> and returns a new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameFormat"/> that
            can be used to resolve the name of a <see cref="T:Kingo.MicroServices.IMicroServiceBusEndpoint" />. The format can
            contain the placeholders [service], [handler] and [message], which will be used to insert the name of
            the service, message handler or message respectively.
            </summary>
            <param name="format">The format to parse.</param>
            <returns>A new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameFormat"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="format"/> is not a valid name-format.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.Controllers.EndpointNameResolver">
            <summary>
            Serves as a name-resolver for endpoints for a specific set of message types.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameResolver.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" /> class.
            </summary>
            <param name="defaultNameFormat">
            Indicates what the name-format of an endpoint is for messages of which the format
            is not explicitly configured.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="defaultNameFormat"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="defaultNameFormat"/> is not valid name-format.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameResolver.ToString">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.Controllers.EndpointNameResolver.DefaultNameFormat">
            <summary>
            Returns the default name-format of an endpoint; this format is applied when
            a specific name-format for a certain message is not specified.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameResolver.AddNameFormat``1(System.String)">
            <summary>
            Adds a specific name-format for messages of type <typeparamref name="TMessage"/>.
            </summary>
            <typeparam name="TMessage">Type of a message.</typeparam>
            <param name="format">The name-format to use for endpoints handling messages of type <typeparamref name="TMessage"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="format"/> is not a valid name-format.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameResolver.AddNameFormat(System.String,System.Type[])">
            <summary>
            Adds a specific name-format for messages which type is specified in <paramref name="messageTypes"/>.
            </summary>
            <param name="format">
            The name-format to use for endpoints handling messages which type is specified in <paramref name="messageTypes"/>.
            </param>
            <param name="messageTypes">
            A collection of message-type to match when resolving the correct name-format to use.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> or <paramref name="messageTypes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="format"/> is not a valid name-format.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameResolver.AddNameFormat(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Adds a specific name-format for messages which type is specified in <paramref name="messageTypes"/>.
            </summary>
            <param name="format">
            The name-format to use for endpoints handling messages which type is specified in <paramref name="messageTypes"/>.
            </param>
            <param name="messageTypes">
            A collection of message-type to match when resolving the correct name-format to use.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> or <paramref name="messageTypes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="format"/> is not a valid name-format.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameResolver.ResolveName(Kingo.MicroServices.IMicroServiceBusEndpoint)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.Controllers.IEndpointNameResolver">
            <summary>
            When implemented by a class, represents a component that can resolve the name of an endpoint.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.IEndpointNameResolver.ResolveName(Kingo.MicroServices.IMicroServiceBusEndpoint)">
            <summary>
            Resolves the name of the specified <paramref name="endpoint"/>. This name will be used
            to name/identify the name of the queue from which the messages are pulled for this endpoint.
            </summary>
            <param name="endpoint">An endpoint for which the name must be resolved.</param>
            <returns></returns>
        </member>
        <member name="T:Kingo.MicroServices.Controllers.IMicroServiceBusClient">
            <summary>
            Represents a service-bus client that allows messages to be sent and received to and from it.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.IMicroServiceBusClient.ConnectToEndpointAsync(Kingo.MicroServices.IMicroServiceBusEndpoint)">
            <summary>
            Connects the specified <paramref name="endpoint"/> to the service-bus.
            </summary>
            <param name="endpoint">The endpoint to connect.</param>
            <returns><c>true</c> if the endpoint was connected; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="endpoint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.Controllers.IMicroServiceBusConnection">
            <summary>
            When implemented by a class, represents a connection to a service-bus.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.IMicroServiceBusConnection.Close">
            <summary>
            Closes the connection. 
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The connection has already been disposed.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.Controllers.MicroServiceBusClient`1">
            <summary>
            Serves as a base-class implementation of the <see cref="T:Kingo.MicroServices.Controllers.IMicroServiceBusClient"/> interface.
            </summary>
            <typeparam name="TMessage">Type of the messages that are sent to or received from the service-bus.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.Controllers.MicroServiceBusClient`1" /> class.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.NameResolverMap">
            <summary>
            Returns the map that contains one endpoint name-resolver per message type.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.CreateCommandEndpointNameResolver">
            <summary>
            Creates and returns a new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" /> that will be used to resolve
            the name of each endpoint that handles <see cref="F:Kingo.MicroServices.MessageKind.Command">commands</see>.
            </summary>
            <returns>A new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" />.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.CreateEventEndpointNameResolver">
            <summary>
            Creates and returns a new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" /> that will be used to resolve
            the name of each endpoint that handles <see cref="F:Kingo.MicroServices.MessageKind.Event">events</see>.
            </summary>
            <returns>A new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" />.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.CreateQueryRequestEndpointNameResolver">
            <summary>
            Creates and returns a new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" /> that will be used to resolve
            the name of each endpoint that handles <see cref="F:Kingo.MicroServices.MessageKind.QueryRequest">(query) requests</see>.
            </summary>
            <returns>A new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" />.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.CreateQueryResponseEndpointNameResolver">
            <summary>
            Creates and returns a new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" /> that will be used to resolve
            the name of each endpoint that handles <see cref="F:Kingo.MicroServices.MessageKind.QueryResponse">(query) responses</see>.
            </summary>
            <returns>A new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" />.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.ConnectToEndpointAsync(Kingo.MicroServices.IMicroServiceBusEndpoint)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.ConnectToCommandQueueAsync(Kingo.MicroServices.IMicroServiceBusEndpoint,System.String)">
            <summary>
            Connects the specified <paramref name="endpoint"/> to the associated command-queue of the service-bus.
            </summary>
            <param name="endpoint">The endpoint to connect.</param>
            <param name="endpointName">Name of the endpoint/queue to connect to.</param>
            <returns>The connection that has been made.</returns>
            <exception cref="T:System.ArgumentException">
            The specified <paramref name="endpoint"/> is not supported by this client.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.ConnectToEventQueueAsync(Kingo.MicroServices.IMicroServiceBusEndpoint,System.String)">
            <summary>
            Connects the specified <paramref name="endpoint"/> to the associated event-queue of the service-bus.
            </summary>
            <param name="endpoint">The endpoint to connect.</param>
            <param name="endpointName">Name of the endpoint/queue to connect to.</param>
            <returns>The connection that has been made.</returns>
            <exception cref="T:System.ArgumentException">
            The specified <paramref name="endpoint"/> is not supported by this client.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.ConnectToQueryRequestQueueAsync(Kingo.MicroServices.IMicroServiceBusEndpoint,System.String)">
            <summary>
            Connects the specified <paramref name="endpoint"/> to the associated query request-queue of the service-bus.
            </summary>
            <param name="endpoint">The endpoint to connect.</param>
            <param name="endpointName">Name of the endpoint/queue to connect to.</param>
            <returns>The connection that has been made.</returns>
            <exception cref="T:System.ArgumentException">
            The specified <paramref name="endpoint"/> is not supported by this client.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.ConnectToQueryResponseQueueAsync(Kingo.MicroServices.IMicroServiceBusEndpoint,System.String)">
            <summary>
            Connects the specified <paramref name="endpoint"/> to the associated query response-queue of the service-bus.
            </summary>
            <param name="endpoint">The endpoint to connect.</param>
            <param name="endpointName">Name of the endpoint/queue to connect to.</param>
            <returns>The connection that has been made.</returns>
            <exception cref="T:System.ArgumentException">
            The specified <paramref name="endpoint"/> is not supported by this client.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.NewEndpointNotSupportedException(Kingo.MicroServices.IMicroServiceBusEndpoint,System.String)">
            <summary>
            Creates and returns an exception that can be thrown when an attempt is made to connect to the specified
            <paramref name="endpoint"/> while this endpoint is not supported (e.g. the message kind is not supported).
            </summary>
            <param name="endpoint">The endpoint that is not supported by this client.</param>
            <param name="endpointName">Name of the endpoint/queue to connect to.</param>
            <returns>A new exception that indicates that the specified <paramref name="endpoint"/> is not supported.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="endpoint"/> or <paramref name="endpointName"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.SendAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessageToDispatch})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.SendAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sends all specified <paramref name="commands"/> to the appropriate service(s).
            By default, every command is sent one after another. If you wish to support sending
            entire batches at once, you may override this method to provide your own implementation.
            </summary>
            <param name="commands">The commands to send.</param>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.SendAsync(`0)">
            <summary>
            Sends the specified <paramref name="command"/>.
            </summary>
            <param name="command">The command to send.</param>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.PublishAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessageToDispatch})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.PublishAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Publishes all specified <paramref name="events"/>. By default, every event is published
            one after another. If you wish to support publishing entire batches at once, you may
            override this method to provide your own implementation.
            </summary>
            <param name="events">The events to publish.</param>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.PublishAsync(`0)">
            <summary>
            Publishes the specified <paramref name="event"/>.
            </summary>
            <param name="event">The event to publish.</param>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.Pack(Kingo.MicroServices.IMessageToDispatch)">
            <summary>
            Packs the specified <paramref name="message"/> into a message that can be sent to the service-bus.
            </summary>
            <param name="message">The message to pack.</param>
            <returns>A message that is ready to be dispatched by the service-bus.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.Unpack(`0)">
            <summary>
            Unpacks the specified <paramref name="message"/> and returns its (deserialized) contents.
            </summary>
            <param name="message">The message to unpack.</param>
            <returns>The contents of the specified <paramref name="message"/>.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.Close">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.Controllers.MicroServiceBusConnection">
            <summary>
            Serves as a base-class implementation of the <see cref="T:Kingo.MicroServices.Controllers.IMicroServiceBusConnection"/> interface.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusConnection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.Controllers.MicroServiceBusConnection" /> class.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Controllers.MicroServiceBusConnection.CloseToken">
            <summary>
            Returns a token that is signaled when a request has been made to close this connection.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Controllers.MicroServiceBusConnection.IsClosed">
            <summary>
            Indicates whether or not the connection has been closed.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusConnection.Close">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusConnection.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.Controllers.MicroServiceBusController">
            <summary>
            When implemented, represents a controller that can send and receive messages to and from a
            service-bus and routes any received message to a <see cref="T:Kingo.MicroServices.IMicroServiceBusEndpoint" />
            for further processing.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.#ctor(Kingo.MicroServices.IMicroServiceBusProcessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.Controllers.MicroServiceBusController" /> class.
            </summary>
            <param name="processor">The processor that will be processing all commands and/or events.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="processor"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.StartAsync(System.Threading.CancellationToken)">
            <summary>
            The start method creates a new <see cref="T:Kingo.MicroServices.Controllers.IMicroServiceBusClient"/> and attempts to connect
            every <see cref="T:Kingo.MicroServices.IMicroServiceBusEndpoint"/> that is provided by the <see cref="T:Kingo.MicroServices.IMicroServiceBusProcessor"/>
            to the service-bus through this client. If <paramref name="cancellationToken"/> is signaled before the
            client is fully created and connected, the operation is aborted and the controller remains in the
            stopped/disconnected state.
            </summary>
            <param name="cancellationToken">Token that can be used to abort the operation.</param>
            <exception cref="T:System.ObjectDisposedException">
            The controller has already been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The controller has already been started.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.StopAsync(System.Threading.CancellationToken)">
            <summary>
            The stop method closes and disposes the <see cref="T:Kingo.MicroServices.Controllers.IMicroServiceBusClient"/> gracefully,
            unless the specified <paramref name="cancellationToken"/> is signaled to abort the operation
            quickly.
            </summary>
            <param name="cancellationToken">Token that can be used to abort the operation.</param>
            <exception cref="T:System.ObjectDisposedException">
            The controller has already been disposed.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.SendAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessageToDispatch})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.PublishAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessageToDispatch})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.CreateClientAsync">
            <summary>
            Creates and returns a new <see cref="T:Kingo.MicroServices.Controllers.IMicroServiceBusClient"/> that can be used send and receive
            messages to and from a service-bus.
            </summary>
            <returns>A new client.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.IMessageEnvelope">
            <summary>
            When implemented by a class, represents an envelope of a message.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMessageEnvelope.Content">
            <summary>
            Returns the contents of the message.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMessageHandlerOperationResult">
            <summary>
            When implemented by a class, represents the result of handling a command or event.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMessageHandlerOperationResult.Messages">
            <summary>
            The commands and events that are to be sent or published.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMessageHandlerOperationResult.MessageHandlerCount">
            <summary>
            The number of message handlers that have handled the message.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMessageToDispatch">
            <summary>
            When implemented by a class, represents a message that is to be delivered by means of a service-bus.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMessageToDispatch.DeliveryTimeUtc">
            <summary>
            If specified, indicates at what (UTC) time the message should be sent or published on the service-bus.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMessageToProcess">
            <summary>
            When implemented by a class, represents a message that is being handled or executed by a processor.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMessageToProcess.Kind">
            <summary>
            Indicates whether this message represents a command, event or request.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMicroProcessorComponentConfiguration">
            <summary>
            When implemented by a class, represents the configuration for a component.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorComponentConfiguration.Lifetime">
            <summary>
            Indicates the lifetime of the component.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorComponentConfiguration.ServiceTypes">
            <summary>
            Returns all service types for which this component is registered.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMicroServiceBus">
            <summary>
            When implemented by a class, represents a service bus that can publish messages.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IMicroServiceBus.SendAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessageToDispatch})">
            <summary>
            Sends all specified <paramref name="commands" /> to the appropriate service(s).
            </summary>
            <param name="commands">A collection of commands.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="commands"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.IMicroServiceBus.PublishAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessageToDispatch})">
            <summary>
            Publishes all specified <paramref name="events" />.
            </summary>
            <param name="events">A collection of events.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="events"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.IMicroServiceBusEndpoint">
            <summary>
            When implemented by a class, represents an endpoint that handles a specific command or event.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroServiceBusEndpoint.ServiceName">
            <summary>
            Returns the name of the service this endpoint is part of.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroServiceBusEndpoint.MessageHandlerType">
            <summary>
            Returns the type of the message handler this endpoint is implemented on.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroServiceBusEndpoint.MethodInfo">
            <summary>
            Returns the <see cref="T:System.Reflection.MethodInfo"/> of the method.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroServiceBusEndpoint.MessageParameterInfo">
            <summary>
            Returns the <see cref="T:System.Reflection.ParameterInfo" /> that represents the message to be handled.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroServiceBusEndpoint.ContextParameterInfo">
            <summary>
            Returns the <see cref="T:System.Reflection.ParameterInfo" /> that represents the context that is supplied to the method.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroServiceBusEndpoint.MessageKind">
            <summary>
            Indicates whether this endpoint handles a command or an event.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IMicroServiceBusEndpoint.InvokeAsync(System.Object,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Invokes the method of the associated message handler with the specified <paramref name="message" />
            and returns its result.
            </summary>
            <param name="message">The message to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            If the specified <paramref name="message"/>  is not supported by this endpoint, it is ignored and an empty
            result will be returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="T:Kingo.MicroServices.IMicroServiceBusProcessor">
            <summary>
            When implemented by a class, represents a processor that can be connected to a service bus to
            process incoming commands and events.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroServiceBusProcessor.ServiceName">
            <summary>
            Returns the name of the service.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroServiceBusProcessor.ServiceProvider">
            <summary>
            Returns the service provider the processor uses to resolve its dependencies.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IMicroServiceBusProcessor.AssignUser(System.Security.Principal.IPrincipal)">
            <summary>
            Configures the processor to use the specified <paramref name="user"/> for each operation as long as the
            returned scope is active.
            </summary>
            <param name="user">The principal to use.</param>
            <returns>A scope that can be disposed when the principal can be reset to its previous value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="user"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.IMicroServiceBusProcessor.CreateMicroServiceBusEndpoints">
            <summary>
            Creates and returns all endpoints that are configured to handle commands or events from a service bus.
            </summary>
            <returns>A collection of endpoints.</returns>
        </member>
        <member name="T:Kingo.MicroServices.MessageKind">
            <summary>
            Represents a specific role or kind a message that a message can have.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MessageKind.Unspecified">
            <summary>
            Indicates the kind is yet to be specified.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MessageKind.Command">
            <summary>
            Represents a command.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MessageKind.Event">
            <summary>
            Represents an event.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MessageKind.QueryRequest">
            <summary>
            Represents the request-message of a query.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MessageKind.QueryResponse">
            <summary>
            Represents the response-message of a query.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.MessageToDispatch">
            <summary>
            Represents a command or event that is to be sent or published on a service-bus.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MessageToDispatch.Content">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MessageToDispatch.Kind">
            <summary>
            Indicates which kind of message is to be dispatched.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MessageToDispatch.DeliveryTimeUtc">
            <summary>
            If specified, indicates at what (UTC) time the message should be sent or published on the service-bus.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MessageToDispatch.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MessageToDispatch.CreateCommand(System.Object,System.Nullable{System.DateTimeOffset})">
            <summary>
            Creates and returns a command that is ready to be dispatched.
            </summary>
            <param name="command">The command to dispatch.</param>
            <param name="deliveryTime">
            If specified, indicates at what (UTC) time the message should be sent or published on the service-bus.
            </param>
            <returns>The message to dispatch.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="command"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.MessageToDispatch.CreateEvent(System.Object,System.Nullable{System.DateTimeOffset})">
            <summary>
            Creates and returns an event that is ready to be dispatched.
            </summary>
            <param name="event">The event to dispatch.</param>
            <param name="deliveryTime">
            If specified, indicates at what (UTC) time the message should be sent or published on the service-bus.
            </param>
            <returns>The message to dispatch.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="event"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorComponentAttribute">
            <summary>
            This attribute can be declared on any class or struct to configure its registration and run-time behavior.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponentAttribute.#ctor(Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MicroProcessorComponentAttribute" /> class.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorComponentAttribute.Lifetime">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorComponentAttribute.ServiceTypes">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponentAttribute.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MicroServiceBusExtensions">
            <summary>
            Contains extension method for instance of type <see cref="T:Kingo.MicroServices.IMicroServiceBus" />.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroServiceBusExtensions.DispatchAsync(Kingo.MicroServices.IMicroServiceBus,System.Collections.Generic.IEnumerable{Kingo.MicroServices.MessageToDispatch})">
            <summary>
            Sends all commands and publishes all events that are part of the specified
            <paramref name="messages"/> collection.
            </summary>
            <param name="bus">The bus that will dispatch the messages.</param>
            <param name="messages">A collection of commands and events to send and publish.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bus"/> or <paramref name="messages"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.MicroServiceBusExtensions.SendAsync(Kingo.MicroServices.IMicroServiceBus,System.Object[])">
            <summary>
            Sends all specified commands to the appropriate service(s).
            </summary>
            <param name="bus">The bus that will send the commands.</param>
            <param name="commands">A collection of commands to send.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bus"/> or <paramref name="commands"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.MicroServiceBusExtensions.SendAsync(Kingo.MicroServices.IMicroServiceBus,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Sends all specified commands to the appropriate service(s).
            </summary>
            <param name="bus">The bus that will send the commands.</param>
            <param name="commands">A collection of commands to send.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bus"/> or <paramref name="commands"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.MicroServiceBusExtensions.PublishAsync(Kingo.MicroServices.IMicroServiceBus,System.Object[])">
            <summary>
            Publishes all specified events.
            </summary>
            <param name="bus">The bus that will publish the events.</param>
            <param name="events">A collection of events to publish.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bus"/> or <paramref name="events" /> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.MicroServiceBusExtensions.PublishAsync(Kingo.MicroServices.IMicroServiceBus,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Publishes all specified events.
            </summary>
            <param name="bus">The bus that will publish the events.</param>
            <param name="events">A collection of events to publish.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bus"/> or <paramref name="events" /> is <c>null</c>.
            </exception>
        </member>
    </members>
</doc>
