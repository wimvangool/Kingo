<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MessageHandlerOperationResult_InvalidStreamLengthSpecified" xml:space="preserve">
    <value>The specified expected length of the stream is not valid: {0}.</value>
  </data>
  <data name="MessageHandlerOperationResult_UnexpectedStreamLength" xml:space="preserve">
    <value>The length of the stream ({0}) doesn't match the expected length ({1}).</value>
  </data>
  <data name="MessageHandlerOperationTestResult_AssertionOfMessageStreamFailed" xml:space="preserve">
    <value>One or more assertions for the published messages failed. See inner exception for details. </value>
  </data>
  <data name="MessageStream_IndexOutOfRange" xml:space="preserve">
    <value>Index cannot be negative: {0}.</value>
  </data>
  <data name="MessageStream_MessageNotFound" xml:space="preserve">
    <value>Message of type '{0}' was not found at index '{1}'; stream contains {2} message(s) of type '{0}'.</value>
  </data>
  <data name="MicroProcessorConfiguration_ProcessorAlreadyConfigured" xml:space="preserve">
    <value>Cannot invoke '{0}' at this point: the processor has already been configured.</value>
  </data>
  <data name="MicroProcessorConfiguration_ProcessorNotYetConfigured" xml:space="preserve">
    <value>Cannot invoke '{0}' at this point: the processor has not yet been configured.</value>
  </data>
  <data name="MicroProcessorConfiguration_ServicesAlreadyConfigured" xml:space="preserve">
    <value>Cannot invoke '{0}' at this point: the service collection has already been configured.</value>
  </data>
  <data name="MicroProcessorTestContext_ConfigureOperationFailed" xml:space="preserve">
    <value>Test failed because an exception of type '{0}' was thrown while configuring an operation.</value>
  </data>
  <data name="MicroProcessorTestContext_CouldNotResolveMessageHandler" xml:space="preserve">
    <value>Could not resolve message-handler of type '{0}'. Please make sure all message-handers are registered in the service-collection.</value>
  </data>
  <data name="MicroProcessorTestContext_MessageNotSet" xml:space="preserve">
    <value>Test failed because message of type '{0}' was not set by the configurator.</value>
  </data>
  <data name="MicroProcessorTestContext_RequestNotSet" xml:space="preserve">
    <value>Test failed because request of type '{0}' was not set by the configurator.</value>
  </data>
  <data name="MicroProcessorTestContext_TestAlreadyRun" xml:space="preserve">
    <value>Cannot save the MessageStream of '{0}' because a previous result of this test has already been saved.</value>
  </data>
  <data name="MicroProcessorTestContext_TestResultNotFound" xml:space="preserve">
    <value>Cannot retrieve the result of '{0}' because its results haven't been saved in this context.</value>
  </data>
  <data name="MicroProcessorTestResult_AssertionOfExceptionFailed" xml:space="preserve">
    <value>One or more assertions for exception of type '{0}' failed. See inner exception for details.</value>
  </data>
  <data name="MicroProcessorTestResult_ExceptionNotOfExpectedType" xml:space="preserve">
    <value>Expected an exception of type '{0}', but encountered an exception of type '{1}' instead.</value>
  </data>
  <data name="MicroProcessorTestResult_ExceptionNotThrown" xml:space="preserve">
    <value>The expected exception of type '{0}' was not thrown.</value>
  </data>
  <data name="MicroProcessorTestResult_ExceptionThrown" xml:space="preserve">
    <value>An unexpected exception of type '{0}' was thrown.</value>
  </data>
  <data name="MicroProcessorTestResult_InnerExceptionNull" xml:space="preserve">
    <value>Exception of type '{0}' was expected to have an inner-exception of type '{1}', but did not have any inner-exception.</value>
  </data>
  <data name="MicroProcessorTestResult_ResultNotVerified" xml:space="preserve">
    <value>Test failed by default because its result was not verified.</value>
  </data>
  <data name="MicroProcessorTestTimeline_InvalidTime" xml:space="preserve">
    <value>Cannot set time to '{0}' here because the current time is set to '{1}' and you are not allowed to go backwards in time during a test.</value>
  </data>
  <data name="MicroProcessorTestTimeline_NegativeTimeSpan" xml:space="preserve">
    <value>Cannot move the clock backwards in a test by specifying a negative value ({0}).</value>
  </data>
  <data name="MicroProcessorTestTimeline_NegativeTimeUnit" xml:space="preserve">
    <value>Cannot move the clock backwards in a test by specifying a negative value ({0}).</value>
  </data>
  <data name="MicroProcessorTestTimeline_SpecificTimeNotAllowed" xml:space="preserve">
    <value>Cannot set time to '{0}' here because the test already runs in relative time, which may cause a jump backwards in time.</value>
  </data>
  <data name="MicroProcessorTestTimeline_UnexpectedState" xml:space="preserve">
    <value>Cannot move timeline to state '{0}' because the timeline was not in the expected state '{1}'.</value>
  </data>
  <data name="MicroProcessorTest_CannotMoveToState" xml:space="preserve">
    <value>Cannot move to state '{0}' because the test was not in the expected state '{1}'.</value>
  </data>
  <data name="MicroProcessorTest_InvalidOperation" xml:space="preserve">
    <value>Cannot invoke method '{0}.{1}()' while the test is in state '{2}'. Make sure you correctly follow the builder pattern provided by the framework.</value>
  </data>
  <data name="MicroProcessorTest_SetupFailed" xml:space="preserve">
    <value>Cannot invoke '{0}.{1}()' while the test is in state '{2}'. Make sure '{0}.{1}.()' is invoked only once before the test is configured and executed.</value>
  </data>
  <data name="MicroProcessorTest_TearDownFailed" xml:space="preserve">
    <value>Cannot invoke '{0}.{1}()' while the test is in state '{2}'. Make sure '{0}.{1}()' is invoked only once after the test has ran to completion.</value>
  </data>
  <data name="NullTestResult_MissingResult" xml:space="preserve">
    <value>Test '{0}' did not produce any result. Please verify that the processor provided as an argument to the WhenAsync-method has been used to handle a message or execute a query.</value>
  </data>
  <data name="UnexpectedExceptionResult_UnexpectedException" xml:space="preserve">
    <value>Test '{0}' threw unexpected exception of type '{1}'. See inner exception for details.</value>
  </data>
</root>