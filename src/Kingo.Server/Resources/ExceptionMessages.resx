<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Repository_AggregateNotFoundByKey" xml:space="preserve">
    <value>No aggregate of type '{0}' with the specified key ({1}) was found.</value>
  </data>
  <data name="Connection_AlreadyClosed" xml:space="preserve">
    <value>The connection is already closed.</value>
  </data>
  <data name="Connection_AlreadyOpen" xml:space="preserve">
    <value>The connection is already open.</value>
  </data>
  <data name="AggregateEventStream_HandlerAlreadyRegistered" xml:space="preserve">
    <value>A handler for event '{0}' has already been registered.</value>
  </data>
  <data name="IntXXVersion_NegativeValue" xml:space="preserve">
    <value>Version cannot be negative: {0}.</value>
  </data>
  <data name="MessageHandlerClass_InvalidInstanceLifetimeMode" xml:space="preserve">
    <value>Invalid InstanceLifetime was specified on class '{0}': {1}. </value>
  </data>
  <data name="AggregateEventStream_MissingEventHandler" xml:space="preserve">
    <value>No event-handler was specified for domain-event of type '{0}'.</value>
  </data>
  <data name="DependencyClass_AmbigiousMatch" xml:space="preserve">
    <value>More than one type found that could be used as an implementation of dependency '{0}': {1}.</value>
  </data>
  <data name="InvalidMessageException_InvalidMessage" xml:space="preserve">
    <value>The message is invalid. See ErrorTree for details.</value>
  </data>
  <data name="ReadOnlyDictionary_NotSupported" xml:space="preserve">
    <value>Cannot change this collection because it is read-only.</value>
  </data>
  <data name="MessageOut_InvalidMessageType" xml:space="preserve">
    <value>A module in the query execution pipeline returned an invalid result. Expected result of type '{0}' but was '{1}'.</value>
  </data>
  <data name="MessageToStrategyMapping_IsReadOnly" xml:space="preserve">
    <value>Cannot add a new mapping because the mapping has been switched to read-only state.</value>
  </data>
  <data name="BufferedEventBus_InvalidMessage" xml:space="preserve">
    <value>The message of type '{0}' could not be published because it is not valid. See ErrorTree for details.</value>
  </data>
  <data name="AggregateRoot_InvalidKey" xml:space="preserve">
    <value>The key of the event ({0}) must match the key of the aggregate ({1}).</value>
  </data>
  <data name="AggregateRoot_InvalidVersion" xml:space="preserve">
    <value>The version of the event ({0}) must be newer than the version of the aggregate ({1}).</value>
  </data>
  <data name="Repository_DuplicateKey" xml:space="preserve">
    <value>Another aggregate with the same key already exists: '{0}'.</value>
  </data>
  <data name="MessageHandler_AmbiguousAttributeMatch" xml:space="preserve">
    <value>Two or more attributes declared on MessageHandler '{0}' are assignable to '{1}'.</value>
  </data>
  <data name="Repository_DeleteNotSupported" xml:space="preserve">
    <value>Cannot delete aggregate of type '{0}' because the operation is not supported.</value>
  </data>
  <data name="Version_IncrementNotSupported" xml:space="preserve">
    <value>Auto-increment of type '{0}' is not supported. Please override AggregateRoot&lt;,&gt;.NextVersion() or change the version type of the aggregate.</value>
  </data>
  <data name="UnitOfWorkScope_AlreadyCompleted" xml:space="preserve">
    <value>Cannot complete this scope because it has already been completed.</value>
  </data>
  <data name="Repository_UpdateNotSupported" xml:space="preserve">
    <value>Cannot update aggregate of type '{0}' because updates are not supported by repository '{1}'.</value>
  </data>
  <data name="Repository_ConcurrenyException" xml:space="preserve">
    <value>Aggregate of type '{0}' could not be updated because of a concurreny conflict. The expected version in the data store was '{1}'. </value>
  </data>
  <data name="TypeToContractMap_SharedContract" xml:space="preserve">
    <value>Both type '{0}' and type '{1}' are mapped to contract '{2}'.</value>
  </data>
  <data name="TypeToContractMap_ContractNotFound" xml:space="preserve">
    <value>No mapping exists for type '{0}'.</value>
  </data>
  <data name="TypeToContractMap_TypeNotFound" xml:space="preserve">
    <value>No mapping exists for contract '{0}'.</value>
  </data>
  <data name="AggregateEventStreamFactory_ConstructorNotFound" xml:space="preserve">
    <value>Could not restore aggregate of type '{0}' because it has no default constructor. Either declare a default constructor, or configure the factory to create the instance without calling a constructor.</value>
  </data>
  <data name="AggregateEventStreamFactory_InvalidEvents" xml:space="preserve">
    <value>Could not restore aggregate of type '{0}' because one of the specified events could not be applied to it. See inner exception for details.</value>
  </data>
</root>