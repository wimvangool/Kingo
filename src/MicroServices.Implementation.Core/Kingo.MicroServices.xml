<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kingo.MicroServices</name>
    </assembly>
    <members>
        <member name="T:Kingo.Clocks.Clock">
            <summary>
            Provides a basic implementation of the <see cref="T:Kingo.Clocks.IClock" /> interface.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.Clock.LocalTime">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.Clock.LocalDate">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.Clock.LocalDateAndTime">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.Clock.UtcTime">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.Clock.UtcDate">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.Clock.UtcDateAndTime">
            <inheritdoc />
        </member>
        <member name="F:Kingo.Clocks.Clock.Default">
            <summary>
            Returns the default clock of this system.
            </summary>
        </member>
        <member name="P:Kingo.Clocks.Clock.Current">
            <summary>
            Returns the clock associated to the current thread.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.Clock.OverrideThreadLocal(System.Func{System.DateTimeOffset})">
            <summary>
            Sets the current clock that is accessible by the current thread through <see cref="P:Kingo.Clocks.Clock.Current" />
            only as long as the scope is active.
            </summary>
            <param name="timeFactory">The delegate that is used to obtain the UTC date and time.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="timeFactory"/> is <c>null</c>.
            </exception>                       
        </member>
        <member name="M:Kingo.Clocks.Clock.OverrideThreadLocal(System.DateTimeOffset)">
            <summary>
            Sets the current clock that is accessible by the current thread through <see cref="P:Kingo.Clocks.Clock.Current" />
            only as long as the scope is active.
            </summary>
            <param name="startTime">The time that will serve as the start time of the scope.</param>
            <returns>The scope that is to be disposed when ended.</returns>
        </member>
        <member name="M:Kingo.Clocks.Clock.OverrideThreadLocal(Kingo.Clocks.IClock)">
            <summary>
            Sets the current clock that is accessible by the current thread through <see cref="P:Kingo.Clocks.Clock.Current" />
            only as long as the scope is active.
            </summary>
            <param name="clock">The clock to set.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="clock"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.Clocks.Clock.OverrideAsyncLocal(System.Func{System.DateTimeOffset})">
            <summary>
            Sets the current value that is accessible by all threads that share the same logical call context
            through <see cref="P:Kingo.Clocks.Clock.Current" /> as long as the scope is active.
            </summary>
            <param name="timeFactory">The delegate that is used to obtain the UTC date and time.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="timeFactory"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The call is made inside a thread local scope.
            </exception>
        </member>
        <member name="M:Kingo.Clocks.Clock.OverrideAsyncLocal(System.DateTimeOffset)">
            <summary>
            Sets the current value that is accessible by all threads that share the same logical call context
            through <see cref="P:Kingo.Clocks.Clock.Current" /> as long as the scope is active.
            </summary>
            <param name="startTime">The time that will serve as the start time of the scope.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.InvalidOperationException">
            The call is made inside a thread local scope.
            </exception>
        </member>
        <member name="M:Kingo.Clocks.Clock.OverrideAsyncLocal(Kingo.Clocks.IClock)">
            <summary>
            Sets the current value that is accessible by all threads that share the same logical call context
            through <see cref="P:Kingo.Clocks.Clock.Current" /> as long as the scope is active.
            </summary>
            <param name="clock">The clock to set.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="clock"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The call is made inside a thread local scope.
            </exception>
        </member>
        <member name="M:Kingo.Clocks.Clock.Override(System.Func{System.DateTimeOffset})">
            <summary>
            Sets the current value that is accessible by all threads
            through <see cref="P:Kingo.Clocks.Clock.Current" /> as long as the scope is active.
            </summary>
            <param name="timeFactory">The delegate that is used to obtain the UTC date and time.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="timeFactory"/> is <c>null</c>.
            </exception>        
            <exception cref="T:System.InvalidOperationException">
            The call is made inside an async local or thread local scope.
            </exception>      
        </member>
        <member name="M:Kingo.Clocks.Clock.Override(System.DateTimeOffset)">
            <summary>
            Sets the current value that is accessible by all threads
            through <see cref="P:Kingo.Clocks.Clock.Current" /> as long as the scope is active.
            </summary>
            <param name="startTime">The time that will serve as the start time of the scope.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.InvalidOperationException">
            The call is made inside an async local or thread local scope.
            </exception> 
        </member>
        <member name="M:Kingo.Clocks.Clock.Override(Kingo.Clocks.IClock)">
            <summary>
            Sets the current value that is accessible by all threads
            through <see cref="P:Kingo.Clocks.Clock.Current" /> as long as the scope is active.
            </summary>
            <param name="clock">The clock to set.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="clock"/> is <c>null</c>.
            </exception>  
            <exception cref="T:System.InvalidOperationException">
            The call is made inside an async local or thread local scope.
            </exception>      
        </member>
        <member name="T:Kingo.Clocks.ClockExtensions">
            <summary>
            Contains extension methods for the <see cref="T:Kingo.Clocks.IClock" /> interface.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.ClockExtensions.Shift(Kingo.Clocks.IClock,System.TimeSpan)">
            <summary>
            Returns a clock that shows the time of the current clock, plus the given offset.
            </summary>
            <param name="clock">A clock.</param>
            <param name="offset">The offset to add to the time of the current clock.</param>
            <returns>A clock that shows the time of the current clock, plus the given offset.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="clock"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Clocks.DefaultClock.LocalDateAndTime">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.DefaultClock.UtcDateAndTime">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Clocks.DelegateClock">
            <summary>
            Represents a clock that implemented by a delegate.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.DelegateClock.#ctor(System.Func{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Clocks.DelegateClock" /> class.
            </summary>
            <param name="timeFactory">The delegate that is used to obtain the UTC date and time.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="timeFactory"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Clocks.DelegateClock.UtcDateAndTime">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Clocks.HighResolutionClock">
            <summary>
            Represents a clock that uses a <see cref="T:System.Diagnostics.Stopwatch" /> in combination with
            the system clock to simulate a high resolution system time clock.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.HighResolutionClock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.HighResolutionClock.UtcDateAndTime">
            <inheritdoc />
        </member>
        <member name="F:Kingo.Clocks.HighResolutionClock.DefaultSynchronizationInterval">
            <summary>
            The default synchronization interval used when not explicitly specified is 10 seconds.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.HighResolutionClock.StartNew">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Clocks.HighResolutionClock" /> that is counting from the current date and time.
            </summary>        
            <returns>A new <see cref="T:Kingo.Clocks.HighResolutionClock" />.</returns>
        </member>
        <member name="M:Kingo.Clocks.HighResolutionClock.StartNew(Kingo.Clocks.IClock)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Clocks.HighResolutionClock" /> based on the specified <paramref name="referenceClock"/>.
            </summary> 
            <param name="referenceClock">
            The clock that will be used as a reference for this clock.
            </param>        
            <returns>A new <see cref="T:Kingo.Clocks.HighResolutionClock" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="referenceClock "/> is <c>null</c>.
            </exception>         
        </member>
        <member name="M:Kingo.Clocks.HighResolutionClock.StartNew(Kingo.Clocks.IClock,System.TimeSpan)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Clocks.HighResolutionClock" /> based on the specified <paramref name="referenceClock"/>.
            </summary> 
            <param name="referenceClock">
            The clock that will be used as a reference for this clock.
            </param>
            <param name="synchronizationInterval">
            The interval that is used to periodically synchronize this clock with the specified <paramref name="referenceClock"/>.
            A value of <see cref="F:System.TimeSpan.Zero" /> means this clock is never synchronized.
            </param>
            <returns>A new <see cref="T:Kingo.Clocks.HighResolutionClock" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="referenceClock "/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="synchronizationInterval"/> is a negative <see cref="T:System.TimeSpan" />.
            </exception>               
        </member>
        <member name="T:Kingo.Clocks.IClock">
            <summary>
            When implemented by a class, represents a service that provides the current date and time.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.IClock.LocalTime">
            <summary>
            Returns the time of the day in local time.
            </summary>
            <returns>The time of the day in local time.</returns>
        </member>
        <member name="M:Kingo.Clocks.IClock.LocalDate">
            <summary>
            Returns the date in local time.
            </summary>
            <returns>The date in local time.</returns>
        </member>
        <member name="M:Kingo.Clocks.IClock.LocalDateAndTime">
            <summary>
            Returns the date and time in local time.
            </summary>
            <returns>The date and time in local time.</returns>
        </member>
        <member name="M:Kingo.Clocks.IClock.UtcTime">
            <summary>
            Returns the time of the day in UTC-time.
            </summary>
            <returns>Time of the day in UTC-time.</returns>
        </member>
        <member name="M:Kingo.Clocks.IClock.UtcDate">
            <summary>
            Returns the date in UTC-time.
            </summary>
            <returns>Date in UTC-time.</returns>
        </member>
        <member name="M:Kingo.Clocks.IClock.UtcDateAndTime">
            <summary>
            Returns the date and time in UTC-time.
            </summary>
            <returns>Date and time in UTC-time.</returns>
        </member>
        <member name="T:Kingo.Clocks.StopwatchClock">
            <summary>
            This clock represents a stopwatch that starts at a specified date and/or time and can be started and stopped.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.StopwatchClock.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Clocks.StopwatchClock" /> class.
            </summary>
            <param name="startTime">The initial date and time.</param>
        </member>
        <member name="P:Kingo.Clocks.StopwatchClock.IsRunning">
            <summary>
            Indicates whether or not this clock is running.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.StopwatchClock.Start">
            <summary>
            Starts the clock.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.StopwatchClock.Stop">
            <summary>
            Stops the clock.
            </summary>
        </member>
        <member name="P:Kingo.Clocks.StopwatchClock.ElapsedTime">
            <summary>
            Returns the total amount of time the stopwatch has been running.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.StopwatchClock.UtcDateAndTime">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.StopwatchClock.StartNew">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Clocks.StopwatchClock" /> that is started immediately.
            </summary>        
            <returns>A new <see cref="T:Kingo.Clocks.StopwatchClock" />.</returns>
        </member>
        <member name="M:Kingo.Clocks.StopwatchClock.StartNew(System.DateTimeOffset)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Clocks.StopwatchClock" /> that is started immediately.
            </summary>    
            <param name="startTime">The initial date and time.</param>    
            <returns>A new <see cref="T:Kingo.Clocks.StopwatchClock" />.</returns>
        </member>
        <member name="T:Kingo.Collections.Generic.CollectionExtensions">
            <summary>
            Contains extension methods and helper methods for collection types.
            </summary>
        </member>
        <member name="M:Kingo.Collections.Generic.CollectionExtensions.EnsureNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Ensures the return-value is always a non-null collection of items. If <paramref name="collection"/>
            is <c>null</c>, an empty collection is returned.
            </summary>
            <typeparam name="T">Type of the items in the collection.</typeparam>
            <param name="collection">A collection of items.</param>
            <returns>A non-null collection.</returns>
        </member>
        <member name="M:Kingo.Collections.Generic.CollectionExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection where all <c>null</c> values have been removed.
            </summary>
            <typeparam name="T">Type of the items in the collection.</typeparam>
            <param name="collection">A collection of items.</param>
            <returns>A subset of the specified <paramref name="collection"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Collections.Generic.CollectionExtensions.TryGetItem``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0@)">
            <summary>
            Attempts to retrieve the <paramref name="element"/> at the specified <paramref name="index"/>.
            </summary>
            <typeparam name="TValue">Type of the element.</typeparam>
            <param name="collection">The collection to get the element from.</param>
            <param name="index">The index of the element.</param>
            <param name="element">
            If this method returns <c>true</c>, this parameter will refer to the element at the specified <paramref name="index"/>;
            otherwise, it will be set to the default value of <typeparamref name="TValue"/>.
            </param>
            <returns>
            <c>true</c> if the collection contains an element at the specified <paramref name="index"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.Collections.Generic.CollectionExtensions.TryGetFirstItem``1(System.Collections.Generic.IEnumerable{``0},``0@)">
            <summary>
            Attempts to retrieve the first element of the specified collection.
            </summary>
            <typeparam name="TValue">Type of the element.</typeparam>
            <param name="collection">The collection to get the element from.</param>
            <param name="element">
            If this method returns <c>true</c>, this parameter will refer to the first element of the specified <paramref name="collection"/>;
            otherwise, it will be set to the default value of <typeparamref name="TValue"/>.
            </param>
            <returns><c>true</c> if <paramref name="collection"/> contains any elements; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is <c>null</c>.
            </exception>  
        </member>
        <member name="M:Kingo.Collections.Generic.CollectionExtensions.TryGetFirstItem``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0@)">
            <summary>
            Attempts to retrieve the first element of the specified collection that matches the specified <paramref name="predicate"/>. If
            <paramref name="predicate"/> is <c>null</c>, the first element of the collection will be returned.
            </summary>
            <typeparam name="TValue">Type of the element.</typeparam>
            <param name="collection">The collection to get the element from.</param>
            <param name="predicate">The predicate that will be used to return the correct element.</param>
            <param name="element">
            If this method returns <c>true</c>, this parameter will refer to the first element of the specified <paramref name="collection"/>;
            otherwise, it will be set to the default value of <typeparamref name="TValue"/>.
            </param>
            <returns>
            <c>true</c> if <paramref name="collection"/> contains any elements that matches the specified <paramref name="predicate"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is <c>null</c>.
            </exception>  
        </member>
        <member name="T:Kingo.Collections.Generic.EmptyList`1">
            <summary>
            Represents an empty list.
            </summary>
            <typeparam name="T">Type of the items in the list.</typeparam>
        </member>
        <member name="P:Kingo.Collections.Generic.EmptyList`1.Count">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Collections.Generic.EmptyList`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Collections.Generic.EmptyList`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Collections.Generic.ReadOnlyList`1">
            <summary>
            Provides a base class implementation for all classes that implement the <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> interface.
            </summary>
            <typeparam name="T">Type of the items in the list.</typeparam>
        </member>
        <member name="P:Kingo.Collections.Generic.ReadOnlyList`1.Count">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Collections.Generic.ReadOnlyList`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Collections.Generic.ReadOnlyList`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Comparable">
            <summary>
            Contains some helper methods for types implementing the <see cref="T:System.IComparable`1" /> interface.
            </summary>
        </member>
        <member name="F:Kingo.Comparable.Less">
            <summary>
            Value indicating that left is less than right.
            </summary>
        </member>
        <member name="F:Kingo.Comparable.Equal">
            <summary>
            Value indicating that left is equal to right.
            </summary>
        </member>
        <member name="F:Kingo.Comparable.Greater">
            <summary>
            Value indicating that left is greater than right.
            </summary>
        </member>
        <member name="M:Kingo.Comparable.CompareValues``1(``0,System.Object)">
            <summary>
            Determines whether <paramref name="instance"/> is less than, equal to or greater than <paramref name="obj"/>.
            </summary>
            <typeparam name="T">Type of the objects to compare.</typeparam>
            <param name="instance">The typed instance.</param>
            <param name="obj">The untyped instance.</param>
            <returns>
            A negative value if <paramref name="instance"/> is less than <paramref name="obj"/>,
            zero if <paramref name="instance"/> is equal to <paramref name="obj"/>, or
            A positive value if <paramref name="instance"/> is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="obj"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> is not of type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Kingo.Comparable.CompareReferences``1(``0,System.Object)">
            <summary>
            Determines whether <paramref name="instance"/> is less than, equal to or greater than <paramref name="obj"/>.
            </summary>
            <typeparam name="T">Type of the objects to compare.</typeparam>
            <param name="instance">The typed instance.</param>
            <param name="obj">The untyped instance.</param>
            <returns>
            A negative value if <paramref name="instance"/> is less than <paramref name="obj"/>,
            zero if <paramref name="instance"/> is equal to <paramref name="obj"/>, or
            A positive value if <paramref name="instance"/> is greater than <paramref name="obj"/>.
            </returns>        
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> is not of type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Kingo.Comparable.IsLessThan``1(``0,``0)">
            <summary>
            Determines whether <paramref name="left"/> is less than <paramref name="right"/>.
            </summary>
            <typeparam name="T">Type of the objects to compare.</typeparam>
            <param name="left">Left instance.</param>
            <param name="right">Right instance.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Comparable.IsLessThanOrEqualTo``1(``0,``0)">
            <summary>
            Determines whether <paramref name="left"/> is less than or equal to <paramref name="right"/>.
            </summary>
            <typeparam name="T">Type of the objects to compare.</typeparam>
            <param name="left">Left instance.</param>
            <param name="right">Right instance.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Comparable.IsGreaterThan``1(``0,``0)">
            <summary>
            Determines whether <paramref name="left"/> is greater than <paramref name="right"/>.
            </summary>
            <typeparam name="T">Type of the objects to compare.</typeparam>
            <param name="left">Left instance.</param>
            <param name="right">Right instance.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Comparable.IsGreaterThanOrEqualTo``1(``0,``0)">
            <summary>
            Determines whether <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
            </summary>
            <typeparam name="T">Type of the objects to compare.</typeparam>
            <param name="left">Left instance.</param>
            <param name="right">Right instance.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Comparable.Compare``1(``0,``0)">
            <summary>
            Determines whether <paramref name="left"/> is less than, equal to or greater than <paramref name="right"/>.
            </summary>
            <typeparam name="T">Type of the rightects to compare.</typeparam>
            <param name="left">Left instance.</param>
            <param name="right">Right instance.</param>
            <returns>
            A negative value if <paramref name="left"/> is less than <paramref name="right"/>,
            zero if <paramref name="left"/> is equal to <paramref name="right"/>, or
            a positive value if <paramref name="left"/> is greater than <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Kingo.Comparable.NewUnexpectedTypeException(System.Type,System.Type)">
            <summary>
            Creates and returns a new <see cref="T:System.ArgumentException" /> indicating that a certain instance could not be compared
            to another instance because their types didn't match.
            </summary>
            <param name="instanceType">Type of the main instance.</param>
            <param name="otherType">Type of the instance to compare.</param>
            <returns>A new <see cref="T:System.ArgumentException" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="instanceType"/> or <paramref name="otherType"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.DateTimeSpan">
            <summary>
            Represents a timespan with a specific start- and end date and/or time.
            </summary>
        </member>
        <member name="F:Kingo.DateTimeSpan.MaxValue">
            <summary>
            Represents the maximum span of time (from <see cref="F:System.DateTimeOffset.MinValue"/> to <see cref="F:System.DateTimeOffset.MaxValue"/>).
            </summary>
        </member>
        <member name="M:Kingo.DateTimeSpan.#ctor(System.DateTime,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.DateTimeSpan" /> class.
            </summary>
            <param name="start">Start of this time span.</param>
            <param name="duration">Duration of this time span.</param>        
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="duration"/> represents a negative time span, or the end of the resulting time span
            exceeds <see cref="F:System.DateTimeOffset.MaxValue" />.
            </exception>
        </member>
        <member name="M:Kingo.DateTimeSpan.#ctor(System.DateTimeOffset,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.DateTimeSpan" /> class.
            </summary>
            <param name="start">Start of this time span.</param>
            <param name="duration">Duration of this time span.</param>        
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="duration"/> represents a negative time span, or the end of the resulting time span
            exceeds <see cref="F:System.DateTimeOffset.MaxValue" />.
            </exception>
        </member>
        <member name="M:Kingo.DateTimeSpan.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.DateTimeSpan" /> class. If <paramref name="start"/> and <paramref name="end"/>
            are in a different time-zone, <paramref name="end"/> will be adjusted to the time-zone of <paramref name="start"/>.
            </summary>
            <param name="start">Start of this time span.</param>
            <param name="end">End of this time span.</param>        
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> represents a moment in time after <paramref name="end"/>.
            </exception>
        </member>
        <member name="M:Kingo.DateTimeSpan.#ctor(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.DateTimeSpan" /> class. If <paramref name="start"/> and <paramref name="end"/>
            are in a different time-zone, <paramref name="end"/> will be adjusted to the time-zone of <paramref name="start"/>.
            </summary>
            <param name="start">Start of this time span.</param>
            <param name="end">End of this time span.</param>        
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> represents a moment in time after <paramref name="end"/>.
            </exception>
        </member>
        <member name="P:Kingo.DateTimeSpan.Start">
            <summary>
            Start of this time span.
            </summary>
        </member>
        <member name="P:Kingo.DateTimeSpan.End">
            <summary>
            End of this time span.
            </summary>
        </member>
        <member name="P:Kingo.DateTimeSpan.EndInclusive">
            <summary>
            End of this time span in its inclusive form.
            </summary>
        </member>
        <member name="M:Kingo.DateTimeSpan.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.DateTimeSpan.Equals(Kingo.DateTimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.DateTimeSpan.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Kingo.DateTimeSpan.op_Equality(Kingo.DateTimeSpan,Kingo.DateTimeSpan)">
            <summary>Determines whether <paramref name="left" /> is equal to <paramref name="right" />.</summary>
            <param name="left">Left instance</param>
            <param name="right">Right instance</param>
            <returns>
            <c>true</c> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.DateTimeSpan.op_Inequality(Kingo.DateTimeSpan,Kingo.DateTimeSpan)">
            <summary>Determines whether <paramref name="left" /> is not equal to <paramref name="right" />.</summary>
            <param name="left">Left instance</param>
            <param name="right">Right instance</param>
            <returns>
            <c>true</c> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:Kingo.DateTimeSpan.Duration">
            <summary>
            Returns the duration of this time span.
            </summary>
        </member>
        <member name="M:Kingo.DateTimeSpan.op_Implicit(Kingo.DateTimeSpan)~System.TimeSpan">
            <summary>
            Implicitly converts a <see cref="T:Kingo.DateTimeSpan" /> to a <see cref="T:System.TimeSpan" />, representing its duration.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Kingo.DateTimeSpan.Shift(System.TimeSpan)">
            <summary>
            Shifts the entire time span forwards or backwards in time, depending on the specified <paramref name="shift"/> value.
            </summary>
            <param name="shift">The amount of time to shift this time span.</param>
            <returns>The resulting time span.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="shift"/> is not valid because the resulting time span would not be a valid time span.
            </exception>
        </member>
        <member name="M:Kingo.DateTimeSpan.ShiftStart(System.TimeSpan)">
            <summary>
            Shifts the start of this time span forwards or backwards in time, depending on the specified <paramref name="shift"/> value.
            </summary>
            <param name="shift">The amount of time to shift the start value.</param>
            <returns>The resulting time span.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="shift"/> is not valid because the resulting time span would not be a valid time span.
            </exception>
        </member>
        <member name="M:Kingo.DateTimeSpan.ShiftStart(System.DateTimeOffset)">
            <summary>
            Shifts the start of this time span forwards or backwards in time, depending on the specified <paramref name="newStart"/> value.
            </summary>
            <param name="newStart">The new start value.</param>
            <returns>The resulting time span, with the offset equal to the current time span offset.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="newStart"/> is not valid because the resulting time span would not be a valid time span.
            </exception>
        </member>
        <member name="M:Kingo.DateTimeSpan.ShiftEnd(System.TimeSpan)">
            <summary>
            Shifts the end of this time span forwards or backwards in time, depending on the specified <paramref name="shift"/> value.
            </summary>
            <param name="shift">The amount of time to shift the end value.</param>
            <returns>The resulting time span.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="shift"/> is not valid because the resulting time span would not be a valid time span.
            </exception>
        </member>
        <member name="M:Kingo.DateTimeSpan.ShiftEnd(System.DateTimeOffset)">
            <summary>
            Shifts the end of this time span forwards or backwards in time, depending on the specified <paramref name="newEnd"/> value.
            </summary>
            <param name="newEnd">The new end value.</param>
            <returns>The resulting time span, with the offset equal to the current time span offset.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="newEnd"/> is not valid because the resulting time span would not be a valid time span.
            </exception>
        </member>
        <member name="M:Kingo.DateTimeSpan.ToLocalTime">
            <summary>
            Creates and returns a time span that is identical to this instance, but is represented in times of the currently local time zone.
            </summary>
            <returns>A new <see cref="T:Kingo.DateTimeSpan"/> instance.</returns>
        </member>
        <member name="M:Kingo.DateTimeSpan.ToUniveralTime">
            <summary>
            Creates and returns a time span that is identical to this instance, but is represented in UTC time.
            </summary>
            <returns>A new <see cref="T:Kingo.DateTimeSpan"/> instance.</returns>
        </member>
        <member name="M:Kingo.DateTimeSpan.ToOffset(System.TimeSpan)">
            <summary>
            Creates and returns a time span that is identical to this instance, but is represented in times with the specified <paramref name="offset"/>.
            </summary>
            <returns>A new <see cref="T:Kingo.DateTimeSpan"/> instance.</returns>
        </member>
        <member name="M:Kingo.DateTimeSpan.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.DateTimeSpan.ToString(System.String)">
            <summary>
            Formats the current time span in the specified format.
            </summary>
            <param name="format">
            The format string used to format the times of this time span.
            </param>
            <returns>A formatted representation of this time span.</returns>
        </member>
        <member name="M:Kingo.DateTimeSpan.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.DateTimeSpan.Contains(System.DateTime)">
            <summary>
            Determines whether or not the specified <paramref name="value"/> is part of this time span.
            </summary>
            <param name="value">The value to check.</param>        
            <returns><c>true</c> if <paramref name="value"/> is part of this time span; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.DateTimeSpan.Contains(System.DateTimeOffset)">
            <summary>
            Determines whether or not the specified <paramref name="value"/> is part of this time span.
            </summary>
            <param name="value">The value to check.</param>        
            <returns><c>true</c> if <paramref name="value"/> is part of this time span; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.DateTimeSpan.Enumerate(System.TimeSpan)">
            <summary>
            Returns all particular points in time that are part of this time span, where each point in time is separated by the given <paramref name="stepSize" />.
            If <paramref name="stepSize"/> represents a positive time span, enumeration will begin at <see cref="P:Kingo.DateTimeSpan.Start" />, and all points in time will be in
            increasing chronological order. If <paramref name="stepSize" /> represents a negative time span, enumeration will begin at <see cref="P:Kingo.DateTimeSpan.End"/>, and all
            points in time will be in decreasing chronological order.
            </summary>
            <param name="stepSize">The step-size of the enumeration.</param>
            <returns>A lazy initialized collection of points in time.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="stepSize" /> is zero.
            </exception>
        </member>
        <member name="M:Kingo.DateTimeSpan.Split(System.TimeSpan,System.Boolean)">
            <summary>
            Splits this time span into several spans, of which all durations match the specified <paramref name="duration"/>, except
            (possibly) the last span, which will have a duration of the remaining span of time. If <paramref name="duration"/> represents
            a positive time span, enumeration will begin at <see cref="P:Kingo.DateTimeSpan.Start" />, and all spans will be in increasing chronological order.
            If <paramref name="duration" /> represents a negative time span, enumeration will begin at <see cref="P:Kingo.DateTimeSpan.End"/>, and all
            spans will be in decreasing chronological order.
            </summary>
            <param name="duration">The desired duration of each returned span.</param>
            <param name="includeRemainder">
            If <c>true</c>, the last element of the returned collection will be the remainder of the split-operation, which may or may not
            have a duration of less than the specified <paramref name="duration"/>.
            </param>
            <returns>A lazy initialized collection of time spans.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="duration"/> is zero.
            </exception>
        </member>
        <member name="M:Kingo.DateTimeSpan.IntersectsWith(Kingo.DateTimeSpan)">
            <summary>
            Determines whether or not this time span intersects with <paramref name="other"/>.
            </summary>
            <param name="other">Another time span.</param>
            <returns>
            <c>true</c> if this time span intersects with <paramref name="other"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.DateTimeSpan.GetIntersection(Kingo.DateTimeSpan)">
            <summary>
            Creates and returns a time span that represents the intersection of this time span and <paramref name="other"/>, if it exists.
            </summary>
            <param name="other">Another time span.</param>
            <returns>
            The calculated intersection, or <c>null</c> if no intersection exists.
            </returns>
        </member>
        <member name="M:Kingo.DateTimeSpan.TryGetIntersection(Kingo.DateTimeSpan,Kingo.DateTimeSpan@)">
            <summary>
            Creates and returns a time span that represents the intersection of this time span and <paramref name="other"/>, if it exists.
            </summary>
            <param name="other">Another time span.</param>
            <param name="intersection">
            If an intersection exists, this parameter will refer to the calculated intersection.
            </param>
            <returns>
            <c>true</c> if this time span intersects with <paramref name="other"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.DateTimeSpan.GetDifference(Kingo.DateTimeSpan)">
            <summary>
            Returns a collection of time spans that represent the differences or non-intersecting spans between this time span and <paramref name="other"/>.
            The resulting collection may contain zero, one or two spans, depending on if and how this time span intersects with <paramref name="other"/>.
            </summary>
            <param name="other">Another time span.</param>
            <returns>
            The difference between this span and <paramref name="other"/> in the form of a collection of spans with either
            zero, one or two elements.
            </returns>
        </member>
        <member name="M:Kingo.DateTimeSpan.FromYear(System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
            Creates and returns a new time span that represents the specified <paramref name="year"/> in the specified time zone.
            </summary>
            <param name="year">A year.</param>
            <param name="offset">Offset representing the desired time zone.</param>
            <returns>A time span representing the specified <paramref name="year"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="year"/> is a not a valid year.
            </exception>
        </member>
        <member name="M:Kingo.DateTimeSpan.FromMonth(System.Int32,System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
            Creates and returns a new time span that represents the specified <paramref name="month"/> of the specified <paramref name="year"/> in the specified time zone.
            </summary>
            <param name="year">A year.</param>
            <param name="month">A month.</param>
            <param name="offset">Offset representing the desired time zone.</param>
            <returns>A time span representing the specified month>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="year"/> is a not a valid year or <paramref name="month"/> is not a valid month.
            </exception>
        </member>
        <member name="M:Kingo.DateTimeSpan.Today">
            <summary>
            Creates and returns a new time span that represents the current day (in local time).
            </summary>
            <returns>A time span representing today.</returns>
        </member>
        <member name="M:Kingo.DateTimeSpan.FromDay(System.DateTime)">
            <summary>
            Creates and returns a new time span that represents the specified day.
            </summary>
            <param name="day">A particular day.</param>
            <returns>A time span representing the specified <paramref name="day"/>.</returns>        
        </member>
        <member name="M:Kingo.DateTimeSpan.FromDay(System.DateTimeOffset)">
            <summary>
            Creates and returns a new time span that represents the specified day.
            </summary>
            <param name="day">A particular day.</param>
            <returns>A time span representing the specified <paramref name="day"/>.</returns>    
        </member>
        <member name="M:Kingo.DateTimeSpan.FromDay(System.Int32,System.Int32,System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
            Creates and returns a new time span that represents the specified day.
            </summary>
            <param name="year">A year.</param>
            <param name="month">A month.</param>
            <param name="day">A day of the month.</param>
            <param name="offset">Offset representing the desired time zone.</param>
            <returns>A time span that represents the specified day.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="year"/>, <paramref name="month"/> and/or <paramref name="day"/> do not specify a valid day.
            </exception>
        </member>
        <member name="T:Kingo.Disposable">
            <summary>
            Serves as a base-class for disposable objects.
            </summary>
        </member>
        <member name="P:Kingo.Disposable.IsDisposed">
            <summary>
            Indicates whether or not an object has been disposed.
            </summary>
        </member>
        <member name="M:Kingo.Disposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Kingo.Disposable.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">
            Indicates if the method was called by the application explicitly (<c>true</c>), or by the finalizer
            (<c>false</c>).
            </param>
            <remarks>
            If <paramref name="disposing"/> is <c>true</c>, this method will dispose any managed resources immediately.
            Otherwise, only unmanaged resources will be released.
            </remarks>
        </member>
        <member name="M:Kingo.Disposable.NewObjectDisposedException">
            <summary>
            Creates and returns a new <see cref="T:System.ObjectDisposedException" /> indicating this instance has been disposed.
            </summary>
            <returns>A new <see cref="T:System.ObjectDisposedException" />.</returns>
        </member>
        <member name="T:Kingo.EnumOperators`1">
            <summary>
            Contains several generic operators that can be used for Enum types.
            </summary>
            <typeparam name="TEnum">Type of the Enum.</typeparam>
        </member>
        <member name="M:Kingo.EnumOperators`1.AllValuesCombined">
            <summary>
            Returns an Enum value where are values of the Enum are bitwise OR-ed into a single value.
            </summary>
            <returns>A bitwise OR-ed value of all defined values.</returns>
        </member>
        <member name="M:Kingo.EnumOperators`1.AllValues">
            <summary>
            Returns all declared values of an enum.
            </summary>
            <returns>A collection of enum values.</returns>
        </member>
        <member name="M:Kingo.EnumOperators`1.IsDefined(`0,`0)">
            <summary>
            Determines whether or not all bits of <paramref name="value"/> are set in <paramref name="compositeValue"/>.
            </summary>
            <param name="value">The bits to check.</param>
            <param name="compositeValue">The collection of bits that is checked.</param>
            <returns>
            <c>true</c> if all bits of <paramref name="value"/> are set in <paramref name="compositeValue"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.EnumOperators`1.Or(`0,`0)">
            <summary>
            Performs a binary OR-operation on the specified Enum types.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>A value where the bits of <paramref name="x"/> and <paramref name="y"/> have been OR-ed.</returns>        
        </member>
        <member name="M:Kingo.EnumOperators`1.Or(`0,`0,`0[])">
            <summary>
            Performs a binary OR-operation on the specified Enum types.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <param name="values">A collection of Enum values.</param>
            <returns>A value where the bits of the specified <paramref name="values"/> have been OR-ed.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EnumOperators`1.Or(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Performs a binary OR-operation on the specified Enum types.
            </summary>        
            <param name="values">A collection of Enum values.</param>
            <returns>A value where the bits of the specified <paramref name="values"/> have been OR-ed.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EnumOperators`1.And(`0,`0)">
            <summary>
            Performs a binary AND-operation on the specified Enum types.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>A value where the bits of <paramref name="x"/> and <paramref name="y"/> have been AND-ed.</returns>        
        </member>
        <member name="M:Kingo.EnumOperators`1.And(`0,`0,`0[])">
            <summary>
            Performs a binary AND-operation on the specified Enum types.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <param name="values">A collection of Enum values.</param>
            <returns>A value where the bits of the specified <paramref name="values"/> have been AND-ed.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EnumOperators`1.And(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Performs a binary AND-operation on the specified Enum types.
            </summary>        
            <param name="values">A collection of Enum values.</param>
            <returns>A value where the bits of the specified <paramref name="values"/> have been AND-ed.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Equatable">
            <summary>
            Contains some helper methods for types implementing the <see cref="T:System.IEquatable`1" /> interface.
            </summary>
        </member>
        <member name="M:Kingo.Equatable.Equals``1(``0,``0)">
            <summary>
            Determines whether <paramref name="left"/> is equal to <paramref name="right"/>.
            </summary>
            <typeparam name="T">Type of the instances to compare.</typeparam>
            <param name="left">First instance.</param>
            <param name="right">Second instance.</param>
            <returns><c>true</c> if both instances are equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Kingo.EventHandlerExtensions">
            <summary>
            Contains extension-methods for raising events.
            </summary>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.Raise(System.EventHandler,System.Object)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using empty arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sender"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using the specified arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The arguments of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sender"/> or <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using the specified arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The arguments of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sender"/> or <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.Raise``2(``0,System.Object,``1)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using the specified arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The arguments of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sender"/> or <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.RaiseStatic(System.EventHandler)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using empty arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.RaiseStatic(System.EventHandler,System.EventArgs)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using the specified arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>        
            <param name="e">The arguments of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.RaiseStatic``1(System.EventHandler{``0},``0)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using the specified arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>        
            <param name="e">The arguments of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.RaiseStatic``1(System.Delegate,``0)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using the specified arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>        
            <param name="e">The arguments of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.ExceptionExtensions">
            <summary>
            Contains extenion methods for the <see cref="T:System.Exception" /> class.
            </summary>
        </member>
        <member name="M:Kingo.ExceptionExtensions.Rethrow(System.Exception)">
            <summary>
            Rethrows the specified <paramref name="exception"/> without losing its stacktrace.
            </summary>
            <param name="exception">The exception to rethrow.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exception"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.AttributeProvider_AmbiguousAttributeMatch">
            <summary>
              Looks up a localized string similar to Cannot obtain single attribute of type &apos;{0}&apos; declared on &apos;{1}&apos; because multiple attributes are of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.Comparable_IncomparableType">
            <summary>
              Looks up a localized string similar to The specified object of type &apos;{0}&apos; cannot be compared to instance of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.Constraint_UnsupportedType">
            <summary>
              Looks up a localized string similar to Value of type &apos;{0}&apos; could not be validated because the constraint expects an instance of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.Context_IllegalScopeStarted">
            <summary>
              Looks up a localized string similar to Cannot start this scope because a more restrive scope is still active..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.DataContractExtensions_CircularReference">
            <summary>
              Looks up a localized string similar to Updating instance of type &apos;{0}&apos; to its latest version failed: version of type &apos;{1}&apos; introduced a circular update by returning an instance of type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.DataContractExtensions_InvalidCast">
            <summary>
              Looks up a localized string similar to Updating instance of type &apos;{0}&apos; to its latest version failed: could not convert latest version of type &apos;{1}&apos; to instance of type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.DateTimeSpan_InvalidTimeSpan">
            <summary>
              Looks up a localized string similar to Invalid time span specified: [{0}, {1}]..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.DateTimeSpan_TimeSpanZeroNotAllowed">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not allowed to be zero..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.EndpointAttribute_InvalidMessageKindSpecified">
            <summary>
              Looks up a localized string similar to Invalid MessageKind ({0}) specified. Endpoints only support commands and events..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.HostedEndpoint_EndpointAlreadyStarted">
            <summary>
              Looks up a localized string similar to Cannot start endpoint &apos;{0}&apos; because it has already been started. .
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MessageHandlerClass_CouldNotResolveMessageHandler">
            <summary>
              Looks up a localized string similar to Could not resolve message handler of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MessageHandlerOrQueryInterface_InterfaceMethodNotFound">
            <summary>
              Looks up a localized string similar to Could not find implementation of method &apos;{0}.{1}(...)&apos; on type &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MicroProcessorBuilder_InvalidProcessorType">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; cannot be used as a MicroProcessor. Please provider a non-abstract, non-generic MicroProcessor-type..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MicroProcessorComponent_TypeNotSupported">
            <summary>
              Looks up a localized string similar to Cannot use instance of type &apos;{0}&apos; as a MicroProcessorComponent. Only non-abstract classes without generic parameters are supported..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.ReadOnlyList_IndexOutOfRange">
            <summary>
              Looks up a localized string similar to There is no element at index &apos;{0}&apos; (Count = {1})..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.Scope_IncorrectNesting">
            <summary>
              Looks up a localized string similar to The scopes were not nested correctly..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.ServiceCollectionExtensions_InvalidComponentLifetime">
            <summary>
              Looks up a localized string similar to Component of type &apos;{0}&apos; could not be added because it is configured with an invalid lifetime ({1})..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.UnitOfWork_EnlistmentTimeout">
            <summary>
              Looks up a localized string similar to The operation to enlist to the current unit of work (as a result of modification of aggregate of type &apos;{0}&apos;), was aborted because execution time exceeded the specified timeout ({1})..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.UnitOfWork_InvalidMode">
            <summary>
              Looks up a localized string similar to The specified mode is invalid: {0}..
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.AsyncMethodOperation`1">
            <summary>
            Represents an <see cref="T:Kingo.MicroServices.IAsyncMethodOperation" /> that can be executed inside a <see cref="T:Kingo.MicroServices.MicroProcessor"/> pipeline.
            </summary>
            <typeparam name="TResult">Type of the result of the operation.</typeparam>
        </member>
        <member name="P:Kingo.MicroServices.AsyncMethodOperation`1.Method">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.AsyncMethodOperation`1.Message">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.AsyncMethodOperation`1.Context">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.AsyncMethodOperation`1.Token">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.AsyncMethodOperation`1.Type">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.AsyncMethodOperation`1.Kind">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.AsyncMethodOperation`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.AsyncMethodOperation`1.ExecuteAsync">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.BadRequestException">
            <summary>
            This exception is thrown by a <see cref="T:Kingo.MicroServices.IMicroProcessor" /> when a command or query failed to execute because it was
            invalid or because the operation was illegal. This type semantically maps to HTTP response code <c>400</c>.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.BadRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.BadRequestException" /> class.
            </summary>        
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>        
        </member>
        <member name="M:Kingo.MicroServices.BadRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.BadRequestException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Kingo.MicroServices.BadRequestException.ErrorCode">
            <summary>
            Returns a value between <c>400</c> and <c>499</c>.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.BusinessRuleException">
            <summary>
            This type of exception is thrown when an attempted operation is not allowed by the application logic.
            </summary>    
        </member>
        <member name="M:Kingo.MicroServices.BusinessRuleException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.BusinessRuleException" /> class.
            </summary>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of the exception.</param>
        </member>
        <member name="M:Kingo.MicroServices.BusinessRuleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.BusinessRuleException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Kingo.MicroServices.BusinessRuleException.AsBadRequestException(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.ConflictException">
            <summary>
            This exception is thrown by a <see cref="T:Kingo.MicroServices.IMicroProcessor" /> when a command or query failed because a concurreny
            exception occurred while saving all changes. This type semantically maps to HTTP response code <c>409</c> (conflict).
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.ConflictException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.ConflictException" /> class.
            </summary>        
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>        
        </member>
        <member name="M:Kingo.MicroServices.ConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.ConflictException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Kingo.MicroServices.ConflictException.ErrorCode">
            <summary>
            Returns <c>409</c>.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.AndConstraint.And(Kingo.MicroServices.Contracts.IConstraint)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.Contracts.ChildMemberAttribute">
            <summary>
            This attribute can be used to decorate fields or properties of a <see cref="T:Kingo.MicroServices.Contracts.ValidatableObject" />
            to signal that it represents an item, collection or dictionary that should be validated in
            and of itself. Any validation-errors of the child-member will be added to the set of validation-errors
            of the parent.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.ChildMemberAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.Contracts.ChildMemberAttribute" /> class.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Contracts.ChildMemberAttribute.ErrorMessage">
            <summary>
            If specified, defines the error-message that is added to the collection of validation-results
            if any child-members are invalid. This property cannot be used in combination with the
            <see cref="P:Kingo.MicroServices.Contracts.ChildMemberAttribute.ErrorMessageResourceType"/> and <see cref="P:Kingo.MicroServices.Contracts.ChildMemberAttribute.ErrorMessageResourceName"/> properties.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Contracts.ChildMemberAttribute.ErrorMessageResourceType">
            <summary>
            If specified, defines the resource-type where the localized error-message can be retrieved
            that is added to the collection of validation-results if any child-members are invalid.
            This property should be used in combination with the <see cref="P:Kingo.MicroServices.Contracts.ChildMemberAttribute.ErrorMessageResourceName"/>-property.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Contracts.ChildMemberAttribute.ErrorMessageResourceName">
            <summary>
            If specified, defines the resource-name of the localized error-message inside the resource-type
            that is added to the collection of validation-results if any child-members are invalid.
            This property should be used in combination with the <see cref="P:Kingo.MicroServices.Contracts.ChildMemberAttribute.ErrorMessageResourceType"/>-property.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.Contracts.Constraint">
            <summary>
            Serves as a base-class implementation of the <see cref="T:Kingo.MicroServices.Contracts.IConstraint"/> interface.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.Constraint.And(Kingo.MicroServices.Contracts.IConstraint)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Contracts.Constraint.Or(Kingo.MicroServices.Contracts.IConstraint)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Contracts.Constraint.All(Kingo.MicroServices.Contracts.IConstraint[])">
            <summary>
            Creates and returns a new constraint that checks if all specified <paramref name="constraints"/>
            are satisfied by a specific value.
            </summary>
            <param name="constraints">The constraints to check.</param>
            <returns>A new constraint that represents a logical AND-operation for all specified <paramref name="constraints"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraints"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.Constraint.All(System.Collections.Generic.IEnumerable{Kingo.MicroServices.Contracts.IConstraint})">
            <summary>
            Creates and returns a new constraint that checks if all specified <paramref name="constraints"/>
            are satisfied by a specific value.
            </summary>
            <param name="constraints">The constraints to check.</param>
            <returns>A new constraint that represents a logical AND-operation for all specified <paramref name="constraints"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraints"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.Constraint.Any(Kingo.MicroServices.Contracts.IConstraint[])">
            <summary>
            Creates and returns a new constraint that checks if any of the specified <paramref name="constraints"/>
            are satisfied by a specific value.
            </summary>
            <param name="constraints">The constraints to check.</param>
            <returns>A new constraint that represents a logical OR-operation for all specified <paramref name="constraints"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraints"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.Constraint.Any(System.Collections.Generic.IEnumerable{Kingo.MicroServices.Contracts.IConstraint})">
            <summary>
            Creates and returns a new constraint that checks if any of the specified <paramref name="constraints"/>
            are satisfied by a specific value.
            </summary>
            <param name="constraints">The constraints to check.</param>
            <returns>A new constraint that represents a logical OR-operation for all specified <paramref name="constraints"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraints"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.Constraint.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Contracts.Constraint.IsAlwaysValid``1">
            <summary>
            Returns a new constraint that declares any value as valid (with the exception
            of <c>null</c>-values and instances that are not an instance of <typeparamref name="TValue"/>).
            </summary>
            <typeparam name="TValue">Type of value to check.</typeparam>
            <returns>
            A constraint that is satisfied with any compatible value.
            </returns>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.Constraint.IsNeverValid``1(System.String)">
            <summary>
            Returns a new constraint that declares any value as invalid.
            </summary>
            <typeparam name="TValue">Type of value to check.</typeparam>
            <param name="errorMessageFormat">
            The error message that will be returned in formatted form when the constraint's
            <see cref="M:Kingo.MicroServices.Contracts.IConstraint.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)"/> method is called.
            If not specified, a default error message is used.
            </param>
            <returns>
            A constraint that is always returns a validation error.
            </returns>
        </member>
        <member name="T:Kingo.MicroServices.Contracts.Constraint`1">
            <summary>
            Serves as a base-class for all constraints that support validation of a specific type.
            </summary>
            <typeparam name="TValue">The supported type.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.Constraint`1.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Contracts.Constraint`1.IsValid(`0,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the specified <paramref name="value"/> and returns the result.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">Context of the value to validate.</param>
            <returns>
            <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success"/> if <paramref name="value"/> is valid; otherwise
            it will return a result with the appropriate error message.
            </returns>
        </member>
        <member name="T:Kingo.MicroServices.Contracts.ConstraintExtensions">
            <summary>
            Contains extension methods for <see cref="T:Kingo.MicroServices.Contracts.IConstraint"/> instances.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.ConstraintExtensions.And``1(Kingo.MicroServices.Contracts.IConstraint,System.Func{``0,System.ComponentModel.DataAnnotations.ValidationContext,System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Creates and returns a new constraints that checks if a value satisfies
            both this constraint and the specified <paramref name="constraint"/>.
            </summary>
            <param name="thisConstraint">First constraint to check.</param>
            <param name="constraint">Second constraint to check.</param>
            <returns>
            A new constraint that represents the logical AND between this and the specified <paramref name="constraint"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.ConstraintExtensions.Or``1(Kingo.MicroServices.Contracts.IConstraint,System.Func{``0,System.ComponentModel.DataAnnotations.ValidationContext,System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Creates and returns a new constraints that checks if a value satisfies
            either this constraint or the specified <paramref name="constraint"/>.
            </summary>
            <param name="thisConstraint">First constraint to check.</param>
            <param name="constraint">Second constraint to check.</param>
            <returns>
            A new constraint that represents the logical OR between this and the specified <paramref name="constraint"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.ConstraintExtensions.IsNotValid(Kingo.MicroServices.Contracts.IConstraint,System.Object,System.ComponentModel.DataAnnotations.ValidationResult@)">
            <summary>
            Validates the specified <paramref name="value"/> and returns whether or not the value was invalid.
            </summary>
            <param name="thisConstraint">The constraint to check.</param>
            <param name="value">The value to validate.</param>        
            <param name="result">
            <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success"/> if <paramref name="value"/> is valid; otherwise
            it will be a result with the appropriate error message.
            </param>
            <returns>
            <c>true</c> if the value was not valid; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.ConstraintExtensions.IsNotValid(Kingo.MicroServices.Contracts.IConstraint,System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.ComponentModel.DataAnnotations.ValidationResult@)">
            <summary>
            Validates the specified <paramref name="value"/> and returns whether or not the value was invalid.
            </summary>
            <param name="thisConstraint">The constraint to check.</param>
            <param name="value">The value to validate.</param>
            <param name="validationContext">Context of the value that is being validated.</param>
            <param name="result">
            <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success"/> if <paramref name="value"/> is valid; otherwise
            it will be a result with the appropriate error message.
            </param>
            <returns>
            <c>true</c> if the value was not valid; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.ConstraintExtensions.IsValid(Kingo.MicroServices.Contracts.IConstraint,System.Object)">
            <summary>
            Validates the specified <paramref name="value"/> and returns the validation-result.        
            </summary>
            <param name="thisConstraint">The constraint to check.</param>
            <param name="value">The value to validate.</param>        
            <returns>
            <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success"/> if <paramref name="value"/> is valid; otherwise
            it will return a result with the appropriate error message.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is not an instance of the expected type.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.Contracts.DataContract">
            <summary>
            Provides a base-implementation of the <see cref="T:Kingo.MicroServices.Contracts.IDataContract"/> interface.
            </summary>    
        </member>
        <member name="M:Kingo.MicroServices.Contracts.DataContract.TryUpdateToNextVersion(Kingo.MicroServices.Contracts.IDataContract@)">
            <summary>
            Attempts to update this data contract to the next version. By default, this
            method returns <c>false</c>.
            </summary>
            <param name="nextVersion">
            If this method returns <c>true</c>, this parameter will refer to the next version;
            otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if a next version exists and was assigned to <paramref name="nextVersion"/>;
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:Kingo.MicroServices.Contracts.DataContractExtensions">
            <summary>
            Contains extension methods for objects that implement the <see cref="T:Kingo.MicroServices.Contracts.IDataContract" /> interface.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.DataContractExtensions.UpdateToLatestVersion``1(Kingo.MicroServices.Contracts.IDataContract)">
            <summary>
            Updates the specified <paramref name="dataContract"/> to the latest available version and casts
            the result to an instance of <typeparamref name="TDataContract"/>.
            </summary>
            <typeparam name="TDataContract">Expected type of the latest version.</typeparam>
            <param name="dataContract">The contract to update.</param>
            <returns>The latest available version.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dataContract"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.DataContractExtensions.UpdateToLatestVersion(Kingo.MicroServices.Contracts.IDataContract)">
            <summary>
            Updates the specified <paramref name="dataContract"/> to the latest available version.
            </summary>
            <param name="dataContract">The contract to update.</param>
            <returns>The latest available version.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dataContract"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.Contracts.DataContractUpdateFailedException">
            <summary>
            This exception is thrown when an attempt to update a <see cref="T:Kingo.MicroServices.Contracts.IDataContract"/> to its latest
            version fails for some reason.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.DataContractUpdateFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.Contracts.DataContractUpdateFailedException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.DataContractUpdateFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.Contracts.DataContractUpdateFailedException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The cause of this exception.</param>
        </member>
        <member name="T:Kingo.MicroServices.Contracts.DelegateConstraint`1">
            <summary>
            Represents a constraint that is implemented through a delegate.
            </summary>
            <typeparam name="TValue">Type of value that can be validated by this constraint.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.DelegateConstraint`1.#ctor(System.Func{`0,System.ComponentModel.DataAnnotations.ValidationContext,System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.Contracts.DelegateConstraint`1" /> class.
            </summary>
            <param name="constraint">
            Delegate that implements the validation logic.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.DelegateConstraint`1.IsValid(`0,System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.Contracts.ErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Contracts.ErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Contracts.ErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Contracts.ErrorMessages.Constraint_ValueNotValid">
            <summary>
              Looks up a localized string similar to The specified value ({0}) is not valid..
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Contracts.ErrorMessages.OrConstraint_ValueNotValid">
            <summary>
              Looks up a localized string similar to The specified value ({0}) should satisfy any of the following constraints: [{1}]..
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.Contracts.IConstraint">
            <summary>
            Represents a constraint that can be used to validate a specific value.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.IConstraint.And(Kingo.MicroServices.Contracts.IConstraint)">
            <summary>
            Creates and returns a new constraints that checks if a value satisfies
            both this constraint and the specified <paramref name="constraint"/>.
            </summary>
            <param name="constraint">Another constraint.</param>
            <returns>
            A new constraint that represents the logical AND between this and the specified <paramref name="constraint"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.IConstraint.Or(Kingo.MicroServices.Contracts.IConstraint)">
            <summary>
            Creates and returns a new constraints that checks if a value satisfies
            either this constraint or the specified <paramref name="constraint"/>.
            </summary>
            <param name="constraint">Another constraint.</param>
            <returns>
            A new constraint that represents the logical OR between this and the specified <paramref name="constraint"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.IConstraint.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the specified <paramref name="value"/> and returns the validation-result.        
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">Context of the value that is being validated.</param>
            <returns>
            <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success"/> if <paramref name="value"/> is valid; otherwise
            it will return a result with the appropriate error message.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> or <paramref name="validationContext"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is not an instance of the expected type.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.Contracts.IDataContract">
            <summary>
            When implemented by a class, represents a data transfer object.
            </summary>    
        </member>
        <member name="M:Kingo.MicroServices.Contracts.IDataContract.TryUpdateToNextVersion(Kingo.MicroServices.Contracts.IDataContract@)">
            <summary>
            Attempts to update this data contract to the next version.
            </summary>
            <param name="nextVersion">
            If this method returns <c>true</c>, this parameter will refer to the next version;
            otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if a next version exists and was assigned to <paramref name="nextVersion"/>;
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:Kingo.MicroServices.Contracts.IOrConstraint">
            <summary>
            When implemented by a class, represents a composite constraint that represents a logica OR
            of several other constraints.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.IOrConstraint.CombineErrors(System.Func{System.Collections.Generic.IEnumerable{System.String},System.Object,System.String})">
            <summary>
            Instructs the constraint to combine the error messages of all failed child-constraints
            into one single error message with the specified <paramref name="mergeFunction"/>.
            </summary>
            <param name="mergeFunction">
            The function that will be used by this constraint to merge all error messages of the child-
            constraints into a single error message. The function also receives the value that was
            validated by the constraint.
            </param>
            <returns>The new constraint.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="mergeFunction"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.Contracts.ObjectExtensions">
            <summary>
            Contains extension-methods for every object.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.ObjectExtensions.IsNotValid(System.Object,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult}@,System.IServiceProvider)">
            <summary>
            Determines whether or not the specified <paramref name="instance"/> is valid, and provides all validation errors
            if it's not.
            </summary>
            <param name="instance">The message to validate.</param>
            <param name="results">
            If this instance is not valid, this collection will contain all validation-errors; will be <c>null</c> otherwise.
            </param>
            <param name="serviceProvider">
            Optional service provider that can be used to obtain services for validating this instance.
            </param>        
            <returns><c>true</c> if the instance is not valid; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="instance"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.OrConstraint.Or(Kingo.MicroServices.Contracts.IConstraint)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.Contracts.ValidatableObject">
            <summary>
            Represents a data contract that can be validated.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.ValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates all constraints that are not declared as a <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />.
            </summary>
            <param name="validationContext">The context of this validation-operation.</param>
            <returns>A collection of validation-errors.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.ValidatableObject.ValidateChildMembers(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates all the constraints of child members. 
            </summary>
            <param name="validationContext">The context of this validation-operation.</param>
            <returns>A collection of validation-errors, if any.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.ValidatableObject.NewValidationError(System.String,System.String[])">
            <summary>
            Creates and returns a new <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> with a specific error message.
            </summary>
            <param name="errorMessage">Error message describing the validation error.</param>
            <param name="memberNames">Names of the members that are considered invalid.</param>
            <returns>A new <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> that represents the validation error.</returns>
        </member>
        <member name="T:Kingo.MicroServices.Contracts.ValidationConstraintAttribute">
            <summary>
            Represents a validation-attribute that is implemented through a set of <see cref="T:Kingo.MicroServices.Contracts.IConstraint">constraints</see>.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Contracts.ValidationConstraintAttribute.Constraint">
            <summary>
            When implemented by a class, returns the constraint
            that will carry out the validation of (non-null) values.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.ValidationConstraintAttribute.All(Kingo.MicroServices.Contracts.IConstraint[])">
            <summary>
            Creates and returns a new constraint that checks if all specified <paramref name="constraints"/>
            are satisfied by a specific value.
            </summary>
            <param name="constraints">The constraints to check.</param>
            <returns>A new constraint that represents a logical AND-operation for all specified <paramref name="constraints"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraints"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.ValidationConstraintAttribute.All(System.Collections.Generic.IEnumerable{Kingo.MicroServices.Contracts.IConstraint})">
            <summary>
            Creates and returns a new constraint that checks if all specified <paramref name="constraints"/>
            are satisfied by a specific value.
            </summary>
            <param name="constraints">The constraints to check.</param>
            <returns>A new constraint that represents a logical AND-operation for all specified <paramref name="constraints"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraints"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.ValidationConstraintAttribute.Any(Kingo.MicroServices.Contracts.IConstraint[])">
            <summary>
            Creates and returns a new constraint that checks if any of the specified <paramref name="constraints"/>
            are satisfied by a specific value.
            </summary>
            <param name="constraints">The constraints to check.</param>
            <returns>A new constraint that represents a logical OR-operation for all specified <paramref name="constraints"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraints"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.ValidationConstraintAttribute.Any(System.Collections.Generic.IEnumerable{Kingo.MicroServices.Contracts.IConstraint})">
            <summary>
            Creates and returns a new constraint that checks if any of the specified <paramref name="constraints"/>
            are satisfied by a specific value.
            </summary>
            <param name="constraints">The constraints to check.</param>
            <returns>A new constraint that represents a logical OR-operation for all specified <paramref name="constraints"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraints"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Contracts.ValidationConstraintAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the specified <paramref name="value"/> and returns the validation-result.
            This <paramref name="value"/> is <c>null</c> and
            if so, whether that value can be accepted. Otherwise, it will invoke the
            constraint of this attribute.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">Context of the value that is being validated.</param>
            <returns>
            <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success"/> if <paramref name="value"/> is <c>null</c> or if it is valid;
            otherwise it will return a result with the appropriate error message.
            </returns>
        </member>
        <member name="T:Kingo.MicroServices.EndpointAttribute">
            <summary>
            When applied to the <see cref="M:Kingo.MicroServices.IMessageHandler`1.HandleAsync(`0,Kingo.MicroServices.MessageHandlerOperationContext)"/> method implementation
            of a message handler, indicates that that method serves as an endpoint and will be returned as such
            by the microprocessor's <see cref="M:Kingo.MicroServices.IMicroProcessor.CreateMethodEndpoints"/> method.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.EndpointAttribute.#ctor(Kingo.MicroServices.MessageKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.EndpointAttribute" /> class.
            </summary>
            <param name="messageKind">Specifies the message kind of the message that is handled by this endpoint.</param>
        </member>
        <member name="P:Kingo.MicroServices.EndpointAttribute.MessageKind">
            <summary>
            Specifies the message kind of the message that is handled by this endpoint
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.Endpoints.HostedEndpoint">
            <summary>
            When implemented, represents an endpoint that will connect to its resource upon start and
            disconnect upon stop.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.HostedEndpoint.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.HostedEndpoint.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.HostedEndpoint.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.HostedEndpoint.ConnectAsync(System.Threading.CancellationToken)">
            <summary>
            Connects this endpoint to its resource. If <paramref name="cancellationToken"/> is signaled while
            the operation is still in progress, the operation is expected to be aborted and the endpoint
            must remain in its disconnected state.
            </summary>
            <param name="cancellationToken">Token used to signal cancellation of this operation.</param>        
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.HostedEndpoint.DisconnectAsync(System.Threading.CancellationToken)">
            <summary>
            Disconnects this endpoint from its resource. If <paramref name="cancellationToken"/> is signaled while
            the operation is still in progress, the operation is expected to be aborted immediately, and the state
            of the endpoint may be undetermined.
            </summary>
            <param name="cancellationToken">Token used to signal cancellation of this operation.</param>        
        </member>
        <member name="T:Kingo.MicroServices.Endpoints.IMicroProcessorBuilder">
            <summary>
            When implemented by a class, represents a builder that can be used to configure
            the <see cref="T:Kingo.MicroServices.IMicroProcessor" /> to use in your service.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Endpoints.IMicroProcessorBuilder.Components">
            <summary>
            Can be used to configure which message-handlers will be used by the processor.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.Endpoints.IMicroServiceBus">
            <summary>
            When implemented by a class, represents a service bus that can publish messages.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.IMicroServiceBus.PublishAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessage})">
            <summary>
            Publishes all specified <paramref name="messages" />.
            </summary>
            <param name="messages">The messages to publish.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messages"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.IMicroServiceBus.PublishAsync(Kingo.MicroServices.IMessage)">
            <summary>
            Publishes the specified <paramref name="message" />.
            </summary>
            <param name="message">The message to publish.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception> 
        </member>
        <member name="T:Kingo.MicroServices.Endpoints.MicroProcessorComponentCollection">
            <summary>
            Represents the collection of components that a <see cref="T:Kingo.MicroServices.MicroProcessor" /> uses to handle
            messages, execute queries and publish events.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroProcessorComponentCollection.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroProcessorComponentCollection.AddToSearchSet``1">
            <summary>
            Adds a type to the searchable type-set.
            </summary>
            <typeparam name="TComponent">Type to add.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroProcessorComponentCollection.AddToSearchSet(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Adds all types defined in the assemblies that match the specified search criteria to the
            searchable type-set.
            </summary>
            <param name="searchPattern">The pattern that is used to match specified files/assemblies.</param>
            <param name="path">A path pointing to a specific directory. If <c>null</c>, the <see cref="P:Kingo.Reflection.TypeSet.CurrentDirectory"/> is used.</param>
            <param name="searchOption">
            Indicates whether or not only the top-level directory is to be searched.        
            </param>
            <returns>A new set containing all types from the specified assemblies.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="searchPattern"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.IOException">
            An error occurred while reading files from the specified location(s).
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission to access the specified path or its files.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroProcessorComponentCollection.AddToSearchSet(System.Type[])">
            <summary>
            Adds the specified <paramref name="types"/> to the searchable type-set.
            </summary>
            <param name="types">The types to add.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="types"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroProcessorComponentCollection.AddToSearchSet(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Adds the specified <paramref name="types"/> to the searchable type-set.
            </summary>
            <param name="types">The types to add.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="types"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroProcessorComponentCollection.AddMessageHandlers">
            <summary>
            Automatically registers all message handlers that are found in the types that were added to this collection,
            which are types that implement the <see cref="T:Kingo.MicroServices.IMessageHandler`1"/> interface.
            </summary>                
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroProcessorComponentCollection.AddMessageHandler``1">
            <summary>
            Adds the specified <typeparamref name="TMessageHandler"/> as a message handler for the processor, if and only if
            this type represents a message handler.
            </summary>
            <typeparam name="TMessageHandler">Type of the message handler to add.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroProcessorComponentCollection.AddMessageHandler(System.Type)">
            <summary>
            Adds the specified <paramref name="type"/> as a message handler for the processor, if and only if
            this type represents a message handler.
            </summary>
            <param name="type">The type to add as a message handler.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroProcessorComponentCollection.AddMessageHandler(System.Object)">
            <summary>
            Adds the specified <paramref name="messageHandler"/> as a singleton instance for every <see cref="T:Kingo.MicroServices.IMessageHandler`1"/>
            implementation it has. If <paramref name="messageHandler"/> does not implement this interface, it is simply ignored.
            </summary>
            <param name="messageHandler">The handler to register.</param>        
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroProcessorComponentCollection.AddMessageHandler``1(System.Action{``0,Kingo.MicroServices.MessageHandlerOperationContext})">
            <summary>
            Adds the specified <paramref name="messageHandler" /> as a singleton instance. NB: this message handler will only
            receive internal messages (events).
            </summary>
            <typeparam name="TMessage">Type of the message that is handled by the specified <paramref name="messageHandler"/>.</typeparam>
            <param name="messageHandler">The handler to register.</param>        
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroProcessorComponentCollection.AddMessageHandler``1(System.Func{``0,Kingo.MicroServices.MessageHandlerOperationContext,System.Threading.Tasks.Task})">
            <summary>
            Adds the specified <paramref name="messageHandler" /> as a singleton instance.
            </summary>
            <typeparam name="TMessage">Type of the message that is handled by the specified <paramref name="messageHandler"/>.</typeparam>
            <param name="messageHandler">The handler to register.</param>        
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroProcessorComponentCollection.AddQueries">
            <summary>
            Automatically registers all queries that are found in the types that were added to this collection, which
            are types that implement the <see cref="T:Kingo.MicroServices.IQuery`1"/> or <see cref="T:Kingo.MicroServices.IQuery`2"/>
            interface.
            </summary>        
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroProcessorComponentCollection.AddQuery``1">
            <summary>
            Adds <typeparamref name="TQuery"/> as a query, if and only if it is a valid component
            that implements the <see cref="T:Kingo.MicroServices.IQuery`1"/> or <see cref="T:Kingo.MicroServices.IQuery`2"/> interface.
            </summary>
            <typeparam name="TQuery">Type of the query to add.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroProcessorComponentCollection.AddQuery(System.Type)">
            <summary>
            Adds the specified <paramref name="type"/> as a query, if and only if the specified type is a valid component
            that implements the <see cref="T:Kingo.MicroServices.IQuery`1"/> or <see cref="T:Kingo.MicroServices.IQuery`2"/> interface.
            </summary>
            <param name="type">The type to add as a query.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroProcessorComponentCollection.AddMicroServiceBusControllers">
            <summary>
            Automatically registers all types that are a <see cref="T:Kingo.MicroServices.Endpoints.MicroServiceBusController" />. Each controller
            will also be registered as a <see cref="T:Microsoft.Extensions.Hosting.IHostedService"/> that will be
            started and stopped automatically.
            </summary>        
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroProcessorComponentCollection.AddMicroServiceBusController``1">
            <summary>
            Adds <typeparamref name="TController"/> as a <see cref="T:Kingo.MicroServices.Endpoints.MicroServiceBusController"/>. If
            <typeparamref name="TController"/> implements <see cref="T:Microsoft.Extensions.Hosting.IHostedService"/>,
            it is also registered as a hosted service that will be started and stopped automatically.
            </summary>
            <typeparam name="TController">The type to register as a controller.</typeparam> 
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroProcessorComponentCollection.AddMicroServiceBusController(System.Type)">
            <summary>
            Adds the specified <paramref name="type"/> as a <see cref="T:Kingo.MicroServices.Endpoints.MicroServiceBusController"/> if and only if
            the specified <paramref name="type"/> actually is a <see cref="T:Kingo.MicroServices.Endpoints.MicroServiceBusController"/>. If <paramref name="type"/>
            implements <see cref="T:Microsoft.Extensions.Hosting.IHostedService"/>, it is also registered
            as a hosted service that will be started and stopped automatically.
            </summary>
            <param name="type">The type to register as a controller.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroProcessorComponentCollection.AddMicroServiceBuses">
            <summary>
            Automatically registers all types that implement the <see cref="T:Kingo.MicroServices.Endpoints.IMicroServiceBus" /> interface as
            a service bus endpoint. Any type that also implements <see cref="T:Microsoft.Extensions.Hosting.IHostedService"/>
            is also registered as a hosted service that will be started and stopped automatically.
            </summary>        
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroProcessorComponentCollection.AddMicroServiceBus``1">
            <summary>
            Adds the specified <typeparamref name="TMicroServiceBus"/> as a <see cref="T:Kingo.MicroServices.Endpoints.IMicroServiceBus" />.
            If <typeparamref name="TMicroServiceBus"/> implements <see cref="T:Microsoft.Extensions.Hosting.IHostedService"/>,
            it is also registered as a hosted service that will be started and stopped automatically.
            </summary>
            <typeparam name="TMicroServiceBus">Type of a service bus.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroProcessorComponentCollection.AddMicroServiceBus(System.Type)">
            <summary>
            Adds the specified <paramref name="type"/> as a <see cref="T:Kingo.MicroServices.Endpoints.IMicroServiceBus" /> instance, if
            and only if this type implements the <see cref="T:Kingo.MicroServices.Endpoints.IMicroServiceBus"/> interface. If <paramref name="type"/>
            also implements <see cref="T:Microsoft.Extensions.Hosting.IHostedService"/>, it is also registered
            as a hosted service that will be started and stopped automatically.
            </summary>
            <param name="type">The type to register as a service bus.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroProcessorComponentCollection.AddComponents(System.Func{Kingo.MicroServices.MicroProcessorComponent,Kingo.MicroServices.MicroProcessorComponent})">
            <summary>
            Adds a number of components by looking through the search set and selecting/adding a
            sub-set of these components to this collection.
            </summary>
            <param name="componentFactory">
            Delegate that is used to filter and/or create the component to add. If the delegate returns <c>null</c>,
            that component is ignored (filtered out). Otherwise, the returned component (which can be a different
            component from the one that is passed into the delegate) is added to this collection.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="componentFactory"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroProcessorComponentCollection.AddComponent(System.Type,System.Func{Kingo.MicroServices.MicroProcessorComponent,Kingo.MicroServices.MicroProcessorComponent})">
            <summary>
            Adds the specified <paramref name="type"/> as a component if and only if the specified <paramref name="componentFactory"/>
            returns a component to add. Note that <paramref name="componentFactory"/> is only invoked if the specified
            <paramref name="type"/> is a valid component.
            </summary>
            <param name="type">Type to add as a component.</param>
            <param name="componentFactory">
            Delegate that is used to filter and/or create the component to add. If the delegate returns <c>null</c>,
            that component is ignored (filtered out). Otherwise, the returned component (which can be a different
            component from the one that is passed into the delegate) is added to this collection.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> or <paramref name="componentFactory"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.Endpoints.MicroServiceBus">
            <summary>
            Provides a base implementation of the <see cref="T:Kingo.MicroServices.Endpoints.IMicroServiceBus" /> interface.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroServiceBus.PublishAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessage})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroServiceBus.PublishAsync(Kingo.MicroServices.IMessage)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.Endpoints.MicroServiceBus`1">
            <summary>
            When implemented, represents and endpoint that connects to a service bus to send specific messages.
            </summary>
            <typeparam name="TSerializedMessage">Type of the messages that are sent to the service bus.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroServiceBus`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.Endpoints.MicroServiceBus`1" /> class.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroServiceBus`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroServiceBus`1.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroServiceBus`1.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroServiceBus`1.ConnectAsync(System.Threading.CancellationToken)">
            <summary>
            Connects this endpoint to its resource. If <paramref name="cancellationToken"/> is signaled while
            the operation is still in progress, the operation is expected to be aborted and the endpoint
            must remain in its disconnected state.
            </summary>
            <param name="cancellationToken">Token used to signal cancellation of this operation.</param>        
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroServiceBus`1.DisconnectAsync(System.Threading.CancellationToken)">
            <summary>
            Disconnects this endpoint from its resource. If <paramref name="cancellationToken"/> is signaled while
            the operation is still in progress, the operation is expected to be aborted immediately, and the state
            of the endpoint may be undetermined.
            </summary>
            <param name="cancellationToken">Token used to signal cancellation of this operation.</param>        
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroServiceBus`1.PublishAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessage})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroServiceBus`1.PublishAsync(Kingo.MicroServices.IMessage)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroServiceBus`1.PublishAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Publishes all specified <paramref name="messages"/>.
            </summary>
            <param name="messages">The messages to publish.</param>        
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroServiceBus`1.PublishAsync(`0)">
            <summary>
            Publishes the specified <paramref name="message" />.
            </summary>
            <param name="message">The message to publish.</param>        
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroServiceBus`1.Serialize(Kingo.MicroServices.IMessage)">
            <summary>
            Serializes the specified <paramref name="message"/>.
            </summary>
            <param name="message">The message to serialize.</param>
            <returns>The serialized version of the specified <paramref name="message"/>.</returns>       
        </member>
        <member name="T:Kingo.MicroServices.Endpoints.MicroServiceBusController">
            <summary>
            When implemented, represents a controller that receives messages from a service-bus
            and dispatches those messages to a <see cref="T:Kingo.MicroServices.IMicroProcessor" /> for further
            processing.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroServiceBusController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.Endpoints.MicroServiceBusController" /> class.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Endpoints.MicroServiceBusController.Processor">
            <summary>
            Returns the processor that will process all the messages.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroServiceBusController.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroServiceBusController.ConnectAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroServiceBusController.DisconnectAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroServiceBusController.CreateHostedEndpoint(Kingo.MicroServices.HandleAsyncMethodEndpoint)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.MicroServices.Endpoints.HostedEndpoint"/> for the specified <paramref name="methodEndpoint"/>.
            </summary>
            <param name="methodEndpoint">A specific endpoint that is capable of processing messages of a specific type.</param>        
            <returns>A new <see cref="T:Kingo.MicroServices.Endpoints.HostedEndpoint"/>.</returns>
        </member>
        <member name="T:Kingo.MicroServices.Endpoints.MicroServiceBusEndpoint`1">
            <summary>
            When implemented, represents and endpoint that connects to a service bus to receive and process specific
            messages.
            </summary>
            <typeparam name="TSerializedMessage">Type of the messages that are received from the service bus.</typeparam>
        </member>
        <member name="P:Kingo.MicroServices.Endpoints.MicroServiceBusEndpoint`1.MethodEndpoint">
            <summary>
            The message handler that will handle all incoming messages.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Endpoints.MicroServiceBusEndpoint`1.ServiceBus">
            <summary>
            The outbound endpoint that will publish all events that are produced while handling the incoming
            messages.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroServiceBusEndpoint`1.HandleAsync(`0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Handles the received <paramref name="message" /> by deserializing it, processing it
            with the associated <see cref="P:Kingo.MicroServices.Endpoints.MicroServiceBusEndpoint`1.MethodEndpoint" /> and publishing the resulting events.
            </summary>
            <param name="message">The message that was received.</param>
            <param name="token">Optional token that may signal the cancellation of the operation.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroServiceBusEndpoint`1.HandleAsync(System.Object,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Handles the received <paramref name="message" /> and returns the result.       
            </summary>
            <param name="message">The message that was received.</param>
            <param name="token">Optional token that may signal the cancellation of the operation.</param>
            <returns>The result of the operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroServiceBusEndpoint`1.HandleResultAsync(Kingo.MicroServices.MessageHandlerOperationResult)">
            <summary>
            Handles the result that was returned by the <see cref="P:Kingo.MicroServices.Endpoints.MicroServiceBusEndpoint`1.MethodEndpoint" /> when handling a
            specific message by publishing all events.
            </summary>
            <param name="result">The result to handle.</param>        
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.MicroServiceBusEndpoint`1.Deserialize(`0)">
            <summary>
            Unpacks and deserializes the specified <paramref name="message"/> to return its contents.
            </summary>
            <param name="message">The message to unpack and deserialize.</param>
            <returns>The contents of the specified <paramref name="message"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.Endpoints.ServiceCollectionExtensions">
            <summary>
            Contains extension methods for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> instances.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.ServiceCollectionExtensions.AddMicroProcessor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Kingo.MicroServices.Endpoints.IMicroProcessorBuilder})">
            <summary>
            Configures and registers a <see cref="T:Kingo.MicroServices.MicroProcessor" /> to use in this application or service.
            </summary>        
            <param name="services">A collection of services.</param>
            <param name="processorConfiguration">
            Optional configuration callback that can be used to configure the specific parts of the processor.
            </param>
            <returns>A configured services-collection.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="services"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Endpoints.ServiceCollectionExtensions.AddMicroProcessor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Kingo.MicroServices.Endpoints.IMicroProcessorBuilder})">
            <summary>
            Configures and registers a specific type of <see cref="T:Kingo.MicroServices.IMicroProcessor" /> to use in this application or service.
            </summary>
            <typeparam name="TProcessor">Type of the processor to register.</typeparam>
            <param name="services">A collection of services.</param>
            <param name="processorConfiguration">
            Optional configuration callback that can be used to configure the specific parts of the processor.
            </param>
            <returns>A configured service collection.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="services"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.EventBus.Publish(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.EventBus.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.ExecuteAsyncMethod">
            <summary>
            When implemented, represents the <see cref="M:Kingo.MicroServices.IQuery`1.ExecuteAsync(Kingo.MicroServices.QueryOperationContext)"/> or
            <see cref="M:Kingo.MicroServices.IQuery`2.ExecuteAsync(`0,Kingo.MicroServices.QueryOperationContext)"/> method of a specific query.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.ExecuteAsyncMethod.Query">
            <summary>
            The message handler that implements this method.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.ExecuteAsyncMethod.Info">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.ExecuteAsyncMethod.TryGetAttributeOfType``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.ExecuteAsyncMethod.GetAttributesOfType``1">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.ExecuteAsyncMethod.MessageParameter">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.ExecuteAsyncMethod.ContextParameter">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.ExecuteAsyncMethodOperation`1">
            <summary>    
            Represents an operation of a <see cref="T:Kingo.MicroServices.IMicroProcessor"/> where a query ie being executed.    
            </summary>
            <typeparam name="TResponse">Type of the response of the query.</typeparam>
        </member>
        <member name="P:Kingo.MicroServices.ExecuteAsyncMethodOperation`1.Method">
            <summary>
            Returns the <see cref="M:Kingo.MicroServices.IQuery`1.ExecuteAsync(Kingo.MicroServices.QueryOperationContext)"/> or <see cref="M:Kingo.MicroServices.IQuery`2.ExecuteAsync(`0,Kingo.MicroServices.QueryOperationContext)"/>
            method that is being invoked in this operation.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.ExecuteAsyncMethodOperation`1.Context">
            <summary>
            Returns the context of this operation.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.ExecuteAsyncMethodOperation`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.ExecuteAsyncMethodOperation`1.ToAsyncMethodOperation">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.HandleAsyncMethod">
            <summary>
            Represents the <see cref="M:Kingo.MicroServices.IMessageHandler`1.HandleAsync(`0,Kingo.MicroServices.MessageHandlerOperationContext)"/> method of a specific message handler.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.HandleAsyncMethod.ToString">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.HandleAsyncMethod.MessageHandler">
            <summary>
            The message handler that implements this method.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.HandleAsyncMethod.Info">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.HandleAsyncMethod.TryGetAttributeOfType``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.HandleAsyncMethod.GetAttributesOfType``1">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.HandleAsyncMethod.MessageParameter">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.HandleAsyncMethod.ContextParameter">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.HandleAsyncMethod`1.HandleAsync(`0,Kingo.MicroServices.MessageHandlerOperationContext)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.HandleAsyncMethodEndpoint">
            <summary>
            When implemented, represent an endpoint to a specific <see cref="M:Kingo.MicroServices.IMessageHandler`1.HandleAsync(`0,Kingo.MicroServices.MessageHandlerOperationContext)"/> method
            of a message handler that is exposed as an endpoint.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.HandleAsyncMethodEndpoint.MessageKind">
            <summary>
            Returns the <see cref="P:Kingo.MicroServices.HandleAsyncMethodEndpoint.MessageKind"/> of the message that is handled by this endpoint.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.HandleAsyncMethodEndpoint.InvokeAsync(System.Object,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Invokes the method of the associated message handler with the specified <paramref name="message" />
            and returns its result.
            </summary>
            <param name="message">The message to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            If the specified <paramref name="message"/>  is not supported by this endpoint, it is ignored and an empty
            result will be returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.MicroServices.HandleAsyncMethodEndpoint.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.HandleAsyncMethodOperation">
            <summary>
            Represents an operation of a <see cref="T:Kingo.MicroServices.IMicroProcessor"/> where a message is being handled
            by a message handler.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.HandleAsyncMethodOperation.Method">
            <summary>
            Returns the <see cref="M:Kingo.MicroServices.IMessageHandler`1.HandleAsync(`0,Kingo.MicroServices.MessageHandlerOperationContext)"/> method that is being invoked
            in this operation.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.HandleAsyncMethodOperation.Context">
            <summary>
            Returns the context of this operation.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.HandleAsyncMethodOperation.Type">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.HandleAsyncMethodOperation.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.HandleAsyncMethodOperation.ToAsyncMethodOperation">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.IAsyncMethod">
            <summary>
            When implemented by a class, represents the <see cref="M:Kingo.MicroServices.IMessageHandler`1.HandleAsync(`0,Kingo.MicroServices.MessageHandlerOperationContext)"/>,
            <see cref="M:Kingo.MicroServices.IQuery`1.ExecuteAsync(Kingo.MicroServices.QueryOperationContext)"/> or <see cref="M:Kingo.MicroServices.IQuery`2.ExecuteAsync(`0,Kingo.MicroServices.QueryOperationContext)"/>
            method of a message handler or query.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IAsyncMethod.Component">
            <summary>
            Returns the message handler or query type this method has been implemented on.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IAsyncMethod.MessageParameter">
            <summary>
            Returns the parameter that represents the message to be handled. This parameter
            is <c>null</c> for methods of the <see cref="T:Kingo.MicroServices.IQuery`1"/> interface.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IAsyncMethod.ContextParameter">
            <summary>
            Returns the parameter that represents the <see cref="T:Kingo.MicroServices.MicroProcessorOperationContext" /> that is supplied to the method.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IAsyncMethodOperation">
            <summary>
            When implemented by a class, represents an operation where a specific <see cref="T:Kingo.MicroServices.IAsyncMethod"/> is being executed.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IAsyncMethodOperation.Method">
            <summary>
            Returns the method that is being executed in this operation.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IAsyncMethodOperation.Context">
            <summary>
            Returns the context of this operation.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IAsyncMethodOperation`1">
            <summary>
            When implemented by a class, represents an operation where a specific <see cref="T:Kingo.MicroServices.IAsyncMethod"/> is being executed.
            </summary>
            <typeparam name="TResult">Type of the result of the operation.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.IAsyncMethodOperation`1.ToAsyncMethodOperation">
            <summary>
            Coverts this operation to a generic <see cref="T:Kingo.MicroServices.AsyncMethodOperation`1"/>.
            </summary>
            <returns>The base operation of this operation.</returns>
        </member>
        <member name="T:Kingo.MicroServices.IAsyncMethodOperationStackTrace">
            <summary>
            When implemented by a class, represents a stack trace of operations that are currently being executed
            by a <see cref="T:Kingo.MicroServices.MicroProcessor" />.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IAsyncMethodOperationStackTrace.CurrentOperation">
            <summary>
            Returns the operation that is currently being executed.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IEventBus">
            <summary>
            When implemented by a class, represent a bus to which events can be published.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IEventBus.Publish(System.Object)">
            <summary>
            Publishes the specified <paramref name="message"/>.
            </summary>
            <param name="message">The message to publish.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.IMessage">
            <summary>
            When implemented by a class, represents a message that is being handled or executed
            by a <see cref="T:Kingo.MicroServices.IMicroProcessor" />.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMessage.Instance">
            <summary>
            Returns the message instance.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMessage`1">
            <summary>
            When implemented by a class, represents a message that is being handled or executed
            by a <see cref="T:Kingo.MicroServices.IMicroProcessor" />.
            </summary>
            <typeparam name="TMessage">Type of the message.</typeparam>
        </member>
        <member name="P:Kingo.MicroServices.IMessage`1.Instance">
            <summary>
            Returns the message instance.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMessageHandler`1">
            <summary>
            When implemented by a class, handles messages of type <paramtyperef name="TMessage" />.
            </summary>
            <typeparam name="TMessage">Type of the message to handle.</typeparam>  
        </member>
        <member name="M:Kingo.MicroServices.IMessageHandler`1.HandleAsync(`0,Kingo.MicroServices.MessageHandlerOperationContext)">
            <summary>
            Handles the specified <paramref name="message"/> asynchronously.
            </summary>
            <param name="message">A message.</param>        
            <param name="context">Context of the <see cref="T:Kingo.MicroServices.IMicroProcessor" /> that is currently handling the message.</param>
            <exception cref="T:Kingo.MicroServices.MessageHandlerOperationException">
            Something went wrong while processing the specified <paramref name="message"/>, such as
            the violation of a business rule.
            </exception> 
        </member>
        <member name="T:Kingo.MicroServices.IMessageHandlerConfiguration">
            <summary>
            When implemented by a class, contains all configuration settings for a <see cref="T:Kingo.MicroServices.IMessageHandler`1" />.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMessageHandlerConfiguration.HandlesExternalMessages">
            <summary>
            Indicates whether or not the message handler handles commands and events that are
            provided to the <see cref="T:Kingo.MicroServices.MicroProcessor" /> from external sources.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMessageHandlerConfiguration.HandlesInternalMessages">
            <summary>
            Indicates whether or not the message handler handles events in the same (logical)
            transaction as they were published in (i.e. as part of the same logical operation).
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMessageKindResolver">
            <summary>
            When implemented by a class, represents a convention for resolving the message kind based on
            the type of a message.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IMessageKindResolver.ResolveMessageKind(System.Type)">
            <summary>
            Determines whether the message of the specified <paramref name="messageType"/> is a
            <see cref="F:Kingo.MicroServices.MessageKind.Command"/> or an <see cref="F:Kingo.MicroServices.MessageKind.Event"/>.
            </summary>
            <param name="messageType">Type of a message.</param>
            <returns>
            <see cref="F:Kingo.MicroServices.MessageKind.Command"/> if the message is a command;
            <see cref="F:Kingo.MicroServices.MessageKind.Event"/> if the message is an event.
            </returns>
        </member>
        <member name="T:Kingo.MicroServices.IMessageType">
            <summary>
            When implemented by a class, represents a specific message type and kind.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMessageType.Kind">
            <summary>
            Indicates whether this message represents a command, event or request.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMicroProcessor">
            <summary>
            When implemented by a class, represents a processor that can process commands, events and queries.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessor.ServiceProvider">
            <summary>
            Returns the service provider the processor uses to resolve its dependencies.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.AssignUser(System.Security.Principal.IPrincipal)">
            <summary>
            Configures the processor to use the specified <paramref name="user"/> for each operation as long as the
            returned scope is active.
            </summary>
            <param name="user">The principal to use.</param>
            <returns>A scope that can be disposed when the principal can be reset to its previous value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="user"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.CreateMethodEndpoints">
            <summary>
            Creates and returns all endpoints that reference the methods of all registered
            message handlers that are marked by the <see cref="T:Kingo.MicroServices.EndpointAttribute" />.
            </summary>
            <returns>A collection of endpoints.</returns>
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.ExecuteCommandAsync``1(Kingo.MicroServices.IMessageHandler{``0},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes a command with a specified <paramref name="messageHandler"/>.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
            <param name="messageHandler">The message handler that will handle the command.</param>
            <param name="message">The command to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            </returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> or <paramref name="message"/> is <c>null</c>.
            </exception>       
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.HandleEventAsync``1(Kingo.MicroServices.IMessageHandler{``0},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Handles an event with a specified <paramref name="messageHandler"/>.
            </summary>
            <typeparam name="TEvent">Type of the event.</typeparam>
            <param name="messageHandler">The message handler that will handle the event.</param>
            <param name="message">The event to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            </returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> or <paramref name="message"/> is <c>null</c>.
            </exception>       
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.ExecuteQueryAsync``1(Kingo.MicroServices.IQuery{``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TResponse">Type of the message returned by the query.</typeparam>        
            <param name="query">The query to execute.</param> 
            <param name="token">Optional token that can be used to cancel the operation.</param>                        
            <returns>The result that carries the response returned by the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>         
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.ExecuteQueryAsync``2(Kingo.MicroServices.IQuery{``0,``1},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TRequest">Type of the message going into the query.</typeparam>
            <typeparam name="TResponse">Type of the message returned by the query.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="message">Message containing the parameters of this query.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>The result that carries the response returned by the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> or <paramref name="message"/> is <c>null</c>.
            </exception>         
        </member>
        <member name="T:Kingo.MicroServices.IMicroProcessorComponentConfiguration">
            <summary>
            When implemented by a class, represents the configuration for a <see cref="T:Kingo.MicroServices.MicroProcessorComponent" />.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorComponentConfiguration.Lifetime">
            <summary>
            Indicates the lifetime of the component.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorComponentConfiguration.ServiceTypes">
            <summary>
            Returns all service types for which this component is registered.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMicroProcessorOperation">
            <summary>
            When implemented by a class, represents an operation of a <see cref="T:Kingo.MicroServices.IMicroProcessor" />.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOperation.Message">
            <summary>
            Returns the message that is being handled or executed. Returns <c>null</c>
            if this operation refers to the execution of a <see cref="T:Kingo.MicroServices.IQuery`1"/>.        
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOperation.Token">
            <summary>
            Returns the token that indicates whether or not cancellation of the operation is requested.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOperation.Type">
            <summary>
            Indicates whether this operation is invoking a message handler or executing a query.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOperation.Kind">
            <summary>
            Indicates whether this operation is an internal or external operation.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMicroProcessorOperation`1">
            <summary>
            When implemented by a class, represents an operation of a <see cref="T:Kingo.MicroServices.IMicroProcessor" /> that can
            be executed.
            </summary>
            <typeparam name="TResult">Type of the result of this operation.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessorOperation`1.ExecuteAsync">
            <summary>
            Executes this operation.
            </summary>
            <returns>The result of this operation.</returns>
        </member>
        <member name="T:Kingo.MicroServices.IMicroProcessorOperationResult`1">
            <summary>
            Represents the result of a message handler or query invocation in the pipeline.
            </summary>
            <typeparam name="TValue">Type of the result.</typeparam>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOperationResult`1.Value">
            <summary>
            Obtains the value of this result.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMicroProcessorOptions">
            <summary>
            When implemented by a class, represents a set of options that can be set to configure the behavior of a <see cref="T:Kingo.MicroServices.MicroProcessor" />.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOptions.UnitOfWorkMode">
            <summary>
            Gets or sets the <see cref="P:Kingo.MicroServices.IMicroProcessorOptions.UnitOfWorkMode" />.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOptions.Endpoints">
            <summary>
            Gets the options for the endpoints.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMicroProcessorServiceProvider">
            <summary>
            When implemented by a class, represents a <see cref="T:System.IServiceProvider"/> that manages
            the dependencies of a <see cref="T:Kingo.MicroServices.IMicroProcessor"/>.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessorServiceProvider.CreateScope">
            <summary>
            Creates and returns a new <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScope"/> that manages the lifetime
            of scoped dependencies.
            </summary>
            <returns>A new <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScope"/>.</returns>
        </member>
        <member name="T:Kingo.MicroServices.InternalServerErrorException">
            <summary>
            This exception is thrown by a <see cref="T:Kingo.MicroServices.IMicroProcessor" /> when a technical failure prevented the processor from
            handling a message or executing a query correctly. This type semantically maps to HTTP response code <c>500</c>.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.InternalServerErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.InternalServerErrorException" /> class.
            </summary>        
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>        
        </member>
        <member name="M:Kingo.MicroServices.InternalServerErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.InternalServerErrorException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Kingo.MicroServices.InternalServerErrorException.ErrorCode">
            <summary>
            Returns a value between <c>500</c> and <c>599</c>.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IQuery`1">
            <summary>
            When implemented by a class, represents a query that accepts a message
            and returns a result in the form of a <typeparamref name="TResponse"/>.
            </summary>    
            <typeparam name="TResponse">Type of the message that is returned by this query.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.IQuery`1.ExecuteAsync(Kingo.MicroServices.QueryOperationContext)">
            <summary>
            Executes the query.
            </summary>   
            <param name="context">Context of the <see cref="T:Kingo.MicroServices.IMicroProcessor" /> that is currently executing the query.</param>    
            <returns>The result of this query.</returns>        
        </member>
        <member name="T:Kingo.MicroServices.IQuery`2">
            <summary>
            When implemented by a class, represents a query that accepts a message
            and returns a result in the form of a <typeparamref name="TResponse"/>.
            </summary>
            <typeparam name="TRequest">Type of the message that is consumed by this query.</typeparam>
            <typeparam name="TResponse">Type of the message that is returned by this query.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.IQuery`2.ExecuteAsync(`0,Kingo.MicroServices.QueryOperationContext)">
            <summary>
            Executes the query.
            </summary>
            <param name="message">Message containing the parameters of this query.</param>
            <param name="context">Context of the <see cref="T:Kingo.MicroServices.IMicroProcessor" /> that is currently executing the query.</param>
            <returns>The result of this query.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.IQueryProcessor">
            <summary>
            When implemented by a class, represents a processor specifically for queries.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IQueryProcessor.ExecuteQueryAsync``1(Kingo.MicroServices.IQuery{``0})">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result.
            </summary>
            <typeparam name="TResponse">Type of the response of the query.</typeparam>
            <param name="query">The query to execute.</param>
            <returns>The response of the query.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.IQueryProcessor.ExecuteQueryAsync``2(Kingo.MicroServices.IQuery{``0,``1},``0)">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result.
            </summary>
            <typeparam name="TRequest">Type of the request of the query.</typeparam>
            <typeparam name="TResponse">Type of the response of the query.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="message">Message that carries the parameters of the query.</param>
            <returns>The response of the query.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.IUnitOfWork">
            <summary>
            When implemented by a class, represents a unit of work that manages different <see cref="T:Kingo.MicroServices.IUnitOfWorkResourceManager">
            resource managers</see>.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IUnitOfWork.EnlistAsync(Kingo.MicroServices.IUnitOfWorkResourceManager)">
            <summary>
            Enlists the specified <paramref name="resourceManager"/> with this unit of work so that it can be flushed at the appropriate time.
            Note that this operation may flush the specified <paramref name="resourceManager"/> immediately.
            </summary>
            <param name="resourceManager">The resource manager to enlist.</param>        
            <exception cref="T:System.ArgumentNullException">
            <paramref name="resourceManager"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.IUnitOfWork.FlushAsync">
            <summary>
            Flushes all pending changes by signalling to all enlisted <see cref="T:Kingo.MicroServices.IUnitOfWorkResourceManager">resource managers</see>
            that they can flush or persist their changes.
            </summary>        
        </member>
        <member name="T:Kingo.MicroServices.IUnitOfWorkResourceManager">
            <summary>
            When implemented by a class, represents a unit of work that can be flushed.
            </summary>    
        </member>
        <member name="P:Kingo.MicroServices.IUnitOfWorkResourceManager.ResourceId">
            <summary>
            Identifies the resource that is managed by this resource manager, such as a database, file or blob storage.
            This value may be <c>null</c> if the resource is undefined.
            </summary>
            <remarks>
            The resource-id is used by the <see cref="T:Kingo.MicroServices.IUnitOfWork"/> to determine which managers manage specific resources, so that it
            can optimize the flush-cycle by flushing the managers of different resources in parallel thereby optimizing I/O performance.
            Those resource managers that manage the same resource (such as multiple repositories using the same database), or resource
            managers of which the resource is undefined (resource id is <c>null</c>), will be flushed sequentially.
            </remarks>
        </member>
        <member name="M:Kingo.MicroServices.IUnitOfWorkResourceManager.RequiresFlush">
            <summary>
            Indicates whether or not the unit of work maintains any changes that need to flushed.
            </summary>
            <returns>
            <c>true</c> if the current instance needs to be flushed; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.MicroServices.IUnitOfWorkResourceManager.FlushAsync">
            <summary>
            Flushes any pending changes to the underlying infrastructure.
            </summary>
            <exception cref="T:Kingo.MicroServices.ConflictException">
            A concurrency exception occurred.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.MessageHandler">
            <summary>
            Represent a component that implements one or more variations of the <see cref="T:Kingo.MicroServices.IMessageHandler`1"/> interface.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MessageHandler.Interfaces">
            <summary>
            Returns the <see cref="T:Kingo.MicroServices.IMessageHandler`1"/> interfaces that are implemented by this message handler.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MessageHandler.ToString">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MessageHandler.HandlesExternalMessages">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MessageHandler.HandlesInternalMessages">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MessageHandler.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MessageHandlerAttribute">
            <summary>
            This attribute can be declared on a message handler to configure its run-time behavior.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MessageHandlerAttribute" /> class.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MessageHandlerAttribute.HandlesExternalMessages">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MessageHandlerAttribute.HandlesInternalMessages">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerAttribute.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MessageHandlerDecorator`1">
            <summary>
            Represents a decorator of message handlers.
            </summary>
            <typeparam name="TMessage">Type of the message to handle.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerDecorator`1.#ctor(Kingo.MicroServices.IMessageHandler{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MessageHandlerDecorator`1" /> class.
            </summary>
            <param name="messageHandler">The message handler to decorate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.MicroServices.MessageHandlerDecorator`1.MessageHandler">
            <summary>
            The message handler to decorate.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerDecorator`1.HandleAsync(`0,Kingo.MicroServices.MessageHandlerOperationContext)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerDecorator`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerDecorator`1.Decorate(System.Action{`0,Kingo.MicroServices.MessageHandlerOperationContext})">
            <summary>
            Wraps the specified delegate into a <see cref="T:Kingo.MicroServices.IMessageHandler`1" /> instance.
            </summary>
            <param name="messageHandler">The delegate to wrap.</param>
            <returns>
            A <see cref="T:Kingo.MicroServices.IMessageHandler`1"/> that wraps the specified <paramref name="messageHandler"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerDecorator`1.Decorate(System.Func{`0,Kingo.MicroServices.MessageHandlerOperationContext,System.Threading.Tasks.Task})">
            <summary>
            Wraps the specified delegate into a <see cref="T:Kingo.MicroServices.IMessageHandler`1" /> instance.
            </summary>
            <param name="messageHandler">The delegate to wrap.</param>
            <returns>
            A <see cref="T:Kingo.MicroServices.IMessageHandler`1"/> that wraps the specified <paramref name="messageHandler"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.MessageHandlerInterface">
            <summary>
            Represent a specific, closed version of the <see cref="T:Kingo.MicroServices.IMessageHandler`1"/> interface.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MessageHandlerInterface.MessageType">
            <summary>
            The message type of the message that is handled by the <see cref="T:Kingo.MicroServices.IMessageHandler`1"/>.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.MessageHandlerOperation">
            <summary>
            Represents an operation where a <see cref="T:Kingo.MicroServices.MicroProcessor"/> invokes one or more message handlers to handle a message.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MessageHandlerOperation.Token">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MessageHandlerOperation.Type">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerOperation`1.ExecuteAsync">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MessageHandlerOperationContext">
            <summary>
            Represents the context in which a <see cref="T:Kingo.MicroServices.MicroProcessor"/> invokes a <see cref="T:Kingo.MicroServices.IMessageHandler`1"/>.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MessageHandlerOperationContext.UnitOfWork">
            <summary>
            Represents the unit of work that is associated to the current operation.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MessageHandlerOperationContext.EventBus">
            <summary>
            Represents the event bus to which all events resulting from the current operation can be published.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.MessageHandlerOperationException">
            <summary>
            An exception of this type is to be thrown by application code when something predictable went wrong while handling a message.
            The <see cref="T:Kingo.MicroServices.MicroProcessor" /> will catch exceptions of this type and convert it to a <see cref="T:Kingo.MicroServices.BadRequestException" />
            or <see cref="T:Kingo.MicroServices.InternalServerErrorException" /> based on whether or was executing a command or handling an event.   
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MessageHandlerOperationException" /> class.
            </summary>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MessageHandlerOperationException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerOperationException.AsBadRequestException(System.String)">
            <summary>
            Creates and returns this exception as a <see cref="T:Kingo.MicroServices.BadRequestException"/>, indicating that
            the current exception occurred because of a bad client request.
            </summary>        
            <param name="message">Message describing the context of the newly created message.</param>
            <returns>A new <see cref="T:Kingo.MicroServices.BadRequestException"/> with its <see cref="P:System.Exception.InnerException"/> set to this instance.</returns>        
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerOperationException.AsInternalServerErrorException(System.String)">
            <summary>
            Creates and returns this exception as a <see cref="T:Kingo.MicroServices.InternalServerErrorException"/>, indicating that
            the current exception occurred because of an internal server error.        
            </summary>        
            <param name="message">Message describing the context of the newly created message.</param>
            <returns>A new <see cref="T:Kingo.MicroServices.InternalServerErrorException"/> with its <see cref="P:System.Exception.InnerException"/> set to this instance.</returns>        
        </member>
        <member name="T:Kingo.MicroServices.MessageHandlerOperationResult">
            <summary>
            When implemented, represents the result of handling a message by a <see cref="T:Kingo.MicroServices.IMessageProcessor" />.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MessageHandlerOperationResult.Events">
            <summary>
            The events that were published during the operation.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MessageHandlerOperationResult.MessageHandlerCount">
            <summary>
            The number of message handlers that have handled the message.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerOperationResult.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MessageHandlerOrQueryInterface">
            <summary>
            When implemented, represents a specific variant of the <see cref="T:Kingo.MicroServices.IMessageHandler`1"/>, <see cref="T:Kingo.MicroServices.IQuery`1"/>
            or <see cref="T:Kingo.MicroServices.IQuery`2"/> interface.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MessageHandlerOrQueryInterface.Type">
            <summary>
            Type of the interface.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerOrQueryInterface.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerOrQueryInterface.Equals(Kingo.MicroServices.MessageHandlerOrQueryInterface)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerOrQueryInterface.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerOrQueryInterface.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MessageHandlerOrQueryInterface`2">
            <summary>
            When implemented, represents a specific variant of the <see cref="T:Kingo.MicroServices.IMessageHandler`1"/>, <see cref="T:Kingo.MicroServices.IQuery`1"/>
            or <see cref="T:Kingo.MicroServices.IQuery`2"/> interface.
            </summary>
            <typeparam name="TComponent">Type of the associated component.</typeparam>
            <typeparam name="TMethod">Type of the associated method.</typeparam>
        </member>
        <member name="T:Kingo.MicroServices.MessageKind">
            <summary>
            Represents a specific role or kind a message that is handled or executed by a <see cref="T:Kingo.MicroServices.MicroProcessor"/> can have.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MessageKind.Unspecified">
            <summary>
            Indicates the kind is yet to be specified.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MessageKind.Command">
            <summary>
            Represents a command.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MessageKind.Event">
            <summary>
            Represents an event.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MessageKind.Request">
            <summary>
            Represents a request, carrying parameters for a query.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessor">
            <summary>
            Represents a basic implementation of the <see cref="T:Kingo.MicroServices.IMicroProcessor" /> interface.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MicroProcessor" /> class.
            </summary>                     
            <param name="serviceProvider">
            Service-provider that will be used to resolve message-handlers, their dependencies and other components.
            </param>        
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.AssignUser(System.Security.Principal.IPrincipal)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.CreatePrincipal(System.Security.Principal.IPrincipal)">
            <summary>
            Creates and returns a <see cref="T:System.Security.Claims.ClaimsPrincipal" /> based on the specified <paramref name="user"/>.
            </summary>
            <param name="user">The principal to convert to a <see cref="T:System.Security.Claims.ClaimsPrincipal"/>.</param>
            <returns>A new <see cref="T:System.Security.Claims.ClaimsPrincipal"/> based on the specified <paramref name="user"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="user"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessor.ServiceProvider">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.CreateMethodEndpoints">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.ExecuteCommandAsync``1(Kingo.MicroServices.IMessageHandler{``0},``0,System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.HandleEventAsync``1(Kingo.MicroServices.IMessageHandler{``0},``0,System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.ExecuteQueryAsync``1(Kingo.MicroServices.IQuery{``0},System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.ExecuteQueryAsync``2(Kingo.MicroServices.IQuery{``0,``1},``0,System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.ExecuteOperationAsync(Kingo.MicroServices.MessageHandlerOperation)">
            <summary>
            Executes the specified <paramref name="operation"/> and returns its result.
            </summary>        
            <param name="operation">The operation to execute.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.ExecuteOperationAsync``1(Kingo.MicroServices.QueryOperation{``0})">
            <summary>
            Executes the specified <paramref name="operation"/> and returns its result.
            </summary>
            <typeparam name="TResponse">Type of the response of the query.</typeparam>
            <param name="operation">The operation to execute.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.ExecuteOperationAsync``1(Kingo.MicroServices.MicroProcessorOperation{``0})">
            <summary>
            Executes the specified <paramref name="operation"/> and returns its result.
            </summary>
            <typeparam name="TResult">Type of the result of the operation.</typeparam>
            <param name="operation">The operation to execute.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorComponent">
            <summary>
            Represents a type that can be registered as a component of a <see cref="T:Kingo.MicroServices.MicroProcessor" />.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorComponent.Lifetime">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorComponent.ServiceTypes">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponent.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponent.Equals(Kingo.MicroServices.MicroProcessorComponent)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponent.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponent.ToString">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorComponent.Type">
            <summary>
            Type of the component.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponent.TryGetAttributeOfType``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponent.GetAttributesOfType``1">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorComponentAttribute">
            <summary>
            This attribute can be declared on any class or struct to configure its registration and run-time behavior.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponentAttribute.#ctor(Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MicroProcessorComponentAttribute" /> class.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorComponentAttribute.Lifetime">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorComponentAttribute.ServiceTypes">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponentAttribute.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorEndpointOptions">
            <summary>
            Represents a set of options that can be set for the endpoints of a <see cref="T:Kingo.MicroServices.MicroProcessor" />.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorEndpointOptions.MessageKindResolver">
            <summary>
            Gets or sets the <see cref="T:Kingo.MicroServices.IMessageKindResolver" /> used to resolve the message kind
            of endpoints of which the message kind was left unspecified.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorExtensions">
            <summary>
            Contains extension methods for the <see cref="T:Kingo.MicroServices.IMicroProcessor" /> interface.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorExtensions.ExecuteCommandAsync``1(Kingo.MicroServices.IMicroProcessor,System.Action{``0,Kingo.MicroServices.MessageHandlerOperationContext},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes a command with a specified <paramref name="messageHandler"/>.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
            <param name="processor">The processor used to execute the command.</param>
            <param name="messageHandler">The message handler that will handle the command.</param>
            <param name="message">The command to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            </returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> or <paramref name="message"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorExtensions.ExecuteCommandAsync``1(Kingo.MicroServices.IMicroProcessor,System.Func{``0,Kingo.MicroServices.MessageHandlerOperationContext,System.Threading.Tasks.Task},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes a command with a specified <paramref name="messageHandler"/>.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
            <param name="processor">The processor used to execute the command.</param>
            <param name="messageHandler">The message handler that will handle the command.</param>
            <param name="message">The command to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            </returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> or <paramref name="message"/> is <c>null</c>.
            </exception>         
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorExtensions.HandleEventAsync``1(Kingo.MicroServices.IMicroProcessor,System.Action{``0,Kingo.MicroServices.MessageHandlerOperationContext},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Handles an event with a specified <paramref name="messageHandler"/>.
            </summary>
            <typeparam name="TEvent">Type of the event.</typeparam>
            <param name="processor">The processor used to handle the event.</param>
            <param name="messageHandler">The message handler that will handle the event.</param>
            <param name="message">The event to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            </returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> or <paramref name="message"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorExtensions.HandleEventAsync``1(Kingo.MicroServices.IMicroProcessor,System.Func{``0,Kingo.MicroServices.MessageHandlerOperationContext,System.Threading.Tasks.Task},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Handles an event with a specified <paramref name="messageHandler"/>.
            </summary>
            <typeparam name="TEvent">Type of the event.</typeparam>
            <param name="processor">The processor used to handle the event.</param>
            <param name="messageHandler">The message handler that will handle the event.</param>
            <param name="message">The event to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            </returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> or <paramref name="message"/> is <c>null</c>.
            </exception>         
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorExtensions.ExecuteQueryAsync``1(Kingo.MicroServices.IMicroProcessor,System.Func{Kingo.MicroServices.QueryOperationContext,``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TResponse">Type of the message returned by the query.</typeparam>   
            <param name="processor">A processor.</param>     
            <param name="query">The query to execute.</param>               
            <param name="token">Optional token that can be used to cancel the operation.</param>          
            <returns>The result that carries the response returned by the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorExtensions.ExecuteQueryAsync``1(Kingo.MicroServices.IMicroProcessor,System.Func{Kingo.MicroServices.QueryOperationContext,System.Threading.Tasks.Task{``0}},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TResponse">Type of the message returned by the query.</typeparam> 
            <param name="processor">A processor.</param>       
            <param name="query">The query to execute.</param>               
            <param name="token">Optional token that can be used to cancel the operation.</param>          
            <returns>The result that carries the response returned by the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorExtensions.ExecuteQueryAsync``2(Kingo.MicroServices.IMicroProcessor,System.Func{``0,Kingo.MicroServices.QueryOperationContext,``1},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TRequest">Type of the message going into the query.</typeparam>
            <typeparam name="TResponse">Type of the message returned by the query.</typeparam>
            <param name="processor">A processor.</param>
            <param name="query">The query to execute.</param>
            <param name="message">Message containing the parameters of this query.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>The result that carries the response returned by the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> or <paramref name="message"/> is <c>null</c>.
            </exception>          
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorExtensions.ExecuteQueryAsync``2(Kingo.MicroServices.IMicroProcessor,System.Func{``0,Kingo.MicroServices.QueryOperationContext,System.Threading.Tasks.Task{``1}},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TRequest">Type of the message going into the query.</typeparam>
            <typeparam name="TResponse">Type of the message returned by the query.</typeparam>
            <param name="processor">A processor.</param>
            <param name="query">The query to execute.</param>
            <param name="message">Message containing the parameters of this query.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>The result that carries the response returned by the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> or <paramref name="message"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorOperation">
            <summary>
            When implemented, represents an operation of a <see cref="T:Kingo.MicroServices.IMicroProcessor" />.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorOperation.Message">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorOperation.Token">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorOperation.Type">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorOperation.Kind">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorOperation.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorOperation`1">
            <summary>
            When implemented, represents an operation of a <see cref="T:Kingo.MicroServices.IMicroProcessor" /> that can be executed.
            </summary>
            <typeparam name="TResult">Type of the result of this operation.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorOperation`1.ExecuteAsync">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorOperationContext">
            <summary>
            Represents the context in which a <see cref="T:Kingo.MicroServices.MicroProcessor"/> operates.
            </summary>    
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorOperationContext.User">
            <summary>
            Gets the user that is executing the current operation.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorOperationContext.StackTrace">
            <summary>
            Returns a stack trace of all operations that are currently being executed.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorOperationContext.ServiceProvider">
            <summary>
            Returns the <see cref="T:System.IServiceProvider" /> of this context.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorOperationContext.QueryProcessor">
            <summary>
            Returns the processor that can be used to execute (sub)queries during an operation.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorOperationContext.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorOperationException">
            <summary>
            This exception is thrown by a <see cref="T:Kingo.MicroServices.IMicroProcessor" /> when it failed to handle a message or execute a query.
            Any derived type of this class semantically maps to a <c>4xx</c> or <c>5xx</c> HTTP status code.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MicroProcessorOperationException" /> class.
            </summary>        
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>        
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MicroProcessorOperationException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorOperationException.ErrorCode">
            <summary>
            The ErrorCode that is associated with this Exception. This code typically corresponds with HttpStatusCodes,
            which implies the returned value is always somewhere between <c>400</c> and <c>599</c>, depending on the
            run-time type of the exception.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorOperationKinds">
            <summary>
            Represents the kinds of operations a processor can execute (i.e. internal or external).
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MicroProcessorOperationKinds.None">
            <summary>
            Represents no specific kind.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MicroProcessorOperationKinds.RootOperation">
            <summary>
            Represents an operation that was triggered by an external message or request. Root operations always
            represent the first operation on the <see cref="T:Kingo.MicroServices.IAsyncMethodOperationStackTrace" />.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MicroProcessorOperationKinds.BranchOperation">
            <summary>
            Represents an operation that was triggered by another operation.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MicroProcessorOperationKinds.Any">
            <summary>
            Represents any kind of operation.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorOperationKindsExtensions">
            <summary>
            Contains extension methods for <see cref="T:Kingo.MicroServices.MicroProcessorOperationKinds" />.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorOperationKindsExtensions.IsSupportedBy(Kingo.MicroServices.MicroProcessorOperationKinds,Kingo.MicroServices.MicroProcessorOperationKinds)">
            <summary>
            Determines whether or not the specified <paramref name="operationKind"/> is supported based on the specified
            <paramref name="supportedOperationKinds"/>.
            </summary>
            <param name="operationKind">The operation type to check.</param>
            <param name="supportedOperationKinds">The supported operation types.</param>
            <returns><c>true</c> if <paramref name="operationKind"/> is supported; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorOperationType">
            <summary>
            Represents a specific operation type performed by a <see cref="T:Kingo.MicroServices.MicroProcessor" />.
            </summary>    
        </member>
        <member name="F:Kingo.MicroServices.MicroProcessorOperationType.MessageHandlerOperation">
            <summary>
            Represents an operation in which a message handler is invoked to handle
            a message. This operation type is also known as a write operation.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MicroProcessorOperationType.QueryOperation">
            <summary>
            Represents an operation in which a query is invoked to return a response.
            This operation type is also known as a read operation.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorType">
            <summary>
            Represents a <see cref="T:Kingo.MicroServices.MicroProcessor"/> type.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.NotFoundException">
            <summary>
            This exception is thrown by a <see cref="T:Kingo.MicroServices.IMicroProcessor" /> when a query failed to execute because the
            requested data or resource was not found. This type semantically maps to HTTP response code <c>404</c>.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.NotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.NotFoundException" /> class.
            </summary>        
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>        
        </member>
        <member name="M:Kingo.MicroServices.NotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.NotFoundException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Kingo.MicroServices.NotFoundException.ErrorCode">
            <summary>
            Returns <c>404</c>.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.Query">
            <summary>
            Represent a component that implements one or more variations of the <see cref="T:Kingo.MicroServices.IQuery`1"/> or
            <see cref="T:Kingo.MicroServices.IQuery`2"/> interfaces.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Query.Interfaces">
            <summary>
            Returns the <see cref="T:Kingo.MicroServices.IQuery`1"/> ans <see cref="T:Kingo.MicroServices.IQuery`2"/> interfaces
            that are implemented by this query.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Query.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Query.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.QueryDecorator`1">
            <summary>
            Represents a decorator of queries.
            </summary>
            <typeparam name="TResponse">Type of the response of the query.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`1.#ctor(Kingo.MicroServices.IQuery{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.QueryDecorator`1" /> class.
            </summary>
            <param name="query">The query to decorate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.MicroServices.QueryDecorator`1.Query">
            <summary>
            The query to decorate.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`1.ExecuteAsync(Kingo.MicroServices.QueryOperationContext)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`1.Decorate(System.Func{Kingo.MicroServices.QueryOperationContext,`0})">
            <summary>
            Wraps the specified delegate into a <see cref="T:Kingo.MicroServices.IQuery`1" /> instance.
            </summary>
            <param name="query">The delegate to wrap.</param>
            <returns>
            A <see cref="T:Kingo.MicroServices.IQuery`1"/> that wraps the specified <paramref name="query"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`1.Decorate(System.Func{Kingo.MicroServices.QueryOperationContext,System.Threading.Tasks.Task{`0}})">
            <summary>
            Wraps the specified delegate into a <see cref="T:Kingo.MicroServices.IQuery`1" /> instance.
            </summary>
            <param name="query">The delegate to wrap.</param>
            <returns>
            A <see cref="T:Kingo.MicroServices.IQuery`1"/> that wraps the specified <paramref name="query"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.QueryDecorator`2">
            <summary>
            Represents a decorator of queries.
            </summary>
            <typeparam name="TRequest">Type of the request of the query.</typeparam>
            <typeparam name="TResponse">Type of the response of the query.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`2.#ctor(Kingo.MicroServices.IQuery{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.QueryDecorator`2" /> class.
            </summary>
            <param name="query">The query to decorate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.MicroServices.QueryDecorator`2.Query">
            <summary>
            The query to decorate.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`2.ExecuteAsync(`0,Kingo.MicroServices.QueryOperationContext)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`2.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`2.Decorate(System.Func{`0,Kingo.MicroServices.QueryOperationContext,`1})">
            <summary>
            Wraps the specified delegate into a <see cref="T:Kingo.MicroServices.IQuery`2" /> instance.
            </summary>
            <param name="query">The delegate to wrap.</param>
            <returns>
            A <see cref="T:Kingo.MicroServices.IQuery`2"/> that wraps the specified <paramref name="query"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`2.Decorate(System.Func{`0,Kingo.MicroServices.QueryOperationContext,System.Threading.Tasks.Task{`1}})">
            <summary>
            Wraps the specified delegate into a <see cref="T:Kingo.MicroServices.IQuery`2" /> instance.
            </summary>
            <param name="query">The delegate to wrap.</param>
            <returns>
            A <see cref="T:Kingo.MicroServices.IQuery`2"/> that wraps the specified <paramref name="query"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.QueryInterface">
            <summary>
            Represent a specific, closed version of the <see cref="T:Kingo.MicroServices.IQuery`1"/> or
            <see cref="T:Kingo.MicroServices.IQuery`2"/> interface.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.QueryInterface.RequestType">
            <summary>
            The request message type. This returns <c>null</c> if this interface represents an instance of the
            <see cref="T:Kingo.MicroServices.IQuery`1"/> interface.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.QueryInterface.ResponseType">
            <summary>
            The response message type.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.QueryOperation`1">
            <summary>
            Represents an operation where a <see cref="T:Kingo.MicroServices.MicroProcessor"/> executes a query.
            </summary>
            <typeparam name="TResponse">Type of the response of the query.</typeparam>
        </member>
        <member name="P:Kingo.MicroServices.QueryOperation`1.Token">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.QueryOperation`1.Type">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.QueryOperation`1.Kind">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.QueryOperation`1.ExecuteAsync">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.QueryOperation`1.CreateMethodOperation(Kingo.MicroServices.MicroProcessorOperationContext)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.MicroServices.ExecuteAsyncMethodOperation`1"/> for the query that is to be executed.
            </summary>
            <param name="context">Context of the operation.</param>
            <returns>A new operation that is ready to be executed.</returns>
        </member>
        <member name="T:Kingo.MicroServices.QueryOperationContext">
            <summary>
            Represents the context in which a <see cref="T:Kingo.MicroServices.MicroProcessor"/> executes a query.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.QueryOperationResult`1">
            <summary>
            Represents the result of executing a query by a <see cref="T:Kingo.MicroServices.IMicroProcessor" />.
            </summary>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="P:Kingo.MicroServices.QueryOperationResult`1.Response">
            <summary>
            The response that was returned by the query.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.QueryOperationResult`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.UnauthorizedRequestException">
            <summary>
            This exception is thrown by a <see cref="T:Kingo.MicroServices.IMicroProcessor" /> when a command or query failed because the client
            was not authorized to execute it. This type semantically maps to HTTP response code <c>401</c>.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.UnauthorizedRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.UnauthorizedRequestException" /> class.
            </summary>        
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>        
        </member>
        <member name="M:Kingo.MicroServices.UnauthorizedRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.UnauthorizedRequestException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Kingo.MicroServices.UnauthorizedRequestException.ErrorCode">
            <summary>
            Returns <c>401</c>.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.UnitOfWorkMode">
            <summary>
            Represents a specific mode of the unit of work that a <see cref="T:Kingo.MicroServices.MicroProcessor" /> uses to store and flush changes.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.UnitOfWorkMode.Disabled">
            <summary>
            Indicates that every <see cref="T:Kingo.MicroServices.IUnitOfWorkResourceManager">resource manager</see> is flushed immediately when it enlists itself.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.UnitOfWorkMode.SingleThreaded">
            <summary>
            Indicates that all enlisted <see cref="T:Kingo.MicroServices.IUnitOfWorkResourceManager">resource managers</see> are flushed one after the other.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.UnitOfWorkMode.MultiThreaded">
            <summary>
            Indicates that all <see cref="T:Kingo.MicroServices.IUnitOfWorkResourceManager">resource managers</see> will be grouped by their
            <see cref="P:Kingo.MicroServices.IUnitOfWorkResourceManager.ResourceId" />, and different groups may be flushed simultaneously using
            different threads.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.UnprocessableEntityException">
            <summary>
            This exception is thrown by a <see cref="T:Kingo.MicroServices.IMicroProcessor" /> when a command failed to execute because because the operation was illegal.
            This type semantically maps to HTTP response code <c>422</c> (unprocessable entity).
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.UnprocessableEntityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.UnprocessableEntityException" /> class.
            </summary>        
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>        
        </member>
        <member name="M:Kingo.MicroServices.UnprocessableEntityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.UnprocessableEntityException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Kingo.MicroServices.UnprocessableEntityException.ErrorCode">
            <summary>
            Returns <c>422</c>.
            </summary>
        </member>
        <member name="T:Kingo.Reflection.IAttributeProvider">
            <summary>
            When implemented by a class, serves as a provider of attributes declared on class, method, parameter, field, or any other member
            that can be decorated with attributes.
            </summary>
        </member>
        <member name="M:Kingo.Reflection.IAttributeProvider.TryGetAttributeOfType``1(``0@)">
            <summary>
            Attempts to retrieve a single attribute of type <typeparamref name="TAttribute"/>.
            </summary>
            <typeparam name="TAttribute">Type of the attribute to retrieve.</typeparam>
            <param name="attribute">
            When this method returns <c>true</c>, this parameter will refer to the retrieved attribute;
            otherwise it will be <c>null</c>.
            </param>
            <returns><c>true</c> if the attribute was retrieved; otherwise <c>false</c>.</returns>
            <exception cref="T:System.InvalidOperationException">
            Multiple attribute defined of the method are assignable to type <typeparamref name="TAttribute"/>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.IAttributeProvider.GetAttributesOfType``1">
            <summary>
            Retrieves all attributes of type <typeparamref name="TAttribute"/>.
            </summary>
            <typeparam name="TAttribute">Type of the attribute to retrieve.</typeparam>
            <returns>A collection of attributes.</returns>
        </member>
        <member name="T:Kingo.Reflection.IMethodAttributeProvider">
            <summary>
            When implemented by a class, serves as a provider of attributes declared on a method.
            </summary>
        </member>
        <member name="P:Kingo.Reflection.IMethodAttributeProvider.Info">
            <summary>
            The method for which the attributes are provided.
            </summary>
        </member>
        <member name="T:Kingo.Reflection.IParameterAttributeProvider">
            <summary>
            When implemented by a class, represents a provider of attributes that are specified on a specific parameter.
            </summary>
        </member>
        <member name="P:Kingo.Reflection.IParameterAttributeProvider.Type">
            <summary>
            Returns the parameter type.
            </summary>
        </member>
        <member name="P:Kingo.Reflection.IParameterAttributeProvider.Info">
            <summary>
            Returns the parameter info.
            </summary>
        </member>
        <member name="T:Kingo.Reflection.ITypeAttributeProvider">
            <summary>
            When implemented by a class, serves as a provider of attributes declared on a class or struct.
            </summary>
        </member>
        <member name="P:Kingo.Reflection.ITypeAttributeProvider.Type">
            <summary>
            The type for which the attributes are provided.
            </summary>
        </member>
        <member name="T:Kingo.Reflection.TypeExtensions">
            <summary>
            Contains several extensions method for the <see cref="T:System.Type" /> class.
            </summary>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetEqualityOperator``2(System.Type,System.Func{``0,``1,System.Boolean}@)">
            <summary>
            Attempts to obtain the equality operator (==) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="equalityOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the equality operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetInequalityOperator``2(System.Type,System.Func{``0,``1,System.Boolean}@)">
            <summary>
            Attempts to obtain the equality operator (!=) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="inequalityOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the inequality operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetLessThanOperator``2(System.Type,System.Func{``0,``1,System.Boolean}@)">
            <summary>
            Attempts to obtain the less than operator (&lt;) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="lessThanOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the less than operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetLessThanOrEqualOperator``2(System.Type,System.Func{``0,``1,System.Boolean}@)">
            <summary>
            Attempts to obtain the less than or equal to operator (&lt;=) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="lessThanOrEqualOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the less than or equal to operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetGreaterThanOperator``2(System.Type,System.Func{``0,``1,System.Boolean}@)">
            <summary>
            Attempts to obtain the greater than operator (&gt;) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="greaterThanOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the greater than operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetGreaterThanOrEqualOperator``2(System.Type,System.Func{``0,``1,System.Boolean}@)">
            <summary>
            Attempts to obtain the greater than or equal to operator (&gt;=) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="greaterThanOrEqualOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the greater than or equal to operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetAdditionOperator``3(System.Type,System.Func{``0,``1,``2}@)">
            <summary>
            Attempts to obtain the addition operator (+) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="additionOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the addition operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetSubtractionOperator``3(System.Type,System.Func{``0,``1,``2}@)">
            <summary>
            Attempts to obtain the subtraction operator (-) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="subtractiontOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the subtraction operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetMultiplyOperator``3(System.Type,System.Func{``0,``1,``2}@)">
            <summary>
            Attempts to obtain the multiply operator (*) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="multiplyOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the multiply operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetDivisionOperator``3(System.Type,System.Func{``0,``1,``2}@)">
            <summary>
            Attempts to obtain the division operator (/) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="divisionOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the division operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetModulusOperator``3(System.Type,System.Func{``0,``1,``2}@)">
            <summary>
            Attempts to obtain the modulus operator (%) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="modulusOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the modulus operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetExclusiveOrOperator``3(System.Type,System.Func{``0,``1,``2}@)">
            <summary>
            Attempts to obtain the exclusiveOr operator (^) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="exclusiveOrOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the exclusiveOr operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetBitwiseAndOperator``3(System.Type,System.Func{``0,``1,``2}@)">
            <summary>
            Attempts to obtain the bitwiseAnd operator (&amp;) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="bitwiseAndOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the bitwiseAnd operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetBitwiseOrOperator``3(System.Type,System.Func{``0,``1,``2}@)">
            <summary>
            Attempts to obtain the bitwiseOr operator (|) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="bitwiseOrOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the bitwiseOr operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetLeftShiftOperator``2(System.Type,System.Func{``0,System.Int32,``1}@)">
            <summary>
            Attempts to obtain the leftShift operator (&lt;&lt;) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>        
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="leftShiftOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the leftShift operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetRightShiftOperator``2(System.Type,System.Func{``0,System.Int32,``1}@)">
            <summary>
            Attempts to obtain the rightShift operator (&gt;&gt;) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>        
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="rightShiftOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the rightShift operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetUnaryPlusOperator``2(System.Type,System.Func{``0,``1}@)">
            <summary>
            Attempts to obtain the unaryPlus operator (+) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>        
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="unaryPlusOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the unaryPlus operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetUnaryNegationOperator``2(System.Type,System.Func{``0,``1}@)">
            <summary>
            Attempts to obtain the unaryNegation operator (-) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>        
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="unaryNegationtOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the unaryNegation operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetLogicalNotOperator``2(System.Type,System.Func{``0,``1}@)">
            <summary>
            Attempts to obtain the logicalNot operator (!) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>        
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="logicalNotOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the logicalNot operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetOnesComplementOperator``2(System.Type,System.Func{``0,``1}@)">
            <summary>
            Attempts to obtain the onesComplement operator (~) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>        
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="onesComplementOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the onesComplement operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetTrueOperator``1(System.Type,System.Func{``0,System.Boolean}@)">
            <summary>
            Attempts to obtain the true operator (true) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>                
            <param name="type">Type in which the operator is defined.</param>
            <param name="trueOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the true operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetFalseOperator``1(System.Type,System.Func{``0,System.Boolean}@)">
            <summary>
            Attempts to obtain the false operator (false) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>                
            <param name="type">Type in which the operator is defined.</param>
            <param name="falseOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the false operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetImplicitOperator``2(System.Type,System.Func{``0,``1}@)">
            <summary>
            Attempts to obtain the implicit operator defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>        
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="implicitOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the implicit operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetExplicitOperator``2(System.Type,System.Func{``0,``1}@)">
            <summary>
            Attempts to obtain the explicit operator defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the first argument.</typeparam>        
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="explicitOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the explicit operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.FriendlyNames(System.Collections.Generic.IEnumerable{System.Type},System.Boolean,System.String)">
            <summary>
            Concatenates the names of the specified <paramref name="types"/> into a single string using the specified <paramref name="separator"/>.
            </summary>
            <param name="types">A collection of types.</param>
            <param name="useFullNames">Indicates whether or not the full name of all types should be used in the friendly name.</param>
            <param name="separator">The separator that is used to concatenate all names.</param>
            <returns>A single string containing all names of the specified <paramref name="types"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="types"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.FriendlyName(System.Type,System.Boolean)">
            <summary>
            Returns the friendly name of a type, useful for displaying type information in consoles or debug strings.
            </summary>
            <param name="type">A type.</param>
            <param name="useFullNames">Indicates whether or not the full name of all types should be used in the friendly name.</param>
            <returns>A friendly name of a type</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.ImplementsInterface``1(System.Type)">
            <summary>
            Determines whether or not the specified <paramref name="type"/> implements <typeparamref name="TInterface"/>.
            </summary>
            <typeparam name="TInterface">Type of an interface.</typeparam>
            <param name="type">A type.</param>        
            <returns>
            <c>true</c> if <paramref name="type"/> implements (at least one variation of) <typeparamref name="TInterface"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.ImplementsInterface(System.Type,System.Type)">
            <summary>
            Determines whether or not the specified <paramref name="type"/> implements the specified <paramref name="interfaceType"/>.
            </summary>
            <param name="type">A type.</param>
            <param name="interfaceType">An interface type.</param>
            <returns>
            <c>true</c> if <paramref name="type"/> implements (at least one variation of) the specified <paramref name="interfaceType"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> or <paramref name="interfaceType"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.GetInterfacesOfType``1(System.Type)">
            <summary>
            Returns all variations of <typeparamref name="TInterface" /> that are implemented by
            the specified <paramref name="type"/>.
            </summary>
            <typeparam name="TInterface">Type of an interface.</typeparam>
            <param name="type">Type that is checked for implementations of <typeparamref name="TInterface" />.</param>        
            <returns>
            All implemented variations of <typeparamref name="TInterface" /> that are implemented
            by the specified <paramref name="type"/>. If <paramref name="type"/> is not a class or value type or
            <paramref name="type"/> simply doesn't implement any instance of <typeparamref name="TInterface" />,
            an empty collection is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.GetInterfacesOfType(System.Type,System.Type[])">
            <summary>
            Returns all variations of the specified <paramref name="interfaceTypes" /> that are implemented by
            the specified <paramref name="type"/>.
            </summary>
            <param name="type">Type that must implement one of the specified <paramref name="interfaceTypes"/>.</param>
            <param name="interfaceTypes">A collection of interface types. These can contain generic type definitions.</param>
            <returns>
            All implemented variations of the specified <paramref name="interfaceTypes" /> that are implemented
            by the specified <paramref name="type"/>. If <paramref name="type"/> is not a class or value type or
            <paramref name="type"/> simply doesn't implement any instance of the specified <paramref name="interfaceTypes"/>,
            an empty collection is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> or <paramref name="interfaceTypes"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.GetInterfacesOfType(System.Type,System.Type)">
            <summary>
            Returns all variations of the specified <paramref name="interfaceType" /> that are implemented by
            the specified <paramref name="type"/>.
            </summary>
            <param name="type">Type that must implement the specified <paramref name="interfaceType"/>.</param>
            <param name="interfaceType">An interface type. This can be a generic type definition of an interface.</param>
            <returns>
            All implemented variations of the specified <paramref name="interfaceType" /> that are implemented
            by the specified <paramref name="type"/>. If <paramref name="type"/> is not a class or value type,
            <paramref name="interfaceType"/> is not an interface type or <paramref name="type"/> simply doesn't
            implement any instance of the specified <paramref name="interfaceType"/>, an empty collection is returned.
            </returns>
        </member>
        <member name="T:Kingo.Reflection.TypeSet">
            <summary>
            Represents an immutable set of types.
            </summary>
        </member>
        <member name="F:Kingo.Reflection.TypeSet.Empty">
            <summary>
            Represents the empty set.
            </summary>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Reflection.TypeSet.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Contains``1">
            <summary>
            Determines whether or not this set contains the specified <typeparamref name="TItem"/>.
            </summary>
            <typeparam name="TItem">The type to check.</typeparam>
            <returns><c>true</c> if this set contains the specified <typeparamref name="TItem"/>; otherwise <c>false</c>.</returns>        
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Contains(System.Type)">
            <summary>
            Determines whether or not this set contains the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type to check.</param>
            <returns><c>true</c> if this set contains the specified <paramref name="type"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Add(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Adds all types defined in the assemblies that match the specified search criteria to this set.
            </summary>
            <param name="searchPattern">The pattern that is used to match specified files/assemblies.</param>
            <param name="path">A path pointing to a specific directory. If <c>null</c>, the <see cref="P:Kingo.Reflection.TypeSet.CurrentDirectory"/> is used.</param>
            <param name="searchOption">
            Indicates whether or not only the top-level directory is to be searched.        
            </param>
            <returns>A new set containing all types from the specified assemblies.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="searchPattern"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.IOException">
            An error occurred while reading files from the specified location(s).
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission to access the specified path or its files.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Add(System.Reflection.Assembly[])">
            <summary>
            Adds all types from the specified <paramref name="assemblies"/> to this set.
            </summary>
            <param name="assemblies">A collection of assemblies.</param>
            <returns>A new set where all types from the specified <paramref name="assemblies"/> were added.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assemblies"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Add(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Adds all types from the specified <paramref name="assemblies"/> to this set.
            </summary>
            <param name="assemblies">A collection of assemblies.</param>
            <returns>A new set where all types from the specified <paramref name="assemblies"/> were added.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assemblies"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Add(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Adds all the specified <paramref name="types"/> to this set.
            </summary>
            <param name="types">A collection of types.</param>
            <returns>A new set containing all the specified <paramref name="types"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="types"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Add``1">
            <summary>
            Adds the specified <typeparamref name="TItem" /> to the set.
            </summary>
            <typeparam name="TItem">The type to add to this set.</typeparam>
            <returns>A new set containing the specified <typeparamref name="TItem"/>.</returns>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Add(System.Type)">
            <summary>
            Adds the specified <paramref name="type" /> to the set.
            </summary>
            <param name="type">The type to add to this set.</param>
            <returns>A new set containing the specified <paramref name="type"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Remove(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Removes all types defined in the assemblies that match the specified search criteria to this set.
            <paramref name="searchPattern"/> from this set.
            </summary>
            <param name="searchPattern">The pattern that is used to match specified files/assemblies.</param>
            <param name="path">A path pointing to a specific directory. If <c>null</c>, the <see cref="P:Kingo.Reflection.TypeSet.CurrentDirectory"/> is used.</param>
            <param name="searchOption">
            Indicates whether or not only the top-level directory is to be searched.        
            </param>
            <returns>A new set containing all types from the specified assemblies.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="searchPattern"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.IOException">
            An error occurred while reading files from the specified location(s).
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Remove(System.Reflection.Assembly[])">
            <summary>
            Removes all types from the specified <paramref name="assemblies"/> from this set.
            </summary>
            <param name="assemblies">A collection of assemblies.</param>
            <returns>A new set where all types from the specified <paramref name="assemblies"/> have been removed.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assemblies"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Remove(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Removes all types from the specified <paramref name="assemblies"/> from this set.
            </summary>
            <param name="assemblies">A collection of assemblies.</param>
            <returns>A new set where all types from the specified <paramref name="assemblies"/> have been removed.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assemblies"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Remove(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Removes all specified <paramref name="types"/> from this set.
            </summary>
            <param name="types">A collection of types to remove.</param>
            <returns>A new set where all the specified <paramref name="types"/> have been removed.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="types"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Remove``1">
            <summary>
            Removes the specified <typeparamref name="TItem"/> from this set.
            </summary>
            <typeparam name="TItem">The type to remove.</typeparam>
            <returns>A new set where the specified <typeparamref name="TItem"/> has been removed.</returns>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Remove(System.Type)">
            <summary>
            Removes the specified <paramref name="type"/> from this set.
            </summary>
            <param name="type">The type to remove.</param>
            <returns>A new set where the specified <paramref name="type"/> has been removed.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.OverrideCurrentDirectory(System.Reflection.Assembly)">
            <summary>
            Sets the current directory to the location of the specified <paramref name="assembly"/>.
            If <paramref name="assembly"/> is <c>null</c>, the location of the calling assembly
            is used.
            </summary>
            <param name="assembly">The assembly that is used to set the current directory.</param>
            <returns>A scope that, when disposed, will reset the value of the directory to its previous value.</returns>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.OverrideCurrentDirectory(System.String)">
            <summary>
            Sets the current directory to the specified <paramref name="path"/>.
            </summary>
            <param name="path">The path that will serve as the current directory.</param>
            <returns>A scope that, when disposed, will reset the value of the directory to its previous value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.Reflection.TypeSet.CurrentDirectory">
            <summary>
            Returns the directory that has been configured as the default or current directory. If not overridden,
            this property returns the directory of the main assembly or executable.
            </summary>
        </member>
        <member name="T:Kingo.Threading.AsyncMethod">
            <summary>
            Contains several helper methods for async methods.
            </summary>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Run(System.Func{System.Threading.Tasks.Task},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified asynchronous <paramref name="asyncFunc"/> synchronously and
            returns a completed <see cref="T:System.Threading.Tasks.Task" /> while encapsulating any exceptions
            that might be thrown.
            </summary>        
            <param name="asyncFunc">The delegate to invoke.</param>
            <param name="token">
            If specified, this token is checked before and after <paramref name="asyncFunc"/> is executed,
            and a cancelled task is returned if cancellation has been requested.
            </param>
            <returns>A completed <see cref="T:System.Threading.Tasks.Task" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="asyncFunc"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Run(System.Action,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="action"/> synchronously and
            returns a completed <see cref="T:System.Threading.Tasks.Task" /> while encapsulating any exceptions
            that might be thrown.
            </summary>
            <param name="action">The delegate to invoke.</param>
            <param name="token">
            If specified, this token is checked before and after <paramref name="action"/> is executed,
            and a cancelled task is returned if cancellation has been requested.
            </param>
            <returns>A completed <see cref="T:System.Threading.Tasks.Task" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Run``1(System.Func{``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="func"/> synchronously and
            returns a completed <see cref="T:System.Threading.Tasks.Task`1" /> while encapsulation any exceptions
            that might be thrown.
            </summary>
            <typeparam name="TResult">Type of the result of the delegate.</typeparam>
            <param name="func">The delegate to invoke.</param>
            <param name="token">
            If specified, this token is checked before and after <paramref name="func"/> is executed,
            and a cancelled task is returned if cancellation has been requested.
            </param>
            <returns>A completed <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="func"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Throw(System.Exception)">
            <summary>
            Creates and returns a new completed <see cref="T:System.Threading.Tasks.Task`1" /> that encapsulates
            the specified <paramref name="exception"/>.
            </summary>        
            <param name="exception">The exception to encapsulate.</param>
            <returns>A new completed <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exception"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Throw``1(System.Exception)">
            <summary>
            Creates and returns a new completed <see cref="T:System.Threading.Tasks.Task`1" /> that encapsulates
            the specified <paramref name="exception"/>.
            </summary>
            <typeparam name="TResult">Return-type of the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
            <param name="exception">The exception to encapsulate.</param>
            <returns>A new completed <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exception"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Await(System.Threading.Tasks.Task,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Awaits the specified task, blocking the current thread, and unwraps any <see cref="T:System.AggregateException" />
            by rethrowing the first inner exception, just like the await-statement would do.
            </summary>
            <param name="task">The task to await.</param>
            <param name="token">Optional cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="task"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Await(System.Threading.Tasks.Task,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Awaits the specified task, blocking the current thread, and unwraps any <see cref="T:System.AggregateException" />
            by rethrowing the first inner exception, just like the await-statement would do.
            </summary>
            <param name="task">The task to await.</param>
            <param name="timeoutInMilliseconds">Maximum amount of time in milliseconds to wait for the task to complete.</param>
            <param name="token">Optional cancellation token.</param>
            <returns><c>true</c> if the Task completed execution within the allotted time; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="task"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="timeoutInMilliseconds"/> is not a valid timeout period.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Await(System.Threading.Tasks.Task,System.TimeSpan,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Awaits the specified task, blocking the current thread, and unwraps any <see cref="T:System.AggregateException" />
            by rethrowing the first inner exception, just like the await-statement would do.
            </summary>
            <param name="task">The task to await.</param>
            <param name="timeout">Maximum amount of time to wait for the task to complete.</param>
            <param name="token">Optional cancellation token.</param>
            <returns><c>true</c> if the Task completed execution within the allotted time; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="task"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Await``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Awaits the specified task, blocking the current thread, and unwraps any <see cref="T:System.AggregateException" />
            by rethrowing the first inner exception, just like the await-statement would do.
            </summary>
            <param name="task">The task to await.</param>        
            <exception cref="T:System.ArgumentNullException">
            <paramref name="task"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.RethrowInnerException(System.AggregateException)">
            <summary>
            Re-throws the first inner exception of the specified <paramref name="exception"/> if it has any
            inner exceptions, without losing the stacktrace of this exception.
            </summary>
            <param name="exception">The exception to unwrap.</param>
            <returns><c>false</c> if the exception was not re-thrown.</returns>
            <exception cref="T:System.Exception">
            If <paramref name="exception"/> has any inner exceptions.
            </exception>
        </member>
        <member name="T:Kingo.Threading.Context`1">
            <summary>
            Represents a contextual container for a specific value. All instance methods on this class are thread-safe.
            </summary>
            <typeparam name="TValue">Type of the value to store.</typeparam>
        </member>
        <member name="M:Kingo.Threading.Context`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Threading.Context`1" /> class.
            </summary>
        </member>
        <member name="M:Kingo.Threading.Context`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Threading.Context`1" /> class.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="P:Kingo.Threading.Context`1.Current">
            <summary>
            Returns the value of the item that is current with respect to the current thread.
            </summary>
        </member>
        <member name="M:Kingo.Threading.Context`1.OverrideThreadLocal(`0)">
            <summary>
            Sets the current value that is accessible by the current thread through <see cref="P:Kingo.Threading.Context`1.Current" />
            only as long as the scope is active.
            </summary>
            <param name="value">The value to set.</param>
            <returns>The scope that is to be disposed when ended.</returns>
        </member>
        <member name="M:Kingo.Threading.Context`1.OverrideAsyncLocal(`0)">
            <summary>
            Sets the current value that is accessible by all threads that share the same logical call context
            through <see cref="P:Kingo.Threading.Context`1.Current" /> as long as the scope is active.
            </summary>
            <param name="value">The value to set.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.InvalidOperationException">
            The call is made inside a thread local scope.
            </exception>
        </member>
        <member name="M:Kingo.Threading.Context`1.Override(`0)">
            <summary>
            Sets the current value that is accessible by all threads
            through <see cref="P:Kingo.Threading.Context`1.Current" /> as long as the scope is active.
            </summary>
            <param name="value">The value to set.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.InvalidOperationException">
            The call is made inside an async local or thread local scope.
            </exception>
        </member>
        <member name="M:Kingo.Threading.Context`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Kingo.Threading.ContextScope`1">
            <summary>
            Represents a scope that is used to temporarily set the current value of a context.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="P:Kingo.Threading.ContextScope`1.Value">
            <summary>
            Returns the value that is managed by this scope.
            </summary>
        </member>
        <member name="M:Kingo.Threading.ContextScope`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
    </members>
</doc>
