<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kingo.MicroServices.Contract</name>
    </assembly>
    <members>
        <member name="T:Kingo.ErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Kingo.ErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Kingo.ErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Kingo.ErrorMessages.Constraint_ValueNotValid">
            <summary>
              Looks up a localized string similar to The specified value ({0}) is not valid..
            </summary>
        </member>
        <member name="P:Kingo.ErrorMessages.OrConstraint_ValueNotValid">
            <summary>
              Looks up a localized string similar to The specified value ({0}) should satisfy any of the following constraints: [{1}]..
            </summary>
        </member>
        <member name="T:Kingo.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.Constraint_UnsupportedType">
            <summary>
              Looks up a localized string similar to Value of type &apos;{0}&apos; could not be validated because the constraint expects an instance of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.DataContractExtensions_CircularReference">
            <summary>
              Looks up a localized string similar to Updating instance of type &apos;{0}&apos; to its latest version failed: version of type &apos;{1}&apos; introduced a circular update by returning an instance of type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.DataContractExtensions_InvalidCast">
            <summary>
              Looks up a localized string similar to Updating instance of type &apos;{0}&apos; to its latest version failed: could not convert latest version of type &apos;{1}&apos; to instance of type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.AndConstraint.And(Kingo.MicroServices.IConstraint)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.ChildMemberAttribute">
            <summary>
            This attribute can be used to decorate fields or properties of a <see cref="T:Kingo.MicroServices.ValidatableObject" />
            to signal that it represents an item, collection or dictionary that should be validated in
            and of itself. Any validation-errors of the child-member will be added to the set of validation-errors
            of the parent.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.ChildMemberAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.ChildMemberAttribute" /> class.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.ChildMemberAttribute.ErrorMessage">
            <summary>
            If specified, defines the error-message that is added to the collection of validation-results
            if any child-members are invalid. This property cannot be used in combination with the
            <see cref="P:Kingo.MicroServices.ChildMemberAttribute.ErrorMessageResourceType"/> and <see cref="P:Kingo.MicroServices.ChildMemberAttribute.ErrorMessageResourceName"/> properties.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.ChildMemberAttribute.ErrorMessageResourceType">
            <summary>
            If specified, defines the resource-type where the localized error-message can be retrieved
            that is added to the collection of validation-results if any child-members are invalid.
            This property should be used in combination with the <see cref="P:Kingo.MicroServices.ChildMemberAttribute.ErrorMessageResourceName"/>-property.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.ChildMemberAttribute.ErrorMessageResourceName">
            <summary>
            If specified, defines the resource-name of the localized error-message inside the resource-type
            that is added to the collection of validation-results if any child-members are invalid.
            This property should be used in combination with the <see cref="P:Kingo.MicroServices.ChildMemberAttribute.ErrorMessageResourceType"/>-property.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.Constraint">
            <summary>
            Serves as a base-class implementation of the <see cref="T:Kingo.MicroServices.IConstraint"/> interface.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Constraint.And(Kingo.MicroServices.IConstraint)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Constraint.Or(Kingo.MicroServices.IConstraint)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Constraint.All(Kingo.MicroServices.IConstraint[])">
            <summary>
            Creates and returns a new constraint that checks if all specified <paramref name="constraints"/>
            are satisfied by a specific value.
            </summary>
            <param name="constraints">The constraints to check.</param>
            <returns>A new constraint that represents a logical AND-operation for all specified <paramref name="constraints"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraints"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Constraint.All(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IConstraint})">
            <summary>
            Creates and returns a new constraint that checks if all specified <paramref name="constraints"/>
            are satisfied by a specific value.
            </summary>
            <param name="constraints">The constraints to check.</param>
            <returns>A new constraint that represents a logical AND-operation for all specified <paramref name="constraints"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraints"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Constraint.Any(Kingo.MicroServices.IConstraint[])">
            <summary>
            Creates and returns a new constraint that checks if any of the specified <paramref name="constraints"/>
            are satisfied by a specific value.
            </summary>
            <param name="constraints">The constraints to check.</param>
            <returns>A new constraint that represents a logical OR-operation for all specified <paramref name="constraints"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraints"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Constraint.Any(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IConstraint})">
            <summary>
            Creates and returns a new constraint that checks if any of the specified <paramref name="constraints"/>
            are satisfied by a specific value.
            </summary>
            <param name="constraints">The constraints to check.</param>
            <returns>A new constraint that represents a logical OR-operation for all specified <paramref name="constraints"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraints"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Constraint.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Constraint.IsAlwaysValid``1">
            <summary>
            Returns a new constraint that declares any value as valid (with the exception
            of <c>null</c>-values and instances that are not an instance of <typeparamref name="TValue"/>).
            </summary>
            <typeparam name="TValue">Type of value to check.</typeparam>
            <returns>
            A constraint that is satisfied with any compatible value.
            </returns>
        </member>
        <member name="M:Kingo.MicroServices.Constraint.IsNeverValid``1(System.String)">
            <summary>
            Returns a new constraint that declares any value as invalid.
            </summary>
            <typeparam name="TValue">Type of value to check.</typeparam>
            <param name="errorMessageFormat">
            The error message that will be returned in formatted form when the constraint's
            <see cref="M:Kingo.MicroServices.IConstraint.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)"/> method is called.
            If not specified, a default error message is used.
            </param>
            <returns>
            A constraint that is always returns a validation error.
            </returns>
        </member>
        <member name="T:Kingo.MicroServices.Constraint`1">
            <summary>
            Serves as a base-class for all constraints that support validation of a specific type.
            </summary>
            <typeparam name="TValue">The supported type.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.Constraint`1.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Constraint`1.IsValid(`0,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the specified <paramref name="value"/> and returns the result.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">Context of the value to validate.</param>
            <returns>
            <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success"/> if <paramref name="value"/> is valid; otherwise
            it will return a result with the appropriate error message.
            </returns>
        </member>
        <member name="T:Kingo.MicroServices.ConstraintExtensions">
            <summary>
            Contains extension methods for <see cref="T:Kingo.MicroServices.IConstraint"/> instances.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.ConstraintExtensions.And``1(Kingo.MicroServices.IConstraint,System.Func{``0,System.ComponentModel.DataAnnotations.ValidationContext,System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Creates and returns a new constraints that checks if a value satisfies
            both this constraint and the specified <paramref name="constraint"/>.
            </summary>
            <param name="thisConstraint">First constraint to check.</param>
            <param name="constraint">Second constraint to check.</param>
            <returns>
            A new constraint that represents the logical AND between this and the specified <paramref name="constraint"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.ConstraintExtensions.Or``1(Kingo.MicroServices.IConstraint,System.Func{``0,System.ComponentModel.DataAnnotations.ValidationContext,System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Creates and returns a new constraints that checks if a value satisfies
            either this constraint or the specified <paramref name="constraint"/>.
            </summary>
            <param name="thisConstraint">First constraint to check.</param>
            <param name="constraint">Second constraint to check.</param>
            <returns>
            A new constraint that represents the logical OR between this and the specified <paramref name="constraint"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.ConstraintExtensions.IsNotValid(Kingo.MicroServices.IConstraint,System.Object,System.ComponentModel.DataAnnotations.ValidationResult@)">
            <summary>
            Validates the specified <paramref name="value"/> and returns whether or not the value was invalid.
            </summary>
            <param name="thisConstraint">The constraint to check.</param>
            <param name="value">The value to validate.</param>        
            <param name="result">
            <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success"/> if <paramref name="value"/> is valid; otherwise
            it will be a result with the appropriate error message.
            </param>
            <returns>
            <c>true</c> if the value was not valid; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.MicroServices.ConstraintExtensions.IsNotValid(Kingo.MicroServices.IConstraint,System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.ComponentModel.DataAnnotations.ValidationResult@)">
            <summary>
            Validates the specified <paramref name="value"/> and returns whether or not the value was invalid.
            </summary>
            <param name="thisConstraint">The constraint to check.</param>
            <param name="value">The value to validate.</param>
            <param name="validationContext">Context of the value that is being validated.</param>
            <param name="result">
            <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success"/> if <paramref name="value"/> is valid; otherwise
            it will be a result with the appropriate error message.
            </param>
            <returns>
            <c>true</c> if the value was not valid; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.MicroServices.ConstraintExtensions.IsValid(Kingo.MicroServices.IConstraint,System.Object)">
            <summary>
            Validates the specified <paramref name="value"/> and returns the validation-result.        
            </summary>
            <param name="thisConstraint">The constraint to check.</param>
            <param name="value">The value to validate.</param>        
            <returns>
            <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success"/> if <paramref name="value"/> is valid; otherwise
            it will return a result with the appropriate error message.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is not an instance of the expected type.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.DataContract">
            <summary>
            Provides a base-implementation of the <see cref="T:Kingo.MicroServices.IDataContract"/> interface.
            </summary>    
        </member>
        <member name="M:Kingo.MicroServices.DataContract.TryUpdateToNextVersion(Kingo.MicroServices.IDataContract@)">
            <summary>
            Attempts to update this data contract to the next version. By default, this
            method returns <c>false</c>.
            </summary>
            <param name="nextVersion">
            If this method returns <c>true</c>, this parameter will refer to the next version;
            otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if a next version exists and was assigned to <paramref name="nextVersion"/>;
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:Kingo.MicroServices.DataContractExtensions">
            <summary>
            Contains extension methods for objects that implement the <see cref="T:Kingo.MicroServices.IDataContract" /> interface.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.DataContractExtensions.UpdateToLatestVersion``1(Kingo.MicroServices.IDataContract)">
            <summary>
            Updates the specified <paramref name="dataContract"/> to the latest available version and casts
            the result to an instance of <typeparamref name="TDataContract"/>.
            </summary>
            <typeparam name="TDataContract">Expected type of the latest version.</typeparam>
            <param name="dataContract">The contract to update.</param>
            <returns>The latest available version.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dataContract"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.DataContractExtensions.UpdateToLatestVersion(Kingo.MicroServices.IDataContract)">
            <summary>
            Updates the specified <paramref name="dataContract"/> to the latest available version.
            </summary>
            <param name="dataContract">The contract to update.</param>
            <returns>The latest available version.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dataContract"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.DataContractUpdateFailedException">
            <summary>
            This exception is thrown when an attempt to update a <see cref="T:Kingo.MicroServices.IDataContract"/> to its latest
            version fails for some reason.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.DataContractUpdateFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.DataContractUpdateFailedException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Kingo.MicroServices.DataContractUpdateFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.DataContractUpdateFailedException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The cause of this exception.</param>
        </member>
        <member name="T:Kingo.MicroServices.DelegateConstraint`1">
            <summary>
            Represents a constraint that is implemented through a delegate.
            </summary>
            <typeparam name="TValue">Type of value that can be validated by this constraint.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.DelegateConstraint`1.#ctor(System.Func{`0,System.ComponentModel.DataAnnotations.ValidationContext,System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.DelegateConstraint`1" /> class.
            </summary>
            <param name="constraint">
            Delegate that implements the validation logic.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.DelegateConstraint`1.IsValid(`0,System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.IConstraint">
            <summary>
            Represents a constraint that can be used to validate a specific value.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IConstraint.And(Kingo.MicroServices.IConstraint)">
            <summary>
            Creates and returns a new constraints that checks if a value satisfies
            both this constraint and the specified <paramref name="constraint"/>.
            </summary>
            <param name="constraint">Another constraint.</param>
            <returns>
            A new constraint that represents the logical AND between this and the specified <paramref name="constraint"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.IConstraint.Or(Kingo.MicroServices.IConstraint)">
            <summary>
            Creates and returns a new constraints that checks if a value satisfies
            either this constraint or the specified <paramref name="constraint"/>.
            </summary>
            <param name="constraint">Another constraint.</param>
            <returns>
            A new constraint that represents the logical OR between this and the specified <paramref name="constraint"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.IConstraint.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the specified <paramref name="value"/> and returns the validation-result.        
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">Context of the value that is being validated.</param>
            <returns>
            <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success"/> if <paramref name="value"/> is valid; otherwise
            it will return a result with the appropriate error message.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> or <paramref name="validationContext"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is not an instance of the expected type.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.IDataContract">
            <summary>
            When implemented by a class, represents a data transfer object.
            </summary>    
        </member>
        <member name="M:Kingo.MicroServices.IDataContract.TryUpdateToNextVersion(Kingo.MicroServices.IDataContract@)">
            <summary>
            Attempts to update this data contract to the next version.
            </summary>
            <param name="nextVersion">
            If this method returns <c>true</c>, this parameter will refer to the next version;
            otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if a next version exists and was assigned to <paramref name="nextVersion"/>;
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:Kingo.MicroServices.IOrConstraint">
            <summary>
            When implemented by a class, represents a composite constraint that represents a logica OR
            of several other constraints.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IOrConstraint.CombineErrors(System.Func{System.Collections.Generic.IEnumerable{System.String},System.Object,System.String})">
            <summary>
            Instructs the constraint to combine the error messages of all failed child-constraints
            into one single error message with the specified <paramref name="mergeFunction"/>.
            </summary>
            <param name="mergeFunction">
            The function that will be used by this constraint to merge all error messages of the child-
            constraints into a single error message. The function also receives the value that was
            validated by the constraint.
            </param>
            <returns>The new constraint.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="mergeFunction"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.ObjectExtensions">
            <summary>
            Contains extension-methods for every object.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.ObjectExtensions.IsNotValid(System.Object,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult}@,System.IServiceProvider)">
            <summary>
            Determines whether or not the specified <paramref name="instance"/> is valid, and provides all validation errors
            if it's not.
            </summary>
            <param name="instance">The message to validate.</param>
            <param name="results">
            If this instance is not valid, this collection will contain all validation-errors; will be <c>null</c> otherwise.
            </param>
            <param name="serviceProvider">
            Optional service provider that can be used to obtain services for validating this instance.
            </param>        
            <returns><c>true</c> if the instance is not valid; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="instance"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.OrConstraint.Or(Kingo.MicroServices.IConstraint)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.ValidatableObject">
            <summary>
            Represents a data contract that can be validated.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.ValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates all constraints that are not declared as a <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />.
            </summary>
            <param name="validationContext">The context of this validation-operation.</param>
            <returns>A collection of validation-errors.</returns>
        </member>
        <member name="M:Kingo.MicroServices.ValidatableObject.ValidateChildMembers(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates all the constraints of child members. 
            </summary>
            <param name="validationContext">The context of this validation-operation.</param>
            <returns>A collection of validation-errors, if any.</returns>
        </member>
        <member name="M:Kingo.MicroServices.ValidatableObject.NewValidationError(System.String,System.String[])">
            <summary>
            Creates and returns a new <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> with a specific error message.
            </summary>
            <param name="errorMessage">Error message describing the validation error.</param>
            <param name="memberNames">Names of the members that are considered invalid.</param>
            <returns>A new <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> that represents the validation error.</returns>
        </member>
        <member name="T:Kingo.MicroServices.ValidationConstraintAttribute">
            <summary>
            Represents a validation-attribute that is implemented through a set of <see cref="T:Kingo.MicroServices.IConstraint">constraints</see>.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.ValidationConstraintAttribute.Constraint">
            <summary>
            When implemented by a class, returns the constraint
            that will carry out the validation of (non-null) values.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.ValidationConstraintAttribute.All(Kingo.MicroServices.IConstraint[])">
            <summary>
            Creates and returns a new constraint that checks if all specified <paramref name="constraints"/>
            are satisfied by a specific value.
            </summary>
            <param name="constraints">The constraints to check.</param>
            <returns>A new constraint that represents a logical AND-operation for all specified <paramref name="constraints"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraints"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.ValidationConstraintAttribute.All(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IConstraint})">
            <summary>
            Creates and returns a new constraint that checks if all specified <paramref name="constraints"/>
            are satisfied by a specific value.
            </summary>
            <param name="constraints">The constraints to check.</param>
            <returns>A new constraint that represents a logical AND-operation for all specified <paramref name="constraints"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraints"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.ValidationConstraintAttribute.Any(Kingo.MicroServices.IConstraint[])">
            <summary>
            Creates and returns a new constraint that checks if any of the specified <paramref name="constraints"/>
            are satisfied by a specific value.
            </summary>
            <param name="constraints">The constraints to check.</param>
            <returns>A new constraint that represents a logical OR-operation for all specified <paramref name="constraints"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraints"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.ValidationConstraintAttribute.Any(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IConstraint})">
            <summary>
            Creates and returns a new constraint that checks if any of the specified <paramref name="constraints"/>
            are satisfied by a specific value.
            </summary>
            <param name="constraints">The constraints to check.</param>
            <returns>A new constraint that represents a logical OR-operation for all specified <paramref name="constraints"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constraints"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.ValidationConstraintAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the specified <paramref name="value"/> and returns the validation-result.
            This <paramref name="value"/> is <c>null</c> and
            if so, whether that value can be accepted. Otherwise, it will invoke the
            constraint of this attribute.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">Context of the value that is being validated.</param>
            <returns>
            <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success"/> if <paramref name="value"/> is <c>null</c> or if it is valid;
            otherwise it will return a result with the appropriate error message.
            </returns>
        </member>
    </members>
</doc>
