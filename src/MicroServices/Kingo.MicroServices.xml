<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kingo.MicroServices</name>
    </assembly>
    <members>
        <member name="T:Kingo.Clocks.Clock">
            <summary>
            Provides a basic implementation of the <see cref="T:Kingo.Clocks.IClock" /> interface.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.Clock.LocalTime">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.Clock.LocalDate">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.Clock.LocalDateAndTime">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.Clock.UtcTime">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.Clock.UtcDate">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.Clock.UtcDateAndTime">
            <inheritdoc />
        </member>
        <member name="F:Kingo.Clocks.Clock.SystemClock">
            <summary>
            Returns the default clock of this system.
            </summary>
        </member>
        <member name="P:Kingo.Clocks.Clock.Current">
            <summary>
            Returns the clock associated to the current thread.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.Clock.OverrideThreadLocal(System.Func{System.DateTimeOffset})">
            <summary>
            Sets the current clock that is accessible by the current thread through <see cref="P:Kingo.Clocks.Clock.Current" />
            only as long as the scope is active.
            </summary>
            <param name="timeFactory">The delegate that is used to obtain the UTC date and time.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="timeFactory"/> is <c>null</c>.
            </exception>                       
        </member>
        <member name="M:Kingo.Clocks.Clock.OverrideThreadLocal(System.DateTimeOffset)">
            <summary>
            Sets the current clock that is accessible by the current thread through <see cref="P:Kingo.Clocks.Clock.Current" />
            only as long as the scope is active.
            </summary>
            <param name="startTime">The time that will serve as the start time of the scope.</param>
            <returns>The scope that is to be disposed when ended.</returns>
        </member>
        <member name="M:Kingo.Clocks.Clock.OverrideThreadLocal(Kingo.Clocks.IClock)">
            <summary>
            Sets the current clock that is accessible by the current thread through <see cref="P:Kingo.Clocks.Clock.Current" />
            only as long as the scope is active.
            </summary>
            <param name="clock">The clock to set.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="clock"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.Clocks.Clock.OverrideAsyncLocal(System.Func{System.DateTimeOffset})">
            <summary>
            Sets the current value that is accessible by all threads that share the same logical call context
            through <see cref="P:Kingo.Clocks.Clock.Current" /> as long as the scope is active.
            </summary>
            <param name="timeFactory">The delegate that is used to obtain the UTC date and time.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="timeFactory"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The call is made inside a thread local scope.
            </exception>
        </member>
        <member name="M:Kingo.Clocks.Clock.OverrideAsyncLocal(System.DateTimeOffset)">
            <summary>
            Sets the current value that is accessible by all threads that share the same logical call context
            through <see cref="P:Kingo.Clocks.Clock.Current" /> as long as the scope is active.
            </summary>
            <param name="startTime">The time that will serve as the start time of the scope.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.InvalidOperationException">
            The call is made inside a thread local scope.
            </exception>
        </member>
        <member name="M:Kingo.Clocks.Clock.OverrideAsyncLocal(Kingo.Clocks.IClock)">
            <summary>
            Sets the current value that is accessible by all threads that share the same logical call context
            through <see cref="P:Kingo.Clocks.Clock.Current" /> as long as the scope is active.
            </summary>
            <param name="clock">The clock to set.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="clock"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The call is made inside a thread local scope.
            </exception>
        </member>
        <member name="M:Kingo.Clocks.Clock.Override(System.Func{System.DateTimeOffset})">
            <summary>
            Sets the current value that is accessible by all threads
            through <see cref="P:Kingo.Clocks.Clock.Current" /> as long as the scope is active.
            </summary>
            <param name="timeFactory">The delegate that is used to obtain the UTC date and time.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="timeFactory"/> is <c>null</c>.
            </exception>        
            <exception cref="T:System.InvalidOperationException">
            The call is made inside an async local or thread local scope.
            </exception>      
        </member>
        <member name="M:Kingo.Clocks.Clock.Override(System.DateTimeOffset)">
            <summary>
            Sets the current value that is accessible by all threads
            through <see cref="P:Kingo.Clocks.Clock.Current" /> as long as the scope is active.
            </summary>
            <param name="startTime">The time that will serve as the start time of the scope.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.InvalidOperationException">
            The call is made inside an async local or thread local scope.
            </exception> 
        </member>
        <member name="M:Kingo.Clocks.Clock.Override(Kingo.Clocks.IClock)">
            <summary>
            Sets the current value that is accessible by all threads
            through <see cref="P:Kingo.Clocks.Clock.Current" /> as long as the scope is active.
            </summary>
            <param name="clock">The clock to set.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="clock"/> is <c>null</c>.
            </exception>  
            <exception cref="T:System.InvalidOperationException">
            The call is made inside an async local or thread local scope.
            </exception>      
        </member>
        <member name="T:Kingo.Clocks.ClockExtensions">
            <summary>
            Contains extension methods for the <see cref="T:Kingo.Clocks.IClock" /> interface.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.ClockExtensions.Shift(Kingo.Clocks.IClock,System.TimeSpan)">
            <summary>
            Returns a clock that shows the time of the current clock, plus the given offset.
            </summary>
            <param name="clock">A clock.</param>
            <param name="offset">The offset to add to the time of the current clock.</param>
            <returns>A clock that shows the time of the current clock, plus the given offset.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="clock"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Clocks.DelegateClock">
            <summary>
            Represents a clock that implemented by a delegate.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.DelegateClock.#ctor(System.Func{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Clocks.DelegateClock" /> class.
            </summary>
            <param name="timeFactory">The delegate that is used to obtain the UTC date and time.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="timeFactory"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Clocks.DelegateClock.UtcDateAndTime">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Clocks.HighResolutionClock">
            <summary>
            Represents a clock that uses a <see cref="T:System.Diagnostics.Stopwatch" /> in combination with
            the system clock to simulate a high resolution system time clock.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.HighResolutionClock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.HighResolutionClock.UtcDateAndTime">
            <inheritdoc />
        </member>
        <member name="F:Kingo.Clocks.HighResolutionClock.DefaultSynchronizationInterval">
            <summary>
            The default synchronization interval used when not explicitly specified is 10 seconds.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.HighResolutionClock.StartNew">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Clocks.HighResolutionClock" /> that is counting from the current date and time.
            </summary>        
            <returns>A new <see cref="T:Kingo.Clocks.HighResolutionClock" />.</returns>
        </member>
        <member name="M:Kingo.Clocks.HighResolutionClock.StartNew(Kingo.Clocks.IClock)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Clocks.HighResolutionClock" /> based on the specified <paramref name="referenceClock"/>.
            </summary> 
            <param name="referenceClock">
            The clock that will be used as a reference for this clock.
            </param>        
            <returns>A new <see cref="T:Kingo.Clocks.HighResolutionClock" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="referenceClock "/> is <c>null</c>.
            </exception>         
        </member>
        <member name="M:Kingo.Clocks.HighResolutionClock.StartNew(Kingo.Clocks.IClock,System.TimeSpan)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Clocks.HighResolutionClock" /> based on the specified <paramref name="referenceClock"/>.
            </summary> 
            <param name="referenceClock">
            The clock that will be used as a reference for this clock.
            </param>
            <param name="synchronizationInterval">
            The interval that is used to periodically synchronize this clock with the specified <paramref name="referenceClock"/>.
            A value of <see cref="F:System.TimeSpan.Zero" /> means this clock is never synchronized.
            </param>
            <returns>A new <see cref="T:Kingo.Clocks.HighResolutionClock" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="referenceClock "/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="synchronizationInterval"/> is a negative <see cref="T:System.TimeSpan" />.
            </exception>               
        </member>
        <member name="T:Kingo.Clocks.IClock">
            <summary>
            When implemented by a class, represents a service that provides the current date and time.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.IClock.LocalTime">
            <summary>
            Returns the time of the day in local time.
            </summary>
            <returns>The time of the day in local time.</returns>
        </member>
        <member name="M:Kingo.Clocks.IClock.LocalDate">
            <summary>
            Returns the date in local time.
            </summary>
            <returns>The date in local time.</returns>
        </member>
        <member name="M:Kingo.Clocks.IClock.LocalDateAndTime">
            <summary>
            Returns the date and time in local time.
            </summary>
            <returns>The date and time in local time.</returns>
        </member>
        <member name="M:Kingo.Clocks.IClock.UtcTime">
            <summary>
            Returns the time of the day in UTC-time.
            </summary>
            <returns>Time of the day in UTC-time.</returns>
        </member>
        <member name="M:Kingo.Clocks.IClock.UtcDate">
            <summary>
            Returns the date in UTC-time.
            </summary>
            <returns>Date in UTC-time.</returns>
        </member>
        <member name="M:Kingo.Clocks.IClock.UtcDateAndTime">
            <summary>
            Returns the date and time in UTC-time.
            </summary>
            <returns>Date and time in UTC-time.</returns>
        </member>
        <member name="T:Kingo.Clocks.StopwatchClock">
            <summary>
            This clock represents a stopwatch that starts at a specified date and/or time and can be started and stopped.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.StopwatchClock.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Clocks.StopwatchClock" /> class.
            </summary>
            <param name="startTime">The initial date and time.</param>
        </member>
        <member name="P:Kingo.Clocks.StopwatchClock.IsRunning">
            <summary>
            Indicates whether or not this clock is running.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.StopwatchClock.Start">
            <summary>
            Starts the clock.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.StopwatchClock.Stop">
            <summary>
            Stops the clock.
            </summary>
        </member>
        <member name="P:Kingo.Clocks.StopwatchClock.ElapsedTime">
            <summary>
            Returns the total amount of time the stopwatch has been running.
            </summary>
        </member>
        <member name="M:Kingo.Clocks.StopwatchClock.UtcDateAndTime">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.StopwatchClock.StartNew">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Clocks.StopwatchClock" /> that is started immediately.
            </summary>        
            <returns>A new <see cref="T:Kingo.Clocks.StopwatchClock" />.</returns>
        </member>
        <member name="M:Kingo.Clocks.StopwatchClock.StartNew(System.DateTimeOffset)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.Clocks.StopwatchClock" /> that is started immediately.
            </summary>    
            <param name="startTime">The initial date and time.</param>    
            <returns>A new <see cref="T:Kingo.Clocks.StopwatchClock" />.</returns>
        </member>
        <member name="M:Kingo.Clocks.SystemClock.LocalDateAndTime">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Clocks.SystemClock.UtcDateAndTime">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Collections.Generic.CollectionExtensions">
            <summary>
            Contains extension methods and helper methods for collection types.
            </summary>
        </member>
        <member name="M:Kingo.Collections.Generic.CollectionExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection where all <c>null</c> values have been removed.
            </summary>
            <typeparam name="T">Type of the items in the collection.</typeparam>
            <param name="collection">A collection of items.</param>
            <returns>A subset of the specified <paramref name="collection"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Collections.Generic.CollectionExtensions.TryGetItem``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0@)">
            <summary>
            Attempts to retrieve the <paramref name="element"/> at the specified <paramref name="index"/>.
            </summary>
            <typeparam name="TValue">Type of the element.</typeparam>
            <param name="collection">The collection to get the element from.</param>
            <param name="index">The index of the element.</param>
            <param name="element">
            If this method returns <c>true</c>, this parameter will refer to the element at the specified <paramref name="index"/>;
            otherwise, it will be set to the default value of <typeparamref name="TValue"/>.
            </param>
            <returns>
            <c>true</c> if the collection contains an element at the specified <paramref name="index"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.Collections.Generic.CollectionExtensions.TryGetFirstItem``1(System.Collections.Generic.IEnumerable{``0},``0@)">
            <summary>
            Attempts to retrieve the first element of the specified collection.
            </summary>
            <typeparam name="TValue">Type of the element.</typeparam>
            <param name="collection">The collection to get the element from.</param>
            <param name="element">
            If this method returns <c>true</c>, this parameter will refer to the first element of the specified <paramref name="collection"/>;
            otherwise, it will be set to the default value of <typeparamref name="TValue"/>.
            </param>
            <returns><c>true</c> if <paramref name="collection"/> contains any elements; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is <c>null</c>.
            </exception>  
        </member>
        <member name="M:Kingo.Collections.Generic.CollectionExtensions.TryGetFirstItem``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0@)">
            <summary>
            Attempts to retrieve the first element of the specified collection that matches the specified <paramref name="predicate"/>. If
            <paramref name="predicate"/> is <c>null</c>, the first element of the collection will be returned.
            </summary>
            <typeparam name="TValue">Type of the element.</typeparam>
            <param name="collection">The collection to get the element from.</param>
            <param name="predicate">The predicate that will be used to return the correct element.</param>
            <param name="element">
            If this method returns <c>true</c>, this parameter will refer to the first element of the specified <paramref name="collection"/>;
            otherwise, it will be set to the default value of <typeparamref name="TValue"/>.
            </param>
            <returns>
            <c>true</c> if <paramref name="collection"/> contains any elements that matches the specified <paramref name="predicate"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is <c>null</c>.
            </exception>  
        </member>
        <member name="T:Kingo.Collections.Generic.EmptyList`1">
            <summary>
            Represents an empty list.
            </summary>
            <typeparam name="T">Type of the items in the list.</typeparam>
        </member>
        <member name="P:Kingo.Collections.Generic.EmptyList`1.Count">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Collections.Generic.EmptyList`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Collections.Generic.EmptyList`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Collections.Generic.ReadOnlyList`1">
            <summary>
            Provides a base class implementation for all classes that implement the <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> interface.
            </summary>
            <typeparam name="T">Type of the items in the list.</typeparam>
        </member>
        <member name="P:Kingo.Collections.Generic.ReadOnlyList`1.Count">
            <inheritdoc />
        </member>
        <member name="P:Kingo.Collections.Generic.ReadOnlyList`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Collections.Generic.ReadOnlyList`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Kingo.Comparable">
            <summary>
            Contains some helper methods for types implementing the <see cref="T:System.IComparable`1" /> interface.
            </summary>
        </member>
        <member name="F:Kingo.Comparable.Less">
            <summary>
            Value indicating that left is less than right.
            </summary>
        </member>
        <member name="F:Kingo.Comparable.Equal">
            <summary>
            Value indicating that left is equal to right.
            </summary>
        </member>
        <member name="F:Kingo.Comparable.Greater">
            <summary>
            Value indicating that left is greater than right.
            </summary>
        </member>
        <member name="M:Kingo.Comparable.CompareValues``1(``0,System.Object)">
            <summary>
            Determines whether <paramref name="instance"/> is less than, equal to or greater than <paramref name="obj"/>.
            </summary>
            <typeparam name="T">Type of the objects to compare.</typeparam>
            <param name="instance">The typed instance.</param>
            <param name="obj">The untyped instance.</param>
            <returns>
            A negative value if <paramref name="instance"/> is less than <paramref name="obj"/>,
            zero if <paramref name="instance"/> is equal to <paramref name="obj"/>, or
            A positive value if <paramref name="instance"/> is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="obj"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> is not of type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Kingo.Comparable.CompareReferences``1(``0,System.Object)">
            <summary>
            Determines whether <paramref name="instance"/> is less than, equal to or greater than <paramref name="obj"/>.
            </summary>
            <typeparam name="T">Type of the objects to compare.</typeparam>
            <param name="instance">The typed instance.</param>
            <param name="obj">The untyped instance.</param>
            <returns>
            A negative value if <paramref name="instance"/> is less than <paramref name="obj"/>,
            zero if <paramref name="instance"/> is equal to <paramref name="obj"/>, or
            A positive value if <paramref name="instance"/> is greater than <paramref name="obj"/>.
            </returns>        
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> is not of type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Kingo.Comparable.IsLessThan``1(``0,``0)">
            <summary>
            Determines whether <paramref name="left"/> is less than <paramref name="right"/>.
            </summary>
            <typeparam name="T">Type of the objects to compare.</typeparam>
            <param name="left">Left instance.</param>
            <param name="right">Right instance.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Comparable.IsLessThanOrEqualTo``1(``0,``0)">
            <summary>
            Determines whether <paramref name="left"/> is less than or equal to <paramref name="right"/>.
            </summary>
            <typeparam name="T">Type of the objects to compare.</typeparam>
            <param name="left">Left instance.</param>
            <param name="right">Right instance.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Comparable.IsGreaterThan``1(``0,``0)">
            <summary>
            Determines whether <paramref name="left"/> is greater than <paramref name="right"/>.
            </summary>
            <typeparam name="T">Type of the objects to compare.</typeparam>
            <param name="left">Left instance.</param>
            <param name="right">Right instance.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Comparable.IsGreaterThanOrEqualTo``1(``0,``0)">
            <summary>
            Determines whether <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
            </summary>
            <typeparam name="T">Type of the objects to compare.</typeparam>
            <param name="left">Left instance.</param>
            <param name="right">Right instance.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.Comparable.Compare``1(``0,``0)">
            <summary>
            Determines whether <paramref name="left"/> is less than, equal to or greater than <paramref name="right"/>.
            </summary>
            <typeparam name="T">Type of the rightects to compare.</typeparam>
            <param name="left">Left instance.</param>
            <param name="right">Right instance.</param>
            <returns>
            A negative value if <paramref name="left"/> is less than <paramref name="right"/>,
            zero if <paramref name="left"/> is equal to <paramref name="right"/>, or
            a positive value if <paramref name="left"/> is greater than <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Kingo.Comparable.NewUnexpectedTypeException(System.Type,System.Type)">
            <summary>
            Creates and returns a new <see cref="T:System.ArgumentException" /> indicating that a certain instance could not be compared
            to another instance because their types didn't match.
            </summary>
            <param name="instanceType">Type of the main instance.</param>
            <param name="otherType">Type of the instance to compare.</param>
            <returns>A new <see cref="T:System.ArgumentException" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="instanceType"/> or <paramref name="otherType"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.DateTimeSpan">
            <summary>
            Represents a timespan with a specific start- and end date and/or time.
            </summary>
        </member>
        <member name="F:Kingo.DateTimeSpan.MaxValue">
            <summary>
            Represents the maximum span of time (from <see cref="F:System.DateTimeOffset.MinValue"/> to <see cref="F:System.DateTimeOffset.MaxValue"/>).
            </summary>
        </member>
        <member name="M:Kingo.DateTimeSpan.#ctor(System.DateTime,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.DateTimeSpan" /> class.
            </summary>
            <param name="start">Start of this time span.</param>
            <param name="duration">Duration of this time span.</param>        
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="duration"/> represents a negative time span, or the end of the resulting time span
            exceeds <see cref="F:System.DateTimeOffset.MaxValue" />.
            </exception>
        </member>
        <member name="M:Kingo.DateTimeSpan.#ctor(System.DateTimeOffset,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.DateTimeSpan" /> class.
            </summary>
            <param name="start">Start of this time span.</param>
            <param name="duration">Duration of this time span.</param>        
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="duration"/> represents a negative time span, or the end of the resulting time span
            exceeds <see cref="F:System.DateTimeOffset.MaxValue" />.
            </exception>
        </member>
        <member name="M:Kingo.DateTimeSpan.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.DateTimeSpan" /> class. If <paramref name="start"/> and <paramref name="end"/>
            are in a different time-zone, <paramref name="end"/> will be adjusted to the time-zone of <paramref name="start"/>.
            </summary>
            <param name="start">Start of this time span.</param>
            <param name="end">End of this time span.</param>        
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> represents a moment in time after <paramref name="end"/>.
            </exception>
        </member>
        <member name="M:Kingo.DateTimeSpan.#ctor(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.DateTimeSpan" /> class. If <paramref name="start"/> and <paramref name="end"/>
            are in a different time-zone, <paramref name="end"/> will be adjusted to the time-zone of <paramref name="start"/>.
            </summary>
            <param name="start">Start of this time span.</param>
            <param name="end">End of this time span.</param>        
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> represents a moment in time after <paramref name="end"/>.
            </exception>
        </member>
        <member name="P:Kingo.DateTimeSpan.Start">
            <summary>
            Start of this time span.
            </summary>
        </member>
        <member name="P:Kingo.DateTimeSpan.End">
            <summary>
            End of this time span.
            </summary>
        </member>
        <member name="P:Kingo.DateTimeSpan.EndInclusive">
            <summary>
            End of this time span in its inclusive form.
            </summary>
        </member>
        <member name="M:Kingo.DateTimeSpan.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.DateTimeSpan.Equals(Kingo.DateTimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.DateTimeSpan.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Kingo.DateTimeSpan.op_Equality(Kingo.DateTimeSpan,Kingo.DateTimeSpan)">
            <summary>Determines whether <paramref name="left" /> is equal to <paramref name="right" />.</summary>
            <param name="left">Left instance</param>
            <param name="right">Right instance</param>
            <returns>
            <c>true</c> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.DateTimeSpan.op_Inequality(Kingo.DateTimeSpan,Kingo.DateTimeSpan)">
            <summary>Determines whether <paramref name="left" /> is not equal to <paramref name="right" />.</summary>
            <param name="left">Left instance</param>
            <param name="right">Right instance</param>
            <returns>
            <c>true</c> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:Kingo.DateTimeSpan.Duration">
            <summary>
            Returns the duration of this time span.
            </summary>
        </member>
        <member name="M:Kingo.DateTimeSpan.op_Implicit(Kingo.DateTimeSpan)~System.TimeSpan">
            <summary>
            Implicitly converts a <see cref="T:Kingo.DateTimeSpan" /> to a <see cref="T:System.TimeSpan" />, representing its duration.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Kingo.DateTimeSpan.Shift(System.TimeSpan)">
            <summary>
            Shifts the entire time span forwards or backwards in time, depending on the specified <paramref name="shift"/> value.
            </summary>
            <param name="shift">The amount of time to shift this time span.</param>
            <returns>The resulting time span.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="shift"/> is not valid because the resulting time span would not be a valid time span.
            </exception>
        </member>
        <member name="M:Kingo.DateTimeSpan.ShiftStart(System.TimeSpan)">
            <summary>
            Shifts the start of this time span forwards or backwards in time, depending on the specified <paramref name="shift"/> value.
            </summary>
            <param name="shift">The amount of time to shift the start value.</param>
            <returns>The resulting time span.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="shift"/> is not valid because the resulting time span would not be a valid time span.
            </exception>
        </member>
        <member name="M:Kingo.DateTimeSpan.ShiftStart(System.DateTimeOffset)">
            <summary>
            Shifts the start of this time span forwards or backwards in time, depending on the specified <paramref name="newStart"/> value.
            </summary>
            <param name="newStart">The new start value.</param>
            <returns>The resulting time span, with the offset equal to the current time span offset.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="newStart"/> is not valid because the resulting time span would not be a valid time span.
            </exception>
        </member>
        <member name="M:Kingo.DateTimeSpan.ShiftEnd(System.TimeSpan)">
            <summary>
            Shifts the end of this time span forwards or backwards in time, depending on the specified <paramref name="shift"/> value.
            </summary>
            <param name="shift">The amount of time to shift the end value.</param>
            <returns>The resulting time span.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="shift"/> is not valid because the resulting time span would not be a valid time span.
            </exception>
        </member>
        <member name="M:Kingo.DateTimeSpan.ShiftEnd(System.DateTimeOffset)">
            <summary>
            Shifts the end of this time span forwards or backwards in time, depending on the specified <paramref name="newEnd"/> value.
            </summary>
            <param name="newEnd">The new end value.</param>
            <returns>The resulting time span, with the offset equal to the current time span offset.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="newEnd"/> is not valid because the resulting time span would not be a valid time span.
            </exception>
        </member>
        <member name="M:Kingo.DateTimeSpan.ToLocalTime">
            <summary>
            Creates and returns a time span that is identical to this instance, but is represented in times of the currently local time zone.
            </summary>
            <returns>A new <see cref="T:Kingo.DateTimeSpan"/> instance.</returns>
        </member>
        <member name="M:Kingo.DateTimeSpan.ToUniveralTime">
            <summary>
            Creates and returns a time span that is identical to this instance, but is represented in UTC time.
            </summary>
            <returns>A new <see cref="T:Kingo.DateTimeSpan"/> instance.</returns>
        </member>
        <member name="M:Kingo.DateTimeSpan.ToOffset(System.TimeSpan)">
            <summary>
            Creates and returns a time span that is identical to this instance, but is represented in times with the specified <paramref name="offset"/>.
            </summary>
            <returns>A new <see cref="T:Kingo.DateTimeSpan"/> instance.</returns>
        </member>
        <member name="M:Kingo.DateTimeSpan.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.DateTimeSpan.ToString(System.String)">
            <summary>
            Formats the current time span in the specified format.
            </summary>
            <param name="format">
            The format string used to format the times of this time span.
            </param>
            <returns>A formatted representation of this time span.</returns>
        </member>
        <member name="M:Kingo.DateTimeSpan.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.DateTimeSpan.Contains(System.DateTime)">
            <summary>
            Determines whether or not the specified <paramref name="value"/> is part of this time span.
            </summary>
            <param name="value">The value to check.</param>        
            <returns><c>true</c> if <paramref name="value"/> is part of this time span; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.DateTimeSpan.Contains(System.DateTimeOffset)">
            <summary>
            Determines whether or not the specified <paramref name="value"/> is part of this time span.
            </summary>
            <param name="value">The value to check.</param>        
            <returns><c>true</c> if <paramref name="value"/> is part of this time span; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.DateTimeSpan.Enumerate(System.TimeSpan)">
            <summary>
            Returns all particular points in time that are part of this time span, where each point in time is separated by the given <paramref name="stepSize" />.
            If <paramref name="stepSize"/> represents a positive time span, enumeration will begin at <see cref="P:Kingo.DateTimeSpan.Start" />, and all points in time will be in
            increasing chronological order. If <paramref name="stepSize" /> represents a negative time span, enumeration will begin at <see cref="P:Kingo.DateTimeSpan.End"/>, and all
            points in time will be in decreasing chronological order.
            </summary>
            <param name="stepSize">The step-size of the enumeration.</param>
            <returns>A lazy initialized collection of points in time.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="stepSize" /> is zero.
            </exception>
        </member>
        <member name="M:Kingo.DateTimeSpan.Split(System.TimeSpan,System.Boolean)">
            <summary>
            Splits this time span into several spans, of which all durations match the specified <paramref name="duration"/>, except
            (possibly) the last span, which will have a duration of the remaining span of time. If <paramref name="duration"/> represents
            a positive time span, enumeration will begin at <see cref="P:Kingo.DateTimeSpan.Start" />, and all spans will be in increasing chronological order.
            If <paramref name="duration" /> represents a negative time span, enumeration will begin at <see cref="P:Kingo.DateTimeSpan.End"/>, and all
            spans will be in decreasing chronological order.
            </summary>
            <param name="duration">The desired duration of each returned span.</param>
            <param name="includeRemainder">
            If <c>true</c>, the last element of the returned collection will be the remainder of the split-operation, which may or may not
            have a duration of less than the specified <paramref name="duration"/>.
            </param>
            <returns>A lazy initialized collection of time spans.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="duration"/> is zero.
            </exception>
        </member>
        <member name="M:Kingo.DateTimeSpan.IntersectsWith(Kingo.DateTimeSpan)">
            <summary>
            Determines whether or not this time span intersects with <paramref name="other"/>.
            </summary>
            <param name="other">Another time span.</param>
            <returns>
            <c>true</c> if this time span intersects with <paramref name="other"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.DateTimeSpan.GetIntersection(Kingo.DateTimeSpan)">
            <summary>
            Creates and returns a time span that represents the intersection of this time span and <paramref name="other"/>, if it exists.
            </summary>
            <param name="other">Another time span.</param>
            <returns>
            The calculated intersection, or <c>null</c> if no intersection exists.
            </returns>
        </member>
        <member name="M:Kingo.DateTimeSpan.TryGetIntersection(Kingo.DateTimeSpan,Kingo.DateTimeSpan@)">
            <summary>
            Creates and returns a time span that represents the intersection of this time span and <paramref name="other"/>, if it exists.
            </summary>
            <param name="other">Another time span.</param>
            <param name="intersection">
            If an intersection exists, this parameter will refer to the calculated intersection.
            </param>
            <returns>
            <c>true</c> if this time span intersects with <paramref name="other"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.DateTimeSpan.GetDifference(Kingo.DateTimeSpan)">
            <summary>
            Returns a collection of time spans that represent the differences or non-intersecting spans between this time span and <paramref name="other"/>.
            The resulting collection may contain zero, one or two spans, depending on if and how this time span intersects with <paramref name="other"/>.
            </summary>
            <param name="other">Another time span.</param>
            <returns>
            The difference between this span and <paramref name="other"/> in the form of a collection of spans with either
            zero, one or two elements.
            </returns>
        </member>
        <member name="M:Kingo.DateTimeSpan.FromYear(System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
            Creates and returns a new time span that represents the specified <paramref name="year"/> in the specified time zone.
            </summary>
            <param name="year">A year.</param>
            <param name="offset">Offset representing the desired time zone.</param>
            <returns>A time span representing the specified <paramref name="year"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="year"/> is a not a valid year.
            </exception>
        </member>
        <member name="M:Kingo.DateTimeSpan.FromMonth(System.Int32,System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
            Creates and returns a new time span that represents the specified <paramref name="month"/> of the specified <paramref name="year"/> in the specified time zone.
            </summary>
            <param name="year">A year.</param>
            <param name="month">A month.</param>
            <param name="offset">Offset representing the desired time zone.</param>
            <returns>A time span representing the specified month>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="year"/> is a not a valid year or <paramref name="month"/> is not a valid month.
            </exception>
        </member>
        <member name="M:Kingo.DateTimeSpan.Today">
            <summary>
            Creates and returns a new time span that represents the current day (in local time).
            </summary>
            <returns>A time span representing today.</returns>
        </member>
        <member name="M:Kingo.DateTimeSpan.FromDay(System.DateTime)">
            <summary>
            Creates and returns a new time span that represents the specified day.
            </summary>
            <param name="day">A particular day.</param>
            <returns>A time span representing the specified <paramref name="day"/>.</returns>        
        </member>
        <member name="M:Kingo.DateTimeSpan.FromDay(System.DateTimeOffset)">
            <summary>
            Creates and returns a new time span that represents the specified day.
            </summary>
            <param name="day">A particular day.</param>
            <returns>A time span representing the specified <paramref name="day"/>.</returns>    
        </member>
        <member name="M:Kingo.DateTimeSpan.FromDay(System.Int32,System.Int32,System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
            Creates and returns a new time span that represents the specified day.
            </summary>
            <param name="year">A year.</param>
            <param name="month">A month.</param>
            <param name="day">A day of the month.</param>
            <param name="offset">Offset representing the desired time zone.</param>
            <returns>A time span that represents the specified day.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="year"/>, <paramref name="month"/> and/or <paramref name="day"/> do not specify a valid day.
            </exception>
        </member>
        <member name="T:Kingo.Disposable">
            <summary>
            Serves as a base-class for disposable objects.
            </summary>
        </member>
        <member name="P:Kingo.Disposable.IsDisposed">
            <summary>
            Indicates whether or not an object has been disposed.
            </summary>
        </member>
        <member name="M:Kingo.Disposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Kingo.Disposable.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">
            Indicates if the method was called by the application explicitly (<c>true</c>), or by the finalizer
            (<c>false</c>).
            </param>
            <remarks>
            If <paramref name="disposing"/> is <c>true</c>, this method will dispose any managed resources immediately.
            Otherwise, only unmanaged resources will be released.
            </remarks>
        </member>
        <member name="M:Kingo.Disposable.NewObjectDisposedException">
            <summary>
            Creates and returns a new <see cref="T:System.ObjectDisposedException" /> indicating this instance has been disposed.
            </summary>
            <returns>A new <see cref="T:System.ObjectDisposedException" />.</returns>
        </member>
        <member name="T:Kingo.EnumOperators`1">
            <summary>
            Contains several generic operators that can be used for Enum types.
            </summary>
            <typeparam name="TEnum">Type of the Enum.</typeparam>
        </member>
        <member name="M:Kingo.EnumOperators`1.AllValuesCombined">
            <summary>
            Returns an Enum value where are values of the Enum are bitwise OR-ed into a single value.
            </summary>
            <returns>A bitwise OR-ed value of all defined values.</returns>
        </member>
        <member name="M:Kingo.EnumOperators`1.AllValues">
            <summary>
            Returns all declared values of an enum.
            </summary>
            <returns>A collection of enum values.</returns>
        </member>
        <member name="M:Kingo.EnumOperators`1.IsDefined(`0,`0)">
            <summary>
            Determines whether or not all bits of <paramref name="value"/> are set in <paramref name="compositeValue"/>.
            </summary>
            <param name="value">The bits to check.</param>
            <param name="compositeValue">The collection of bits that is checked.</param>
            <returns>
            <c>true</c> if all bits of <paramref name="value"/> are set in <paramref name="compositeValue"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.EnumOperators`1.Or(`0,`0)">
            <summary>
            Performs a binary OR-operation on the specified Enum types.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>A value where the bits of <paramref name="x"/> and <paramref name="y"/> have been OR-ed.</returns>        
        </member>
        <member name="M:Kingo.EnumOperators`1.Or(`0,`0,`0[])">
            <summary>
            Performs a binary OR-operation on the specified Enum types.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <param name="values">A collection of Enum values.</param>
            <returns>A value where the bits of the specified <paramref name="values"/> have been OR-ed.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EnumOperators`1.Or(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Performs a binary OR-operation on the specified Enum types.
            </summary>        
            <param name="values">A collection of Enum values.</param>
            <returns>A value where the bits of the specified <paramref name="values"/> have been OR-ed.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EnumOperators`1.And(`0,`0)">
            <summary>
            Performs a binary AND-operation on the specified Enum types.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>A value where the bits of <paramref name="x"/> and <paramref name="y"/> have been AND-ed.</returns>        
        </member>
        <member name="M:Kingo.EnumOperators`1.And(`0,`0,`0[])">
            <summary>
            Performs a binary AND-operation on the specified Enum types.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <param name="values">A collection of Enum values.</param>
            <returns>A value where the bits of the specified <paramref name="values"/> have been AND-ed.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EnumOperators`1.And(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Performs a binary AND-operation on the specified Enum types.
            </summary>        
            <param name="values">A collection of Enum values.</param>
            <returns>A value where the bits of the specified <paramref name="values"/> have been AND-ed.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Equatable">
            <summary>
            Contains some helper methods for types implementing the <see cref="T:System.IEquatable`1" /> interface.
            </summary>
        </member>
        <member name="M:Kingo.Equatable.Equals``1(``0,``0)">
            <summary>
            Determines whether <paramref name="left"/> is equal to <paramref name="right"/>.
            </summary>
            <typeparam name="T">Type of the instances to compare.</typeparam>
            <param name="left">First instance.</param>
            <param name="right">Second instance.</param>
            <returns><c>true</c> if both instances are equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Kingo.EventHandlerExtensions">
            <summary>
            Contains extension-methods for raising events.
            </summary>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.Raise(System.EventHandler,System.Object)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using empty arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sender"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using the specified arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The arguments of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sender"/> or <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using the specified arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The arguments of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sender"/> or <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.Raise``2(``0,System.Object,``1)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using the specified arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The arguments of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sender"/> or <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.RaiseStatic(System.EventHandler)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using empty arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.RaiseStatic(System.EventHandler,System.EventArgs)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using the specified arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>        
            <param name="e">The arguments of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.RaiseStatic``1(System.EventHandler{``0},``0)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using the specified arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>        
            <param name="e">The arguments of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.EventHandlerExtensions.RaiseStatic``1(System.Delegate,``0)">
            <summary>
            Invokes the specified <paramref name="handlers"/>, if not <c>null</c>, using the specified arguments.
            </summary>
            <param name="handlers">The handlers to invoke.</param>        
            <param name="e">The arguments of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.ExceptionExtensions">
            <summary>
            Contains extenion methods for the <see cref="T:System.Exception" /> class.
            </summary>
        </member>
        <member name="M:Kingo.ExceptionExtensions.Rethrow(System.Exception)">
            <summary>
            Rethrows the specified <paramref name="exception"/> without losing its stacktrace.
            </summary>
            <param name="exception">The exception to rethrow.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exception"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.Comparable_IncomparableType">
            <summary>
              Looks up a localized string similar to The specified object of type &apos;{0}&apos; cannot be compared to instance of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.Context_IllegalScopeStarted">
            <summary>
              Looks up a localized string similar to Cannot start this scope because a more restrive scope is still active..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.ContextScope_IncorrectNesting">
            <summary>
              Looks up a localized string similar to The scopes were not nested correctly..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.DataContractExtensions_CircularReference">
            <summary>
              Looks up a localized string similar to Updating instance of type &apos;{0}&apos; to its latest version failed: version of type &apos;{1}&apos; introduced a circular update by returning an instance of type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.DataContractExtensions_InvalidCast">
            <summary>
              Looks up a localized string similar to Updating instance of type &apos;{0}&apos; to its latest version failed: could not convert latest version of type &apos;{1}&apos; to instance of type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.DateTimeSpan_InvalidTimeSpan">
            <summary>
              Looks up a localized string similar to Invalid time span specified: [{0}, {1}]..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.DateTimeSpan_TimeSpanZeroNotAllowed">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not allowed to be zero..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.EndpointNameFormat_IllegalCharacter">
            <summary>
              Looks up a localized string similar to Name &apos;{0}&apos; contains illegal character &apos;{1}&apos; encountered at index &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.EndpointNameFormat_MissingClosingBracket">
            <summary>
              Looks up a localized string similar to Name &apos;{0}&apos; is missing the closing bracket for placeholder started at index &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.EndpointNameFormat_UnknownPlaceholderName">
            <summary>
              Looks up a localized string similar to Unknown placeholder specified: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MemberInfoExtensions_AmbiguousAttributeMatch">
            <summary>
              Looks up a localized string similar to Cannot obtain single attribute of type &apos;{0}&apos; declared on &apos;{1}&apos; because multiple attributes are of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MessageKindExtensions_MessageKindNotSupported">
            <summary>
              Looks up a localized string similar to The specified MessageKind ({0}) is not valid..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MicroServiceBusClient_EndpointNotSupported">
            <summary>
              Looks up a localized string similar to Cannot connect endpoint &apos;{0}&apos; (Name = {1}) to the service-bus because it is not supported by this client..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MicroServiceBusController_AlreadyStarted">
            <summary>
              Looks up a localized string similar to Controller of type &apos;{0}&apos; cannot be started because it has already been started..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MicroServiceBusController_CannotPublishEvents">
            <summary>
              Looks up a localized string similar to Controller of type &apos;{0}&apos; cannot publish the specified event(s) because it has not been (fully) started yet..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MicroServiceBusController_CannotSendCommands">
            <summary>
              Looks up a localized string similar to Controller of type &apos;{0}&apos; cannot send the specified command(s) because it has not been (fully) started yet..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.ReadOnlyList_IndexOutOfRange">
            <summary>
              Looks up a localized string similar to There is no element at index &apos;{0}&apos; (Count = {1})..
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.BadRequestException">
            <summary>
            This exception is thrown by a <see cref="T:Kingo.MicroServices.IMicroProcessor" /> when a command or query failed to execute because it was
            invalid or because the operation was illegal. This type semantically maps to HTTP response code <c>400</c>.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.BadRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.BadRequestException" /> class.
            </summary>        
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>        
        </member>
        <member name="M:Kingo.MicroServices.BadRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.BadRequestException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Kingo.MicroServices.BadRequestException.ErrorCode">
            <summary>
            Returns a value between <c>400</c> and <c>499</c>.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.ConflictException">
            <summary>
            This exception is thrown by a <see cref="T:Kingo.MicroServices.IMicroProcessor" /> when a command or query failed because a concurrency
            exception occurred while saving all changes. This type semantically maps to HTTP response code <c>409</c> (conflict).
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.ConflictException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.ConflictException" /> class.
            </summary>        
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>        
        </member>
        <member name="M:Kingo.MicroServices.ConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.ConflictException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Kingo.MicroServices.ConflictException.ErrorCode">
            <summary>
            Returns <c>409</c>.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.Controllers.EndpointNameFormat">
            <summary>
            Represents a specific format for the name of an endpoint.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameFormat.ResolveName(Kingo.MicroServices.IMicroServiceBusEndpoint)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameFormat.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameFormat.Parse(System.String)">
            <summary>
            Parses the specified <paramref name="format"/> and returns a new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameFormat"/> that
            can be used to resolve the name of a <see cref="T:Kingo.MicroServices.IMicroServiceBusEndpoint" />. The format can
            contain the placeholders [service], [handler] and [message], which will be used to insert the name of
            the service, message handler or message respectively.
            </summary>
            <param name="format">The format to parse.</param>
            <returns>A new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameFormat"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="format"/> is not a valid name-format.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.Controllers.EndpointNameResolver">
            <summary>
            Serves as a name-resolver for endpoints for a specific set of message types.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameResolver.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" /> class.
            </summary>
            <param name="defaultNameFormat">
            Indicates what the name-format of an endpoint is for messages of which the format
            is not explicitly configured.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="defaultNameFormat"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="defaultNameFormat"/> is not valid name-format.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameResolver.ToString">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.Controllers.EndpointNameResolver.DefaultNameFormat">
            <summary>
            Returns the default name-format of an endpoint; this format is applied when
            a specific name-format for a certain message is not specified.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameResolver.AddNameFormat``1(System.String)">
            <summary>
            Adds a specific name-format for messages of type <typeparamref name="TMessage"/>.
            </summary>
            <typeparam name="TMessage">Type of a message.</typeparam>
            <param name="format">The name-format to use for endpoints handling messages of type <typeparamref name="TMessage"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="format"/> is not a valid name-format.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameResolver.AddNameFormat(System.String,System.Type[])">
            <summary>
            Adds a specific name-format for messages which type is specified in <paramref name="messageTypes"/>.
            </summary>
            <param name="format">
            The name-format to use for endpoints handling messages which type is specified in <paramref name="messageTypes"/>.
            </param>
            <param name="messageTypes">
            A collection of message-type to match when resolving the correct name-format to use.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> or <paramref name="messageTypes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="format"/> is not a valid name-format.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameResolver.AddNameFormat(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Adds a specific name-format for messages which type is specified in <paramref name="messageTypes"/>.
            </summary>
            <param name="format">
            The name-format to use for endpoints handling messages which type is specified in <paramref name="messageTypes"/>.
            </param>
            <param name="messageTypes">
            A collection of message-type to match when resolving the correct name-format to use.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> or <paramref name="messageTypes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="format"/> is not a valid name-format.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameResolver.ResolveName(Kingo.MicroServices.IMicroServiceBusEndpoint)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.Controllers.IEndpointNameResolver">
            <summary>
            When implemented by a class, represents a component that can resolve the name of an endpoint.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.IEndpointNameResolver.ResolveName(Kingo.MicroServices.IMicroServiceBusEndpoint)">
            <summary>
            Resolves the name of the specified <paramref name="endpoint"/>. This name will be used
            to name/identify the name of the queue from which the messages are pulled for this endpoint.
            </summary>
            <param name="endpoint">An endpoint for which the name must be resolved.</param>
            <returns></returns>
        </member>
        <member name="T:Kingo.MicroServices.Controllers.IMicroServiceBusClient">
            <summary>
            Represents a service-bus client that allows messages to be sent and received to and from it.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.IMicroServiceBusClient.ConnectToEndpointAsync(Kingo.MicroServices.IMicroServiceBusEndpoint)">
            <summary>
            Connects the specified <paramref name="endpoint"/> to the service-bus.
            </summary>
            <param name="endpoint">The endpoint to connect.</param>
            <returns><c>true</c> if the endpoint was connected; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="endpoint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.Controllers.IMicroServiceBusConnection">
            <summary>
            When implemented by a class, represents a connection to a service-bus.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.IMicroServiceBusConnection.Close">
            <summary>
            Closes the connection. 
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The connection has already been disposed.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.Controllers.MicroServiceBusClient`1">
            <summary>
            Serves as a base-class implementation of the <see cref="T:Kingo.MicroServices.Controllers.IMicroServiceBusClient"/> interface.
            </summary>
            <typeparam name="TMessage">Type of the messages that are sent to or received from the service-bus.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.Controllers.MicroServiceBusClient`1" /> class.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.NameResolverMap">
            <summary>
            Returns the map that contains one endpoint name-resolver per message type.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.CreateCommandEndpointNameResolver">
            <summary>
            Creates and returns a new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" /> that will be used to resolve
            the name of each endpoint that handles <see cref="F:Kingo.MicroServices.MessageKind.Command">commands</see>.
            </summary>
            <returns>A new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" />.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.CreateEventEndpointNameResolver">
            <summary>
            Creates and returns a new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" /> that will be used to resolve
            the name of each endpoint that handles <see cref="F:Kingo.MicroServices.MessageKind.Event">events</see>.
            </summary>
            <returns>A new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" />.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.CreateQueryRequestEndpointNameResolver">
            <summary>
            Creates and returns a new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" /> that will be used to resolve
            the name of each endpoint that handles <see cref="F:Kingo.MicroServices.MessageKind.QueryRequest">(query) requests</see>.
            </summary>
            <returns>A new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" />.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.CreateQueryResponseEndpointNameResolver">
            <summary>
            Creates and returns a new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" /> that will be used to resolve
            the name of each endpoint that handles <see cref="F:Kingo.MicroServices.MessageKind.QueryResponse">(query) responses</see>.
            </summary>
            <returns>A new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" />.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.ConnectToEndpointAsync(Kingo.MicroServices.IMicroServiceBusEndpoint)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.ConnectToCommandQueueAsync(Kingo.MicroServices.IMicroServiceBusEndpoint,System.String)">
            <summary>
            Connects the specified <paramref name="endpoint"/> to the associated command-queue of the service-bus.
            </summary>
            <param name="endpoint">The endpoint to connect.</param>
            <param name="endpointName">Name of the endpoint/queue to connect to.</param>
            <returns>The connection that has been made.</returns>
            <exception cref="T:System.ArgumentException">
            The specified <paramref name="endpoint"/> is not supported by this client.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.ConnectToEventQueueAsync(Kingo.MicroServices.IMicroServiceBusEndpoint,System.String)">
            <summary>
            Connects the specified <paramref name="endpoint"/> to the associated event-queue of the service-bus.
            </summary>
            <param name="endpoint">The endpoint to connect.</param>
            <param name="endpointName">Name of the endpoint/queue to connect to.</param>
            <returns>The connection that has been made.</returns>
            <exception cref="T:System.ArgumentException">
            The specified <paramref name="endpoint"/> is not supported by this client.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.ConnectToQueryRequestQueueAsync(Kingo.MicroServices.IMicroServiceBusEndpoint,System.String)">
            <summary>
            Connects the specified <paramref name="endpoint"/> to the associated query request-queue of the service-bus.
            </summary>
            <param name="endpoint">The endpoint to connect.</param>
            <param name="endpointName">Name of the endpoint/queue to connect to.</param>
            <returns>The connection that has been made.</returns>
            <exception cref="T:System.ArgumentException">
            The specified <paramref name="endpoint"/> is not supported by this client.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.ConnectToQueryResponseQueueAsync(Kingo.MicroServices.IMicroServiceBusEndpoint,System.String)">
            <summary>
            Connects the specified <paramref name="endpoint"/> to the associated query response-queue of the service-bus.
            </summary>
            <param name="endpoint">The endpoint to connect.</param>
            <param name="endpointName">Name of the endpoint/queue to connect to.</param>
            <returns>The connection that has been made.</returns>
            <exception cref="T:System.ArgumentException">
            The specified <paramref name="endpoint"/> is not supported by this client.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.NewEndpointNotSupportedException(Kingo.MicroServices.IMicroServiceBusEndpoint,System.String)">
            <summary>
            Creates and returns an exception that can be thrown when an attempt is made to connect to the specified
            <paramref name="endpoint"/> while this endpoint is not supported (e.g. the message kind is not supported).
            </summary>
            <param name="endpoint">The endpoint that is not supported by this client.</param>
            <param name="endpointName">Name of the endpoint/queue to connect to.</param>
            <returns>A new exception that indicates that the specified <paramref name="endpoint"/> is not supported.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="endpoint"/> or <paramref name="endpointName"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.SendCommandsAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessageToDispatch})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.SendAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sends all specified <paramref name="commands"/> to the appropriate service(s).
            By default, every command is sent one after another. If you wish to support sending
            entire batches at once, you may override this method to provide your own implementation.
            </summary>
            <param name="commands">The commands to send.</param>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.SendAsync(`0)">
            <summary>
            Sends the specified <paramref name="command"/>.
            </summary>
            <param name="command">The command to send.</param>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.PublishEventsAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessageToDispatch})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.PublishAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Publishes all specified <paramref name="events"/>. By default, every event is published
            one after another. If you wish to support publishing entire batches at once, you may
            override this method to provide your own implementation.
            </summary>
            <param name="events">The events to publish.</param>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.PublishAsync(`0)">
            <summary>
            Publishes the specified <paramref name="event"/>.
            </summary>
            <param name="event">The event to publish.</param>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.Pack(Kingo.MicroServices.IMessageToDispatch)">
            <summary>
            Packs the specified <paramref name="message"/> into a message that can be sent to the service-bus.
            </summary>
            <param name="message">The message to pack.</param>
            <returns>A message that is ready to be dispatched by the service-bus.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.Unpack(`0,Kingo.MicroServices.IMessageEnvelopeBuilder)">
            <summary>
            Unpacks the specified <paramref name="message"/> and returns the message to process by an endpoint.
            </summary>
            <param name="message">The message to unpack.</param>
            <param name="messageBuilder">A builder that can be used to build the message to return.</param>
            <returns>The contents of the specified <paramref name="message"/>.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.Close">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.Controllers.MicroServiceBusConnection">
            <summary>
            Serves as a base-class implementation of the <see cref="T:Kingo.MicroServices.Controllers.IMicroServiceBusConnection"/> interface.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusConnection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.Controllers.MicroServiceBusConnection" /> class.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Controllers.MicroServiceBusConnection.CloseToken">
            <summary>
            Returns a token that is signaled when a request has been made to close this connection.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Controllers.MicroServiceBusConnection.IsClosed">
            <summary>
            Indicates whether or not the connection has been closed.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusConnection.Close">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusConnection.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.Controllers.MicroServiceBusController">
            <summary>
            When implemented, represents a controller that can send and receive messages to and from a
            service-bus and routes any received message to a <see cref="T:Kingo.MicroServices.IMicroServiceBusEndpoint" />
            for further processing.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.#ctor(Kingo.MicroServices.IMicroProcessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.Controllers.MicroServiceBusController" /> class.
            </summary>
            <param name="processor">The processor that will be processing all commands and/or events.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="processor"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.StartAsync(System.Threading.CancellationToken)">
            <summary>
            The start method creates a new <see cref="T:Kingo.MicroServices.Controllers.IMicroServiceBusClient"/> and attempts to connect
            every <see cref="T:Kingo.MicroServices.IMicroServiceBusEndpoint"/> that is provided by the <see cref="T:Kingo.MicroServices.IMicroProcessor"/>
            to the service-bus through this client. If <paramref name="cancellationToken"/> is signaled before the
            client is fully created and connected, the operation is aborted and the controller remains in the
            stopped/disconnected state.
            </summary>
            <param name="cancellationToken">Token that can be used to abort the operation.</param>
            <exception cref="T:System.ObjectDisposedException">
            The controller has already been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The controller has already been started.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.StopAsync(System.Threading.CancellationToken)">
            <summary>
            The stop method closes and disposes the <see cref="T:Kingo.MicroServices.Controllers.IMicroServiceBusClient"/> gracefully,
            unless the specified <paramref name="cancellationToken"/> is signaled to abort the operation
            quickly.
            </summary>
            <param name="cancellationToken">Token that can be used to abort the operation.</param>
            <exception cref="T:System.ObjectDisposedException">
            The controller has already been disposed.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.SendCommandsAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessageToDispatch})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.PublishEventsAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessageToDispatch})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.CreateClientAsync">
            <summary>
            Creates and returns a new <see cref="T:Kingo.MicroServices.Controllers.IMicroServiceBusClient"/> that can be used send and receive
            messages to and from a service-bus.
            </summary>
            <returns>A new client.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.DefineServiceContract(Kingo.Reflection.TypeSet)">
            <summary>
            Creates and returns a <see cref="T:Kingo.Reflection.TypeSet"/> that defines which types are part of this service's service contract.
            </summary>
            <param name="serviceContract">The default service contract.</param>
            <returns>A <see cref="T:Kingo.Reflection.TypeSet"/> that contains all messages that are part of this service's service contract.</returns>
        </member>
        <member name="T:Kingo.MicroServices.DataAnnotations.ChildMemberAttribute">
            <summary>
            This attribute can be used to decorate fields or properties of a <see cref="T:Kingo.MicroServices.DataAnnotations.ValidatableObject" />
            to signal that it represents an item, collection or dictionary that should be validated in
            and of itself. Any validation-errors of the child-member will be added to the set of validation-errors
            of the parent.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.DataAnnotations.ChildMemberAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.DataAnnotations.ChildMemberAttribute" /> class.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.DataAnnotations.ChildMemberAttribute.ErrorMessage">
            <summary>
            If specified, defines the error-message that is added to the collection of validation-results
            if any child-members are invalid. This property cannot be used in combination with the
            <see cref="P:Kingo.MicroServices.DataAnnotations.ChildMemberAttribute.ErrorMessageResourceType"/> and <see cref="P:Kingo.MicroServices.DataAnnotations.ChildMemberAttribute.ErrorMessageResourceName"/> properties.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.DataAnnotations.ChildMemberAttribute.ErrorMessageResourceType">
            <summary>
            If specified, defines the resource-type where the localized error-message can be retrieved
            that is added to the collection of validation-results if any child-members are invalid.
            This property should be used in combination with the <see cref="P:Kingo.MicroServices.DataAnnotations.ChildMemberAttribute.ErrorMessageResourceName"/>-property.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.DataAnnotations.ChildMemberAttribute.ErrorMessageResourceName">
            <summary>
            If specified, defines the resource-name of the localized error-message inside the resource-type
            that is added to the collection of validation-results if any child-members are invalid.
            This property should be used in combination with the <see cref="P:Kingo.MicroServices.DataAnnotations.ChildMemberAttribute.ErrorMessageResourceType"/>-property.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.DataAnnotations.ObjectExtensions">
            <summary>
            Contains extension-methods for every object.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.DataAnnotations.ObjectExtensions.IsNotValid(System.Object,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult}@,System.IServiceProvider)">
            <summary>
            Determines whether or not the specified <paramref name="instance"/> is valid, and provides all validation errors
            if it's not.
            </summary>
            <param name="instance">The message to validate.</param>
            <param name="results">
            If this instance is not valid, this collection will contain all validation-errors; will be <c>null</c> otherwise.
            </param>
            <param name="serviceProvider">
            Optional service provider that can be used to obtain services for validating this instance.
            </param>        
            <returns><c>true</c> if the instance is not valid; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="instance"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.DataAnnotations.RequestMessage">
            <summary>
            Serves as a base-class for all request-messages such as commands or query-requests.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.DataAnnotations.RequestMessage.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates all constraints that are not declared as a <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />.
            </summary>
            <param name="validationContext">The context of this validation-operation.</param>
            <returns>A collection of validation-errors.</returns>
        </member>
        <member name="T:Kingo.MicroServices.DataAnnotations.ValidatableObject">
            <summary>
            Represents a piece of data that can be validated.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.DataAnnotations.ValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates all constraints that are not declared as a <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />.
            </summary>
            <param name="validationContext">The context of this validation-operation.</param>
            <returns>A collection of validation-errors.</returns>
        </member>
        <member name="T:Kingo.MicroServices.DataContract">
            <summary>
            Serves as a base-class for all data-contracts.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.DataContract.TryUpdateToNextVersion(Kingo.MicroServices.IDataContract@)">
            <summary>
            Attempts to update this message to the next version. By default, this
            method returns <c>false</c>.
            </summary>
            <param name="nextVersion">
            If this method returns <c>true</c>, this parameter will refer to the next version;
            otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if a next version exists and was assigned to <paramref name="nextVersion"/>;
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:Kingo.MicroServices.DataContractExtensions">
            <summary>
            Contains extension methods for objects that implement the <see cref="T:Kingo.MicroServices.IDataContract" /> interface.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.DataContractExtensions.UpdateToLatestVersion``1(Kingo.MicroServices.IDataContract)">
            <summary>
            Updates the specified <paramref name="dataContract"/> to the latest available version and casts
            the result to an instance of <typeparamref name="TDataContract"/>.
            </summary>
            <typeparam name="TDataContract">Expected type of the latest version.</typeparam>
            <param name="dataContract">The contract to update.</param>
            <returns>The latest available version.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dataContract"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.DataContractExtensions.UpdateToLatestVersion(Kingo.MicroServices.IDataContract)">
            <summary>
            Updates the specified <paramref name="dataContract"/> to the latest available version.
            </summary>
            <param name="dataContract">The contract to update.</param>
            <returns>The latest available version.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dataContract"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.DataContractUpdateFailedException">
            <summary>
            This exception is thrown when an attempt to update a <see cref="T:Kingo.MicroServices.IDataContract"/> to its latest
            version fails for some reason.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.DataContractUpdateFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.DataContractUpdateFailedException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Kingo.MicroServices.DataContractUpdateFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.DataContractUpdateFailedException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The cause of this exception.</param>
        </member>
        <member name="T:Kingo.MicroServices.IAsyncMethod">
            <summary>
            When implemented by a class, represents a method that handles a specific message and is provided with
            a context for processing this message.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IAsyncMethod.ComponentType">
            <summary>
            Returns the message handler or query type this method has been implemented on.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IAsyncMethod.MethodInfo">
            <summary>
            Returns the <see cref="T:System.Reflection.MethodInfo"/> of the method.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IAsyncMethod.MessageParameterInfo">
            <summary>
            Returns the <see cref="T:System.Reflection.ParameterInfo" /> that represents the message to be handled.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IAsyncMethod.ContextParameterInfo">
            <summary>
            Returns the <see cref="T:System.Reflection.ParameterInfo" /> that represents the context that is supplied to the method.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IAsyncMethodOperation">
            <summary>
            When implemented by a class, represents an operation where a specific <see cref="T:Kingo.MicroServices.IAsyncMethod"/> is being executed.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IAsyncMethodOperation.Method">
            <summary>
            Returns the method that is being executed in this operation.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IAsyncMethodOperation.Context">
            <summary>
            Returns the context of this operation.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IAsyncMethodOperationStackTrace">
            <summary>
            When implemented by a class, represents a stack trace of operations that are currently being executed
            by a <see cref="T:Kingo.MicroServices.IMicroProcessor" />.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IAsyncMethodOperationStackTrace.CurrentOperation">
            <summary>
            Returns the operation that is currently being executed.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IDataContract">
            <summary>
            When implemented by a class, represents a data transfer object.
            </summary>    
        </member>
        <member name="M:Kingo.MicroServices.IDataContract.TryUpdateToNextVersion(Kingo.MicroServices.IDataContract@)">
            <summary>
            Attempts to update this data contract to the next version.
            </summary>
            <param name="nextVersion">
            If this method returns <c>true</c>, this parameter will refer to the next version;
            otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if a next version exists and was assigned to <paramref name="nextVersion"/>;
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:Kingo.MicroServices.IMessage">
            <summary>
            When implemented by a class, represents a message that can be sent, received, processed and persisted.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IMessage.GenerateMessageId">
            <summary>
            Generates a new message-identifier for this message.
            </summary>
            <returns>A new message-identifier for this message.</returns>
        </member>
        <member name="T:Kingo.MicroServices.IMessageBus">
            <summary>
            When implemented by a class, represent a bus to which events can be published.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IMessageBus.SendCommand(System.Object,System.Nullable{System.DateTimeOffset})">
            <summary>
            Schedules the specified <paramref name="command"/> to be sent on the service-bus.
            </summary>
            <param name="command">The command to send.</param>
            <param name="deliveryTime">
            If specified, indicates at what time the command should be sent on the service-bus.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="command"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.IMessageBus.PublishEvent(System.Object,System.Nullable{System.DateTimeOffset})">
            <summary>
            Schedules the specified <paramref name="event"/> to be published on the service-bus.
            </summary>
            <param name="event">The event to publish.</param>
            <param name="deliveryTime">
            If specified, indicates at what time the event should be published on the service-bus.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="event"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.IMessageEnvelope">
            <summary>
            When implemented by a class, represents (the envelope of) a message, carrying its payload and metadata.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMessageEnvelope.MessageId">
            <summary>
            Returns the unique identifier of this message.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMessageEnvelope.CorrelationId">
            <summary>
            If specified, returns the message-id of the message this message is correlated with
            (which is typically the message that triggered this message to be dispatched or processed).
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMessageEnvelope.Content">
            <summary>
            Returns the contents/payload of the message.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMessageEnvelopeBuilder">
            <summary>
            When implemented by a class, represents a builder of <see cref="T:Kingo.MicroServices.IMessageEnvelope" /> instances.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMessageEnvelopeBuilder.MessageId">
            <summary>
            Gets or sets the message identifier. If not specified, the builder will generate a new message-id.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMessageEnvelopeBuilder.CorrelationId">
            <summary>
            Gets or sets the identifier of the message that the message is correlated with.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMessageEnvelopeFactory">
            <summary>
            When implemented by a class, represents a factory for <see cref="T:Kingo.MicroServices.IMessageEnvelope"/> objects.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IMessageEnvelopeFactory.Wrap(System.Object)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.MicroServices.MessageEnvelope" /> with the specified <paramref name="message" />.
            </summary>
            <param name="message">Content of the message.</param>
            <returns>A new <see cref="T:Kingo.MicroServices.MessageEnvelope"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.IMessageEnvelopeFactory.Wrap``1(``0)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.MicroServices.MessageEnvelope`1" /> with the specified <paramref name="message" />.
            </summary>
            <typeparam name="TMessage">Type of the message of the message.</typeparam>
            <param name="message">Content of the message.</param>
            <returns>A new <see cref="T:Kingo.MicroServices.MessageEnvelope"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.IMessageHandler`1">
            <summary>
            When implemented by a class, handles messages of type <paramtyperef name="TMessage" />.
            </summary>
            <typeparam name="TMessage">Type of the message to handle.</typeparam>  
        </member>
        <member name="M:Kingo.MicroServices.IMessageHandler`1.HandleAsync(`0,Kingo.MicroServices.IMessageHandlerOperationContext)">
            <summary>
            Handles the specified <paramref name="message"/> asynchronously.
            </summary>
            <param name="message">A message.</param>        
            <param name="context">Context of the <see cref="T:Kingo.MicroServices.IMicroProcessor" /> that is currently handling the message.</param>
            <exception cref="T:Kingo.MicroServices.MessageHandlerOperationException">
            Something went wrong while processing the specified <paramref name="message"/>, such as
            the violation of a business rule.
            </exception> 
        </member>
        <member name="T:Kingo.MicroServices.IMessageHandlerOperationContext">
            <summary>
            When implemented by a class, represents the context of a <see cref="T:Kingo.MicroServices.IMessageHandler`1"/> operation.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMessageHandlerOperationContext.UnitOfWork">
            <summary>
            Represents the unit of work that is associated to the current operation.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMessageHandlerOperationContext.MessageBus">
            <summary>
            Represents the message bus that can be used to schedule commands to be sent or events to be published
            after the operation has completed.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMessageHandlerOperationResult">
            <summary>
            When implemented by a class, represents the result of handling a command or event.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMessageHandlerOperationResult.Messages">
            <summary>
            Returns all messages in the order they were (scheduled to be) sent or published.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMessageHandlerOperationResult.MessageHandlerCount">
            <summary>
            The number of message handlers that have handled the message.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMessageToDispatch">
            <summary>
            When implemented by a class, represents a message that is to be delivered by means of a service-bus.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMessageToDispatch.DeliveryTimeUtc">
            <summary>
            If specified, indicates at what (UTC) time the message should be sent or published on the service-bus.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMessageToProcess">
            <summary>
            When implemented by a class, represents a message that is being handled or executed by a processor.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMessageToProcess.Kind">
            <summary>
            Indicates whether this message represents a command, event or request.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMicroProcessor">
            <summary>
            When implemented by a class, represents a processor that can process commands, events and queries.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessor.ServiceName">
            <summary>
            Returns the name of the service.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessor.ServiceProvider">
            <summary>
            Returns the service provider the processor uses to resolve its dependencies.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.AssignUser(System.Security.Principal.IPrincipal)">
            <summary>
            Configures the processor to use the specified <paramref name="user"/> for each operation as long as the
            returned scope is active.
            </summary>
            <param name="user">The principal to use.</param>
            <returns>A scope that can be disposed when the principal can be reset to its previous value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="user"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.CreateMessageBuilder">
            <summary>
            Creates and returns a new <see cref="T:Kingo.MicroServices.IMessageEnvelopeBuilder" /> that can be used to build new messages to process by this processor.
            </summary>
            <returns>A new <see cref="T:Kingo.MicroServices.IMessageEnvelopeBuilder" />.</returns>
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.CreateMicroServiceBusEndpoints">
            <summary>
            Creates and returns all endpoints that are configured to handle commands or events from a service bus.
            </summary>
            <returns>A collection of endpoints.</returns>
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.ExecuteCommandAsync``1(Kingo.MicroServices.IMessageHandler{``0},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes a command with a specified <paramref name="messageHandler"/>.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
            <param name="messageHandler">The message handler that will handle the command.</param>
            <param name="message">The command to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            </returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> or <paramref name="message"/> is <c>null</c>.
            </exception>       
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.ExecuteCommandAsync``1(Kingo.MicroServices.IMessageHandler{``0},Kingo.MicroServices.MessageEnvelope{``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes a command with a specified <paramref name="messageHandler"/>.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
            <param name="messageHandler">The message handler that will handle the command.</param>
            <param name="message">The command to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            </returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> or <paramref name="message"/> is <c>null</c>.
            </exception>       
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.HandleEventAsync``1(Kingo.MicroServices.IMessageHandler{``0},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Handles an event with a specified <paramref name="messageHandler"/>.
            </summary>
            <typeparam name="TEvent">Type of the event.</typeparam>
            <param name="messageHandler">The message handler that will handle the event.</param>
            <param name="message">The event to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            </returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> or <paramref name="message"/> is <c>null</c>.
            </exception>       
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.HandleEventAsync``1(Kingo.MicroServices.IMessageHandler{``0},Kingo.MicroServices.MessageEnvelope{``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Handles an event with a specified <paramref name="messageHandler"/>.
            </summary>
            <typeparam name="TEvent">Type of the event.</typeparam>
            <param name="messageHandler">The message handler that will handle the event.</param>
            <param name="message">The event to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            </returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> or <paramref name="message"/> is <c>null</c>.
            </exception>       
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.ExecuteQueryAsync``1(Kingo.MicroServices.IQuery{``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TResponse">Type of the message returned by the query.</typeparam>        
            <param name="query">The query to execute.</param> 
            <param name="token">Optional token that can be used to cancel the operation.</param>                        
            <returns>The result that carries the response returned by the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>         
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.ExecuteQueryAsync``2(Kingo.MicroServices.IQuery{``0,``1},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TRequest">Type of the message going into the query.</typeparam>
            <typeparam name="TResponse">Type of the message returned by the query.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="message">Message containing the parameters of this query.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>The result that carries the response returned by the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> or <paramref name="message"/> is <c>null</c>.
            </exception>         
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.ExecuteQueryAsync``2(Kingo.MicroServices.IQuery{``0,``1},Kingo.MicroServices.MessageEnvelope{``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TRequest">Type of the message going into the query.</typeparam>
            <typeparam name="TResponse">Type of the message returned by the query.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="message">Message containing the parameters of this query.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>The result that carries the response returned by the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> or <paramref name="message"/> is <c>null</c>.
            </exception>         
        </member>
        <member name="T:Kingo.MicroServices.IMicroProcessorComponentConfiguration">
            <summary>
            When implemented by a class, represents the configuration for a component.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorComponentConfiguration.Lifetime">
            <summary>
            Indicates the lifetime of the component.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorComponentConfiguration.ServiceTypes">
            <summary>
            Returns all service types for which this component is registered.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMicroProcessorOperation">
            <summary>
            When implemented by a class, represents an operation of a <see cref="T:Kingo.MicroServices.IMicroProcessor" />.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOperation.Message">
            <summary>
            Returns the message that is being handled or executed. Returns <c>null</c>
            if this operation refers to the execution of a <see cref="T:Kingo.MicroServices.IQuery`1"/>.        
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOperation.Token">
            <summary>
            Returns the token that indicates whether or not cancellation of the operation is requested.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOperation.Type">
            <summary>
            Indicates whether this operation is invoking a message handler or executing a query.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOperation.Kind">
            <summary>
            Indicates whether this operation is an internal or external operation.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMicroProcessorOperationContext">
            <summary>
            When implemented by a class, represents the context of a <see cref="T:Kingo.MicroServices.IMicroProcessor" /> operation.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOperationContext.User">
            <summary>
            Gets the user that is executing the current operation.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOperationContext.StackTrace">
            <summary>
            Returns a stack trace of all operations that are currently being executed.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOperationContext.ServiceProvider">
            <summary>
            Returns the <see cref="T:System.IServiceProvider" /> of this context.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOperationContext.QueryProcessor">
            <summary>
            Returns the processor that can be used to execute (sub)queries during an operation.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMicroProcessorServiceProvider">
            <summary>
            When implemented by a class, represents a <see cref="T:System.IServiceProvider"/> that manages
            the dependencies of a processor;
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessorServiceProvider.CreateScope">
            <summary>
            Creates and returns a new <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScope"/> that manages the lifetime
            of scoped dependencies.
            </summary>
            <returns>A new <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScope"/>.</returns>
        </member>
        <member name="T:Kingo.MicroServices.IMicroServiceBus">
            <summary>
            When implemented by a class, represents a service bus that can publish messages.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IMicroServiceBus.SendCommandsAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessageToDispatch})">
            <summary>
            Sends all specified <paramref name="commands" /> to the appropriate service(s).
            </summary>
            <param name="commands">A collection of commands.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="commands"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.IMicroServiceBus.PublishEventsAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessageToDispatch})">
            <summary>
            Publishes all specified <paramref name="events" />.
            </summary>
            <param name="events">A collection of events.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="events"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.IMicroServiceBusEndpoint">
            <summary>
            When implemented by a class, represents an endpoint that handles a specific command or event.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroServiceBusEndpoint.ServiceName">
            <summary>
            Returns the name of the service this endpoint is part of.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroServiceBusEndpoint.MessageHandlerType">
            <summary>
            Returns the type of the message handler this endpoint is implemented on.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroServiceBusEndpoint.MethodInfo">
            <summary>
            Returns the <see cref="T:System.Reflection.MethodInfo"/> of the method.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroServiceBusEndpoint.MessageParameterInfo">
            <summary>
            Returns the <see cref="T:System.Reflection.ParameterInfo" /> that represents the message to be handled.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroServiceBusEndpoint.ContextParameterInfo">
            <summary>
            Returns the <see cref="T:System.Reflection.ParameterInfo" /> that represents the context that is supplied to the method.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroServiceBusEndpoint.MessageKind">
            <summary>
            Indicates whether this endpoint handles a command or an event.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IMicroServiceBusEndpoint.InvokeAsync(Kingo.MicroServices.IMessageEnvelope,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Invokes the method of the associated message handler with the specified <paramref name="message" />
            and returns its result.
            </summary>
            <param name="message">The message to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            If the specified <paramref name="message"/>  is not supported by this endpoint, it is ignored and an empty
            result will be returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="T:Kingo.MicroServices.InternalServerErrorException">
            <summary>
            This exception is thrown by a <see cref="T:Kingo.MicroServices.IMicroProcessor" /> when a technical failure prevented the processor from
            handling a message or executing a query correctly. This type semantically maps to HTTP response code <c>500</c>.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.InternalServerErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.InternalServerErrorException" /> class.
            </summary>        
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>        
        </member>
        <member name="M:Kingo.MicroServices.InternalServerErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.InternalServerErrorException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Kingo.MicroServices.InternalServerErrorException.ErrorCode">
            <summary>
            Returns a value between <c>500</c> and <c>599</c>.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.InternalServerErrorException.FromInnerException(System.Exception)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.MicroServices.InternalServerErrorException" /> wrapping the specified <paramref name="innerException"/>.
            </summary>
            <param name="innerException">The exception to wrap.</param>
            <returns>A new <see cref="T:Kingo.MicroServices.InternalServerErrorException" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="innerException"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.IQuery`1">
            <summary>
            When implemented by a class, represents a query that accepts a message
            and returns a result in the form of a <typeparamref name="TResponse"/>.
            </summary>    
            <typeparam name="TResponse">Type of the message that is returned by this query.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.IQuery`1.ExecuteAsync(Kingo.MicroServices.IQueryOperationContext)">
            <summary>
            Executes the query.
            </summary>   
            <param name="context">Context of the <see cref="T:Kingo.MicroServices.IMicroProcessor" /> that is currently executing the query.</param>    
            <returns>The result of this query.</returns>        
        </member>
        <member name="T:Kingo.MicroServices.IQuery`2">
            <summary>
            When implemented by a class, represents a query that accepts a message
            and returns a result in the form of a <typeparamref name="TResponse"/>.
            </summary>
            <typeparam name="TRequest">Type of the message that is consumed by this query.</typeparam>
            <typeparam name="TResponse">Type of the message that is returned by this query.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.IQuery`2.ExecuteAsync(`0,Kingo.MicroServices.IQueryOperationContext)">
            <summary>
            Executes the query.
            </summary>
            <param name="message">Message containing the parameters of this query.</param>
            <param name="context">Context of the <see cref="T:Kingo.MicroServices.IMicroProcessor" /> that is currently executing the query.</param>
            <returns>The result of this query.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.IQueryOperationContext">
            <summary>
            When implemented by a class, represents the context of a <see cref="T:Kingo.MicroServices.IQuery`2"/> operation.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IQueryOperationResult`1">
            <summary>
            When implemented by a class, represents the result of executing a query.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IQueryOperationResult`1.Response">
            <summary>
            The response of the query.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IQueryProcessor">
            <summary>
            When implemented by a class, represents a processor specifically for queries.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IQueryProcessor.ExecuteQueryAsync``1(Kingo.MicroServices.IQuery{``0})">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result.
            </summary>
            <typeparam name="TResponse">Type of the response of the query.</typeparam>
            <param name="query">The query to execute.</param>
            <returns>The response of the query.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.IQueryProcessor.ExecuteQueryAsync``2(Kingo.MicroServices.IQuery{``0,``1},``0)">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result.
            </summary>
            <typeparam name="TRequest">Type of the request of the query.</typeparam>
            <typeparam name="TResponse">Type of the response of the query.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="message">Message that carries the parameters of the query.</param>
            <returns>The response of the query.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> or <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.IQueryProcessor.ExecuteQueryAsync``2(Kingo.MicroServices.IQuery{``0,``1},Kingo.MicroServices.MessageEnvelope{``0})">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result.
            </summary>
            <typeparam name="TRequest">Type of the request of the query.</typeparam>
            <typeparam name="TResponse">Type of the response of the query.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="message">Message that carries the parameters of the query.</param>
            <returns>The response of the query.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> or <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.IUnitOfWork">
            <summary>
            When implemented by a class, represents a unit of work that manages different <see cref="T:Kingo.MicroServices.IUnitOfWorkResourceManager">
            resource managers</see>.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IUnitOfWork.EnlistAsync(Kingo.MicroServices.IUnitOfWorkResourceManager)">
            <summary>
            Enlists the specified <paramref name="resourceManager"/> with this unit of work so that it can be flushed at the appropriate time.
            Note that this operation may flush the specified <paramref name="resourceManager"/> immediately.
            </summary>
            <param name="resourceManager">The resource manager to enlist.</param>        
            <exception cref="T:System.ArgumentNullException">
            <paramref name="resourceManager"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.IUnitOfWork.FlushAsync">
            <summary>
            Flushes all pending changes by signalling to all enlisted <see cref="T:Kingo.MicroServices.IUnitOfWorkResourceManager">resource managers</see>
            that they can flush or persist their changes.
            </summary>        
        </member>
        <member name="T:Kingo.MicroServices.IUnitOfWorkResourceManager">
            <summary>
            When implemented by a class, represents a unit of work that can be flushed.
            </summary>    
        </member>
        <member name="P:Kingo.MicroServices.IUnitOfWorkResourceManager.ResourceId">
            <summary>
            Identifies the resource that is managed by this resource manager, such as a database, file or blob storage.
            This value may be <c>null</c> if the resource is undefined.
            </summary>
            <remarks>
            The resource-id is used by the <see cref="T:Kingo.MicroServices.IUnitOfWork"/> to determine which managers manage specific resources, so that it
            can optimize the flush-cycle by flushing the managers of different resources in parallel thereby optimizing I/O performance.
            Those resource managers that manage the same resource (such as multiple repositories using the same database), or resource
            managers of which the resource is undefined (resource id is <c>null</c>), will be flushed sequentially.
            </remarks>
        </member>
        <member name="M:Kingo.MicroServices.IUnitOfWorkResourceManager.RequiresFlush">
            <summary>
            Indicates whether or not the unit of work maintains any changes that need to flushed.
            </summary>
            <returns>
            <c>true</c> if the current instance needs to be flushed; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.MicroServices.IUnitOfWorkResourceManager.FlushAsync">
            <summary>
            Flushes any pending changes to the underlying infrastructure.
            </summary>
            <exception cref="T:Kingo.MicroServices.ConflictException">
            A concurrency exception occurred.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.Message">
            <summary>
            Serves as a base-class for all messages that are able to generate their own identifiers.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Message.GenerateMessageId">
            <summary>
            Generates a new message-identifier for this message.
            </summary>
            <returns>A new message-identifier for this message.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Message.NewMessageId">
            <summary>
            Generates and returns a new, random message-id.
            </summary>
            <returns>A new message-id.</returns>
        </member>
        <member name="T:Kingo.MicroServices.MessageBusExtensions">
            <summary>
            Contains extension-methods for instances of type <see cref="T:Kingo.MicroServices.IMessageBus" />.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MessageBusExtensions.SendCommand(Kingo.MicroServices.IMessageBus,System.Object,System.TimeSpan)">
            <summary>
            Schedules a command for a specific time relative to the current date and time.
            </summary>
            <param name="bus">A message bus.</param>
            <param name="command">The command to send.</param>
            <param name="delta">
            The period that determines when the command should be delivered relative to the current date and time.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bus"/> or <paramref name="command"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.MessageBusExtensions.PublishEvent(Kingo.MicroServices.IMessageBus,System.Object,System.TimeSpan)">
            <summary>
            Schedules an event for a specific time relative to the current date and time.
            </summary>
            <param name="bus">A message bus.</param>
            <param name="event">The event to publish.</param>
            <param name="delta">
            The period that determines when the event should be delivered relative to the current date and time.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bus"/> or <paramref name="event"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.MessageEnvelope">
            <summary>
            Represents the envelope of a message carrying its payload and metadata.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MessageEnvelope.#ctor(System.Object,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MessageEnvelope`1" /> class.
            </summary>
            <param name="message">Content of this message.</param>
            <param name="messageId">Unique identifier of this message.</param>
            <param name="correlationId">
            Identifier of the message this message to related to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> or <paramref name="messageId"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.MicroServices.MessageEnvelope.MessageId">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MessageEnvelope.CorrelationId">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MessageEnvelope.Content">
            <summary>
            Returns the contents/payload of the message.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MessageEnvelope.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MessageEnvelope`1">
            <summary>
            Represents a message with a specific <see cref="P:Kingo.MicroServices.MessageEnvelope`1.MessageId" /> and a payload of type <typeparamref name="TMessage"/>.
            </summary>
            <typeparam name="TMessage">Type of the message payload.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.MessageEnvelope`1.#ctor(`0,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MessageEnvelope`1" /> class.
            </summary>
            <param name="message">Content of this message.</param>
            <param name="messageId">Unique identifier of this message.</param>
            <param name="correlationId">
            Identifier of the message this message to related to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> or <paramref name="messageId"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.MicroServices.MessageEnvelope`1.MessageId">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MessageEnvelope`1.CorrelationId">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MessageEnvelope`1.Content">
            <summary>
            Returns the contents/payload of the message.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MessageEnvelope`1.ToProcess(Kingo.MicroServices.MessageKind)">
            <summary>
            Converts this message to a message of a specific <see cref="T:Kingo.MicroServices.MessageKind" /> to process by a <see cref="T:Kingo.MicroServices.IMicroProcessor" />.
            </summary>
            <param name="kind">The kind of this message.</param>
            <returns>A new <see cref="T:Kingo.MicroServices.MessageToProcess`1"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="kind"/> is not a valid value.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.MessageEnvelope`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MessageEnvelopeExtensions">
            <summary>
            Contains extension methods for object of type <see cref="T:Kingo.MicroServices.IMessageEnvelope" />.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MessageEnvelopeExtensions.ToDispatch(Kingo.MicroServices.IMessageEnvelope,Kingo.MicroServices.MessageKind,System.Nullable{System.DateTimeOffset})">
            <summary>
            Converts the specified <paramref name="message"/> to a message of a specific <paramref name="kind"/> that can be dispatched.
            </summary>
            <param name="message">The message to convert.</param>
            <param name="kind">Indicates what kind of message the message represents.</param>
            <param name="deliveryTime">
            If specified, indicates at what time the message should be dispatched on the service-bus.
            </param>
            <returns>The message to dispatch.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="kind"/> is not a recognized <see cref="T:Kingo.MicroServices.MessageKind"/>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.MessageEnvelopeExtensions.IsOfType``1(Kingo.MicroServices.IMessageEnvelope,Kingo.MicroServices.MessageEnvelope{``0}@)">
            <summary>
            Checks if the content of this envelope is of type <typeparamref name="TMessage"/> and if so,
            convert this envelope into a strongly typed version.
            </summary>
            <typeparam name="TMessage">A message type.</typeparam>
            <param name="message">The message to convert.</param>
            <param name="typedMessage">
            If <see cref="P:Kingo.MicroServices.IMessageEnvelope.Content"/> is of type <typeparamref name="TMessage"/>, this argument will be set to
            an instance of <see cref="T:Kingo.MicroServices.MessageEnvelope`1"/>; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <see cref="P:Kingo.MicroServices.IMessageEnvelope.Content"/> is of type <typeparamref name="TMessage"/>, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.MessageHandlerDecorator`1">
            <summary>
            Represents a decorator of message handlers.
            </summary>
            <typeparam name="TMessage">Type of the message to handle.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerDecorator`1.#ctor(Kingo.MicroServices.IMessageHandler{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MessageHandlerDecorator`1" /> class.
            </summary>
            <param name="messageHandler">The message handler to decorate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.MicroServices.MessageHandlerDecorator`1.MessageHandler">
            <summary>
            The message handler to decorate.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerDecorator`1.HandleAsync(`0,Kingo.MicroServices.IMessageHandlerOperationContext)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerDecorator`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerDecorator`1.Decorate(System.Action{`0,Kingo.MicroServices.IMessageHandlerOperationContext})">
            <summary>
            Wraps the specified delegate into a <see cref="T:Kingo.MicroServices.IMessageHandler`1" /> instance.
            </summary>
            <param name="messageHandler">The delegate to wrap.</param>
            <returns>
            A <see cref="T:Kingo.MicroServices.IMessageHandler`1"/> that wraps the specified <paramref name="messageHandler"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerDecorator`1.Decorate(System.Func{`0,Kingo.MicroServices.IMessageHandlerOperationContext,System.Threading.Tasks.Task})">
            <summary>
            Wraps the specified delegate into a <see cref="T:Kingo.MicroServices.IMessageHandler`1" /> instance.
            </summary>
            <param name="messageHandler">The delegate to wrap.</param>
            <returns>
            A <see cref="T:Kingo.MicroServices.IMessageHandler`1"/> that wraps the specified <paramref name="messageHandler"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.MessageHandlerOperationException">
            <summary>
            An exception of this type is to be thrown by application code when something predictable went wrong while handling a message.
            The <see cref="T:Kingo.MicroServices.IMicroProcessor" /> will catch exceptions of this type and convert it to a <see cref="T:Kingo.MicroServices.BadRequestException" />
            or <see cref="T:Kingo.MicroServices.InternalServerErrorException" /> based on whether or was executing a command or handling an event.   
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MessageHandlerOperationException" /> class.
            </summary>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MessageHandlerOperationException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerOperationException.AsBadRequestException(System.String)">
            <summary>
            Creates and returns this exception as a <see cref="T:Kingo.MicroServices.BadRequestException"/>, indicating that
            the current exception occurred because of a bad client request.
            </summary>        
            <param name="message">Message describing the context of the newly created message.</param>
            <returns>A new <see cref="T:Kingo.MicroServices.BadRequestException"/> with its <see cref="P:System.Exception.InnerException"/> set to this instance.</returns>        
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerOperationException.AsInternalServerErrorException(System.String)">
            <summary>
            Creates and returns this exception as a <see cref="T:Kingo.MicroServices.InternalServerErrorException"/>, indicating that
            the current exception occurred because of an internal server error.        
            </summary>        
            <param name="message">Message describing the context of the newly created message.</param>
            <returns>A new <see cref="T:Kingo.MicroServices.InternalServerErrorException"/> with its <see cref="P:System.Exception.InnerException"/> set to this instance.</returns>        
        </member>
        <member name="T:Kingo.MicroServices.MessageKind">
            <summary>
            Represents a specific role or kind a message that a message can have.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MessageKind.Unspecified">
            <summary>
            Indicates the kind is yet to be specified.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MessageKind.Command">
            <summary>
            Represents a command.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MessageKind.Event">
            <summary>
            Represents an event.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MessageKind.QueryRequest">
            <summary>
            Represents the request-message of a query.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MessageKind.QueryResponse">
            <summary>
            Represents the response-message of a query.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.MessageToDispatch">
            <summary>
            Represents a command or event that is scheduled to be sent or published on the service-bus.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MessageToDispatch.MessageId">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MessageToDispatch.CorrelationId">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MessageToDispatch.Content">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MessageToDispatch.Kind">
            <summary>
            Indicates which kind of message is to be dispatched.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MessageToDispatch.DeliveryTimeUtc">
            <summary>
            If specified, indicates at what (UTC) time the message should be sent or published on the service-bus.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MessageToDispatch.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MessageToDispatch.CorrelateWith(Kingo.MicroServices.IMessageEnvelope)">
            <summary>
            Creates and returns a copy of this message that is correlated with the specified <paramref name="message"/>.
            </summary>
            <param name="message">The message this message is correlated message.</param>
            <returns>A copy of this message that is correlated with the specified <paramref name="message"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.MessageToDispatch.IsOfType``1(Kingo.MicroServices.MessageToDispatch{``0}@)">
            <summary>
            Checks if the message of this message is of type <typeparamref name="TMessage"/> and if so,
            convert this message into a message of that type.
            </summary>
            <typeparam name="TMessage">A message type.</typeparam>
            <param name="messageToDispatch">
            If <see cref="P:Kingo.MicroServices.MessageToDispatch.Content"/> is of type <typeparamref name="TMessage"/>, this argument will be set to
            an instance of <see cref="T:Kingo.MicroServices.MessageToDispatch`1"/>; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <see cref="P:Kingo.MicroServices.MessageToDispatch.Content"/> is of type <typeparamref name="TMessage"/>, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.MicroServices.MessageToDispatch.OfType``1">
            <summary>
            Converts this message to a (strongly typed) message to process.
            </summary>
            <typeparam name="TMessage">Type of the message message.</typeparam>
            <returns>A new <see cref="T:Kingo.MicroServices.MessageToProcess`1"/>.</returns>
            <exception cref="T:System.InvalidCastException">
            <see cref="P:Kingo.MicroServices.MessageToDispatch.Content"/> is not an instance of type <typeparamref name="TMessage"/>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.MessageToDispatch`1">
            <summary>
            Represents a command or event that is to be sent or published on a service-bus.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MessageToDispatch`1.Kind">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MessageToDispatch`1.DeliveryTimeUtc">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MessageToDispatch`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MessageToDispatch`1.ToProcess">
            <summary>
            Converts this message to a message to process.
            </summary>
            <returns>A new message to process.</returns>
        </member>
        <member name="T:Kingo.MicroServices.MessageToProcess`1">
            <summary>
            Represents a message that is being handled or executed by a processor.
            </summary>
            <typeparam name="TMessage">Type of the content of this message.</typeparam>
        </member>
        <member name="P:Kingo.MicroServices.MessageToProcess`1.Kind">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MessageToProcess`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorComponentAttribute">
            <summary>
            This attribute can be declared on any class or struct to configure its registration and run-time behavior.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponentAttribute.#ctor(Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MicroProcessorComponentAttribute" /> class.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorComponentAttribute.Lifetime">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorComponentAttribute.ServiceTypes">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponentAttribute.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorExtensions">
            <summary>
            Contains extension methods for the <see cref="T:Kingo.MicroServices.IMicroProcessor" /> interface.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorExtensions.ExecuteCommandAsync``1(Kingo.MicroServices.IMicroProcessor,System.Action{``0,Kingo.MicroServices.IMessageHandlerOperationContext},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes a command with a specified <paramref name="messageHandler"/>.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
            <param name="processor">The processor used to execute the command.</param>
            <param name="messageHandler">The message handler that will handle the command.</param>
            <param name="message">The command to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            </returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="processor"/>, <paramref name="messageHandler"/> or <paramref name="message"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorExtensions.ExecuteCommandAsync``1(Kingo.MicroServices.IMicroProcessor,System.Func{``0,Kingo.MicroServices.IMessageHandlerOperationContext,System.Threading.Tasks.Task},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes a command with a specified <paramref name="messageHandler"/>.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
            <param name="processor">The processor used to execute the command.</param>
            <param name="messageHandler">The message handler that will handle the command.</param>
            <param name="message">The command to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            </returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="processor"/>, <paramref name="messageHandler"/> or <paramref name="message"/> is <c>null</c>.
            </exception>         
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorExtensions.HandleEventAsync``1(Kingo.MicroServices.IMicroProcessor,System.Action{``0,Kingo.MicroServices.IMessageHandlerOperationContext},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Handles an event with a specified <paramref name="messageHandler"/>.
            </summary>
            <typeparam name="TEvent">Type of the event.</typeparam>
            <param name="processor">The processor used to handle the event.</param>
            <param name="messageHandler">The message handler that will handle the event.</param>
            <param name="message">The event to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            </returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="processor"/>, <paramref name="messageHandler"/> or <paramref name="message"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorExtensions.HandleEventAsync``1(Kingo.MicroServices.IMicroProcessor,System.Func{``0,Kingo.MicroServices.IMessageHandlerOperationContext,System.Threading.Tasks.Task},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Handles an event with a specified <paramref name="messageHandler"/>.
            </summary>
            <typeparam name="TEvent">Type of the event.</typeparam>
            <param name="processor">The processor used to handle the event.</param>
            <param name="messageHandler">The message handler that will handle the event.</param>
            <param name="message">The event to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            </returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="processor"/>, <paramref name="messageHandler"/> or <paramref name="message"/> is <c>null</c>.
            </exception>         
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorExtensions.ExecuteQueryAsync``1(Kingo.MicroServices.IMicroProcessor,System.Func{Kingo.MicroServices.IQueryOperationContext,``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TResponse">Type of the message returned by the query.</typeparam>   
            <param name="processor">A processor.</param>     
            <param name="query">The query to execute.</param>               
            <param name="token">Optional token that can be used to cancel the operation.</param>          
            <returns>The result that carries the response returned by the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="processor"/>, <paramref name="query"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorExtensions.ExecuteQueryAsync``1(Kingo.MicroServices.IMicroProcessor,System.Func{Kingo.MicroServices.IQueryOperationContext,System.Threading.Tasks.Task{``0}},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TResponse">Type of the message returned by the query.</typeparam> 
            <param name="processor">A processor.</param>       
            <param name="query">The query to execute.</param>               
            <param name="token">Optional token that can be used to cancel the operation.</param>          
            <returns>The result that carries the response returned by the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="processor"/>, <paramref name="query"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorExtensions.ExecuteQueryAsync``2(Kingo.MicroServices.IMicroProcessor,System.Func{``0,Kingo.MicroServices.IQueryOperationContext,``1},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TRequest">Type of the message going into the query.</typeparam>
            <typeparam name="TResponse">Type of the message returned by the query.</typeparam>
            <param name="processor">A processor.</param>
            <param name="query">The query to execute.</param>
            <param name="message">Message containing the parameters of this query.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>The result that carries the response returned by the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="processor"/>, <paramref name="query"/> or <paramref name="message"/> is <c>null</c>.
            </exception>          
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorExtensions.ExecuteQueryAsync``2(Kingo.MicroServices.IMicroProcessor,System.Func{``0,Kingo.MicroServices.IQueryOperationContext,System.Threading.Tasks.Task{``1}},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TRequest">Type of the message going into the query.</typeparam>
            <typeparam name="TResponse">Type of the message returned by the query.</typeparam>
            <param name="processor">A processor.</param>
            <param name="query">The query to execute.</param>
            <param name="message">Message containing the parameters of this query.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>The result that carries the response returned by the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="processor"/>, <paramref name="query"/> or <paramref name="message"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorOperationException">
            <summary>
            This exception is thrown by a <see cref="T:Kingo.MicroServices.IMicroProcessor" /> when it failed to handle a message or execute a query.
            Any derived type of this class semantically maps to a <c>4xx</c> or <c>5xx</c> HTTP status code.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MicroProcessorOperationException" /> class.
            </summary>        
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>        
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MicroProcessorOperationException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorOperationException.ErrorCode">
            <summary>
            The ErrorCode that is associated with this Exception. This code typically corresponds with HttpStatusCodes,
            which implies the returned value is always somewhere between <c>400</c> and <c>599</c>, depending on the
            run-time type of the exception.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorOperationKind">
            <summary>
            Represents the kinds of operations a processor can execute (i.e. internal or external).
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MicroProcessorOperationKind.RootOperation">
            <summary>
            Represents an operation that was triggered by an external message or request. Root operations always
            represent the first operation on the <see cref="T:Kingo.MicroServices.IAsyncMethodOperationStackTrace" />.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MicroProcessorOperationKind.BranchOperation">
            <summary>
            Represents an operation that was triggered by another operation.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorOperationType">
            <summary>
            Represents a specific operation type performed by a <see cref="T:Kingo.MicroServices.IMicroProcessor" />.
            </summary>    
        </member>
        <member name="F:Kingo.MicroServices.MicroProcessorOperationType.MessageHandlerOperation">
            <summary>
            Represents an operation in which a message handler is invoked to handle
            a message. This operation type is also known as a write operation.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MicroProcessorOperationType.QueryOperation">
            <summary>
            Represents an operation in which a query is invoked to return a response.
            This operation type is also known as a read operation.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.MicroServiceBusEndpointNameAttribute">
            <summary>
            When applied to a message or message handler, defines the name of this message type
            or message handler type that is to be used in the name of the service bus endpoint,
            if the name-format includes the name of a message or message handler.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroServiceBusEndpointNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MicroServiceBusEndpointNameAttribute" /> class.
            </summary>
            <param name="name">The name of the message or message handler.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.MicroServices.MicroServiceBusEndpointNameAttribute.Name">
            <summary>
            The name of the message or message handler.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.MicroServiceBusExtensions">
            <summary>
            Contains extension method for instance of type <see cref="T:Kingo.MicroServices.IMicroServiceBus" />.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroServiceBusExtensions.DispatchAsync(Kingo.MicroServices.IMicroServiceBus,System.Collections.Generic.IEnumerable{Kingo.MicroServices.MessageToDispatch})">
            <summary>
            Sends all commands and publishes all events that are part of the specified
            <paramref name="messages"/> collection.
            </summary>
            <param name="bus">The bus that will dispatch the messages.</param>
            <param name="messages">A collection of commands and events to send and publish.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bus"/> or <paramref name="messages"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.QueryDecorator`1">
            <summary>
            Represents a decorator of queries.
            </summary>
            <typeparam name="TResponse">Type of the response of the query.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`1.#ctor(Kingo.MicroServices.IQuery{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.QueryDecorator`1" /> class.
            </summary>
            <param name="query">The query to decorate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.MicroServices.QueryDecorator`1.Query">
            <summary>
            The query to decorate.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`1.ExecuteAsync(Kingo.MicroServices.IQueryOperationContext)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`1.Decorate(System.Func{Kingo.MicroServices.IQueryOperationContext,`0})">
            <summary>
            Wraps the specified delegate into a <see cref="T:Kingo.MicroServices.IQuery`1" /> instance.
            </summary>
            <param name="query">The delegate to wrap.</param>
            <returns>
            A <see cref="T:Kingo.MicroServices.IQuery`1"/> that wraps the specified <paramref name="query"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`1.Decorate(System.Func{Kingo.MicroServices.IQueryOperationContext,System.Threading.Tasks.Task{`0}})">
            <summary>
            Wraps the specified delegate into a <see cref="T:Kingo.MicroServices.IQuery`1" /> instance.
            </summary>
            <param name="query">The delegate to wrap.</param>
            <returns>
            A <see cref="T:Kingo.MicroServices.IQuery`1"/> that wraps the specified <paramref name="query"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.QueryDecorator`2">
            <summary>
            Represents a decorator of queries.
            </summary>
            <typeparam name="TRequest">Type of the request of the query.</typeparam>
            <typeparam name="TResponse">Type of the response of the query.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`2.#ctor(Kingo.MicroServices.IQuery{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.QueryDecorator`2" /> class.
            </summary>
            <param name="query">The query to decorate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.MicroServices.QueryDecorator`2.Query">
            <summary>
            The query to decorate.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`2.ExecuteAsync(`0,Kingo.MicroServices.IQueryOperationContext)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`2.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`2.Decorate(System.Func{`0,Kingo.MicroServices.IQueryOperationContext,`1})">
            <summary>
            Wraps the specified delegate into a <see cref="T:Kingo.MicroServices.IQuery`2" /> instance.
            </summary>
            <param name="query">The delegate to wrap.</param>
            <returns>
            A <see cref="T:Kingo.MicroServices.IQuery`2"/> that wraps the specified <paramref name="query"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`2.Decorate(System.Func{`0,Kingo.MicroServices.IQueryOperationContext,System.Threading.Tasks.Task{`1}})">
            <summary>
            Wraps the specified delegate into a <see cref="T:Kingo.MicroServices.IQuery`2" /> instance.
            </summary>
            <param name="query">The delegate to wrap.</param>
            <returns>
            A <see cref="T:Kingo.MicroServices.IQuery`2"/> that wraps the specified <paramref name="query"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Reflection.MemberInfoExtensions">
            <summary>
            Contains extension methods for instances of type <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
        </member>
        <member name="M:Kingo.Reflection.MemberInfoExtensions.TryGetAttributeOfType``1(System.Reflection.MemberInfo,``0@,System.Boolean)">
            <summary>
            Attempts to retrieve a single attribute of type <typeparamref name="TAttribute"/>.
            </summary>
            <typeparam name="TAttribute">Type of the attribute to retrieve.</typeparam>
            <param name="member">The member to obtain the attributes for.</param>
            <param name="attribute">
            When this method returns <c>true</c>, this parameter will refer to the retrieved attribute;
            otherwise it will be <c>null</c>.
            </param>
            <param name="inherit">
            <c>true</c> to search this member's inheritance chain to find the attributes; otherwise, <c>false</c>.
            This parameter is ignored for properties and events.
            </param>
            <returns><c>true</c> if the attribute was retrieved; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Multiple attribute defined of the method are assignable to type <typeparamref name="TAttribute"/>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.MemberInfoExtensions.GetAttributesOfType``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Retrieves all attributes of type <typeparamref name="TAttribute"/>.
            </summary>
            <typeparam name="TAttribute">Type of the attribute to retrieve.</typeparam>
            <param name="member">The member to obtain the attributes for.</param>
            <param name="inherit">
            <c>true</c> to search this member's inheritance chain to find the attributes; otherwise, <c>false</c>.
            This parameter is ignored for properties and events.
            </param>
            <returns>A collection of attributes.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="member"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.MemberInfoExtensions.TryGetAttributeOfType``1(System.Reflection.ParameterInfo,``0@,System.Boolean)">
            <summary>
            Attempts to retrieve a single attribute of type <typeparamref name="TAttribute"/>.
            </summary>
            <typeparam name="TAttribute">Type of the attribute to retrieve.</typeparam>
            <param name="parameter">The member to obtain the attributes for.</param>
            <param name="attribute">
            When this method returns <c>true</c>, this parameter will refer to the retrieved attribute;
            otherwise it will be <c>null</c>.
            </param>
            <param name="inherit">
            <c>true</c> to search this member's inheritance chain to find the attributes; otherwise, <c>false</c>.
            This parameter is ignored for properties and events.
            </param>
            <returns><c>true</c> if the attribute was retrieved; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Multiple attribute defined of the method are assignable to type <typeparamref name="TAttribute"/>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.MemberInfoExtensions.GetAttributesOfType``1(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
            Retrieves all attributes of type <typeparamref name="TAttribute"/>.
            </summary>
            <typeparam name="TAttribute">Type of the attribute to retrieve.</typeparam>
            <param name="parameter">The member to obtain the attributes for.</param>
            <param name="inherit">
            <c>true</c> to search this member's inheritance chain to find the attributes; otherwise, <c>false</c>.
            This parameter is ignored for properties and events.
            </param>
            <returns>A collection of attributes.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.Reflection.TypeExtensions">
            <summary>
            Contains several extensions method for the <see cref="T:System.Type" /> class.
            </summary>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetEqualityOperator``2(System.Type,System.Func{``0,``1,System.Boolean}@)">
            <summary>
            Attempts to obtain the equality operator (==) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="equalityOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the equality operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetInequalityOperator``2(System.Type,System.Func{``0,``1,System.Boolean}@)">
            <summary>
            Attempts to obtain the equality operator (!=) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="inequalityOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the inequality operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetLessThanOperator``2(System.Type,System.Func{``0,``1,System.Boolean}@)">
            <summary>
            Attempts to obtain the less than operator (&lt;) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="lessThanOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the less than operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetLessThanOrEqualOperator``2(System.Type,System.Func{``0,``1,System.Boolean}@)">
            <summary>
            Attempts to obtain the less than or equal to operator (&lt;=) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="lessThanOrEqualOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the less than or equal to operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetGreaterThanOperator``2(System.Type,System.Func{``0,``1,System.Boolean}@)">
            <summary>
            Attempts to obtain the greater than operator (&gt;) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="greaterThanOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the greater than operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetGreaterThanOrEqualOperator``2(System.Type,System.Func{``0,``1,System.Boolean}@)">
            <summary>
            Attempts to obtain the greater than or equal to operator (&gt;=) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="greaterThanOrEqualOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the greater than or equal to operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetAdditionOperator``3(System.Type,System.Func{``0,``1,``2}@)">
            <summary>
            Attempts to obtain the addition operator (+) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="additionOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the addition operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetSubtractionOperator``3(System.Type,System.Func{``0,``1,``2}@)">
            <summary>
            Attempts to obtain the subtraction operator (-) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="subtractiontOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the subtraction operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetMultiplyOperator``3(System.Type,System.Func{``0,``1,``2}@)">
            <summary>
            Attempts to obtain the multiply operator (*) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="multiplyOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the multiply operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetDivisionOperator``3(System.Type,System.Func{``0,``1,``2}@)">
            <summary>
            Attempts to obtain the division operator (/) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="divisionOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the division operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetModulusOperator``3(System.Type,System.Func{``0,``1,``2}@)">
            <summary>
            Attempts to obtain the modulus operator (%) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="modulusOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the modulus operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetExclusiveOrOperator``3(System.Type,System.Func{``0,``1,``2}@)">
            <summary>
            Attempts to obtain the exclusiveOr operator (^) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="exclusiveOrOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the exclusiveOr operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetBitwiseAndOperator``3(System.Type,System.Func{``0,``1,``2}@)">
            <summary>
            Attempts to obtain the bitwiseAnd operator (&amp;) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="bitwiseAndOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the bitwiseAnd operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetBitwiseOrOperator``3(System.Type,System.Func{``0,``1,``2}@)">
            <summary>
            Attempts to obtain the bitwiseOr operator (|) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn1">Type of the first argument.</typeparam>
            <typeparam name="TIn2">Type of the second argument.</typeparam>
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="bitwiseOrOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the bitwiseOr operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetLeftShiftOperator``2(System.Type,System.Func{``0,System.Int32,``1}@)">
            <summary>
            Attempts to obtain the leftShift operator (&lt;&lt;) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>        
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="leftShiftOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the leftShift operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetRightShiftOperator``2(System.Type,System.Func{``0,System.Int32,``1}@)">
            <summary>
            Attempts to obtain the rightShift operator (&gt;&gt;) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>        
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="rightShiftOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the rightShift operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetUnaryPlusOperator``2(System.Type,System.Func{``0,``1}@)">
            <summary>
            Attempts to obtain the unaryPlus operator (+) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>        
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="unaryPlusOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the unaryPlus operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetUnaryNegationOperator``2(System.Type,System.Func{``0,``1}@)">
            <summary>
            Attempts to obtain the unaryNegation operator (-) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>        
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="unaryNegationtOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the unaryNegation operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetLogicalNotOperator``2(System.Type,System.Func{``0,``1}@)">
            <summary>
            Attempts to obtain the logicalNot operator (!) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>        
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="logicalNotOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the logicalNot operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetOnesComplementOperator``2(System.Type,System.Func{``0,``1}@)">
            <summary>
            Attempts to obtain the onesComplement operator (~) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>        
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="onesComplementOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the onesComplement operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetTrueOperator``1(System.Type,System.Func{``0,System.Boolean}@)">
            <summary>
            Attempts to obtain the true operator (true) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>                
            <param name="type">Type in which the operator is defined.</param>
            <param name="trueOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the true operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetFalseOperator``1(System.Type,System.Func{``0,System.Boolean}@)">
            <summary>
            Attempts to obtain the false operator (false) defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>                
            <param name="type">Type in which the operator is defined.</param>
            <param name="falseOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the false operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetImplicitOperator``2(System.Type,System.Func{``0,``1}@)">
            <summary>
            Attempts to obtain the implicit operator defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the argument.</typeparam>        
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="implicitOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the implicit operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.TryGetExplicitOperator``2(System.Type,System.Func{``0,``1}@)">
            <summary>
            Attempts to obtain the explicit operator defined within the specified <paramref name="type"/>
            that has the specified argument-types.
            </summary>
            <typeparam name="TIn">Type of the first argument.</typeparam>        
            <typeparam name="TOut">Return-type of the operator.</typeparam>
            <param name="type">Type in which the operator is defined.</param>
            <param name="explicitOperator">
            If this method returns <c>true</c>, refers to the operator; otherwise it will be <c>null</c>.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> is a closed type and the explicit operator with the exact
            argument types as specified has been defined within the specified <paramref name="type"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.FriendlyName(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Returns the friendly name of a type, useful for displaying type information in consoles or debug strings.
            </summary>
            <param name="type">A type.</param>
            <param name="useFullNames">Indicates whether or not the full name of all types should be used in the friendly name.</param>
            <param name="includeGenericParameters">
            Indicates whether or not the returned name should include the generic parameters of the type.
            </param>
            <returns>A friendly name of a type</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.ImplementsInterface``1(System.Type)">
            <summary>
            Determines whether or not the specified <paramref name="type"/> implements <typeparamref name="TInterface"/>.
            </summary>
            <typeparam name="TInterface">Type of an interface.</typeparam>
            <param name="type">A type.</param>        
            <returns>
            <c>true</c> if <paramref name="type"/> implements (at least one variation of) <typeparamref name="TInterface"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.ImplementsInterface(System.Type,System.Type)">
            <summary>
            Determines whether or not the specified <paramref name="type"/> implements the specified <paramref name="interfaceType"/>.
            </summary>
            <param name="type">A type.</param>
            <param name="interfaceType">An interface type.</param>
            <returns>
            <c>true</c> if <paramref name="type"/> implements (at least one variation of) the specified <paramref name="interfaceType"/>;
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> or <paramref name="interfaceType"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.GetInterfacesOfType``1(System.Type)">
            <summary>
            Returns all variations of <typeparamref name="TInterface" /> that are implemented by
            the specified <paramref name="type"/>.
            </summary>
            <typeparam name="TInterface">Type of an interface.</typeparam>
            <param name="type">Type that is checked for implementations of <typeparamref name="TInterface" />.</param>        
            <returns>
            All implemented variations of <typeparamref name="TInterface" /> that are implemented
            by the specified <paramref name="type"/>. If <paramref name="type"/> is not a class or value type or
            <paramref name="type"/> simply doesn't implement any instance of <typeparamref name="TInterface" />,
            an empty collection is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.GetInterfacesOfType(System.Type,System.Type[])">
            <summary>
            Returns all variations of the specified <paramref name="interfaceTypes" /> that are implemented by
            the specified <paramref name="type"/>.
            </summary>
            <param name="type">Type that must implement one of the specified <paramref name="interfaceTypes"/>.</param>
            <param name="interfaceTypes">A collection of interface types. These can contain generic type definitions.</param>
            <returns>
            All implemented variations of the specified <paramref name="interfaceTypes" /> that are implemented
            by the specified <paramref name="type"/>. If <paramref name="type"/> is not a class or value type or
            <paramref name="type"/> simply doesn't implement any instance of the specified <paramref name="interfaceTypes"/>,
            an empty collection is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> or <paramref name="interfaceTypes"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeExtensions.GetInterfacesOfType(System.Type,System.Type)">
            <summary>
            Returns all variations of the specified <paramref name="interfaceType" /> that are implemented by
            the specified <paramref name="type"/>.
            </summary>
            <param name="type">Type that must implement the specified <paramref name="interfaceType"/>.</param>
            <param name="interfaceType">An interface type. This can be a generic type definition of an interface.</param>
            <returns>
            All implemented variations of the specified <paramref name="interfaceType" /> that are implemented
            by the specified <paramref name="type"/>. If <paramref name="type"/> is not a class or value type,
            <paramref name="interfaceType"/> is not an interface type or <paramref name="type"/> simply doesn't
            implement any instance of the specified <paramref name="interfaceType"/>, an empty collection is returned.
            </returns>
        </member>
        <member name="T:Kingo.Reflection.TypeSet">
            <summary>
            Represents an immutable set of types.
            </summary>
        </member>
        <member name="F:Kingo.Reflection.TypeSet.Empty">
            <summary>
            Represents the empty set.
            </summary>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Reflection.TypeSet.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Contains``1">
            <summary>
            Determines whether or not this set contains the specified <typeparamref name="TItem"/>.
            </summary>
            <typeparam name="TItem">The type to check.</typeparam>
            <returns><c>true</c> if this set contains the specified <typeparamref name="TItem"/>; otherwise <c>false</c>.</returns>        
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Contains(System.Type)">
            <summary>
            Determines whether or not this set contains the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type to check.</param>
            <returns><c>true</c> if this set contains the specified <paramref name="type"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Add(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Adds all types defined in the assemblies that match the specified search criteria to this set.
            </summary>
            <param name="searchPattern">The pattern that is used to match specified files/assemblies.</param>
            <param name="path">A path pointing to a specific directory. If <c>null</c>, the <see cref="P:Kingo.Reflection.TypeSet.CurrentDirectory"/> is used.</param>
            <param name="searchOption">
            Indicates whether or not only the top-level directory is to be searched.        
            </param>
            <returns>A new set containing all types from the specified assemblies.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="searchPattern"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.IOException">
            An error occurred while reading files from the specified location(s).
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission to access the specified path or its files.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Add(System.Reflection.Assembly[])">
            <summary>
            Adds all types from the specified <paramref name="assemblies"/> to this set.
            </summary>
            <param name="assemblies">A collection of assemblies.</param>
            <returns>A new set where all types from the specified <paramref name="assemblies"/> were added.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assemblies"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Add(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Adds all types from the specified <paramref name="assemblies"/> to this set.
            </summary>
            <param name="assemblies">A collection of assemblies.</param>
            <returns>A new set where all types from the specified <paramref name="assemblies"/> were added.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assemblies"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Add(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Adds all the specified <paramref name="types"/> to this set.
            </summary>
            <param name="types">A collection of types.</param>
            <returns>A new set containing all the specified <paramref name="types"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="types"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Add``1">
            <summary>
            Adds the specified <typeparamref name="TItem" /> to the set.
            </summary>
            <typeparam name="TItem">The type to add to this set.</typeparam>
            <returns>A new set containing the specified <typeparamref name="TItem"/>.</returns>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Add(System.Type)">
            <summary>
            Adds the specified <paramref name="type" /> to the set.
            </summary>
            <param name="type">The type to add to this set.</param>
            <returns>A new set containing the specified <paramref name="type"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Remove(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Removes all types defined in the assemblies that match the specified search criteria to this set.
            <paramref name="searchPattern"/> from this set.
            </summary>
            <param name="searchPattern">The pattern that is used to match specified files/assemblies.</param>
            <param name="path">A path pointing to a specific directory. If <c>null</c>, the <see cref="P:Kingo.Reflection.TypeSet.CurrentDirectory"/> is used.</param>
            <param name="searchOption">
            Indicates whether or not only the top-level directory is to be searched.        
            </param>
            <returns>A new set containing all types from the specified assemblies.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="searchPattern"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.IOException">
            An error occurred while reading files from the specified location(s).
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Remove(System.Reflection.Assembly[])">
            <summary>
            Removes all types from the specified <paramref name="assemblies"/> from this set.
            </summary>
            <param name="assemblies">A collection of assemblies.</param>
            <returns>A new set where all types from the specified <paramref name="assemblies"/> have been removed.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assemblies"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Remove(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Removes all types from the specified <paramref name="assemblies"/> from this set.
            </summary>
            <param name="assemblies">A collection of assemblies.</param>
            <returns>A new set where all types from the specified <paramref name="assemblies"/> have been removed.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assemblies"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Remove(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Removes all specified <paramref name="types"/> from this set.
            </summary>
            <param name="types">A collection of types to remove.</param>
            <returns>A new set where all the specified <paramref name="types"/> have been removed.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="types"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Remove``1">
            <summary>
            Removes the specified <typeparamref name="TItem"/> from this set.
            </summary>
            <typeparam name="TItem">The type to remove.</typeparam>
            <returns>A new set where the specified <typeparamref name="TItem"/> has been removed.</returns>
        </member>
        <member name="M:Kingo.Reflection.TypeSet.Remove(System.Type)">
            <summary>
            Removes the specified <paramref name="type"/> from this set.
            </summary>
            <param name="type">The type to remove.</param>
            <returns>A new set where the specified <paramref name="type"/> has been removed.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.Reflection.TypeSet.CurrentDirectory">
            <summary>
            Returns the directory that has been configured as the default or current directory.
            </summary>
        </member>
        <member name="T:Kingo.StringExtensions">
            <summary>
            Contains extensions methods for instances of type <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Kingo.StringExtensions.RemovePostfix(System.String,System.String,System.StringComparison)">
            <summary>
            Removes the specified <paramref name="postfix"/> from <paramref name="value"/>.
            </summary>
            <param name="value">The value to remove the postfix from.</param>
            <param name="postfix">The postfix to remove.</param>
            <param name="comparison">
            Indicates which comparison must be used when checking if <paramref name="value"/> ends with <paramref name="postfix"/>.
            </param>
            <returns>
            The value where the postfix has been removed if <paramref name="value"/> ends with the specified <paramref name="postfix"/>;
            otherwise it will just return <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> or <paramref name="postfix"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="comparison"/> is not a valid value.
            </exception>
        </member>
        <member name="M:Kingo.StringExtensions.TryRemovePostfix(System.String,System.String,System.String@,System.StringComparison)">
            <summary>
            Attempts to remove the specified <paramref name="postfix"/> from the string.
            </summary>
            <param name="value">The value to remove the postfix from.</param>
            <param name="postfix">The postfix to remove.</param>
            <param name="newValue">
            If <paramref name="value"/> ends with <paramref name="postfix"/>, this parameter will be assigned the
            value where this postfix has been removed.
            </param>
            <param name="comparison">
            Indicates which comparison must be used when checking if <paramref name="value"/> ends with <paramref name="postfix"/>.
            </param>
            <returns><c>true</c> if the postfix was removed; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> or <paramref name="postfix"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="comparison"/> is not a valid value.
            </exception>
        </member>
        <member name="T:Kingo.Threading.AsyncMethod">
            <summary>
            Contains several helper methods for async methods.
            </summary>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Run(System.Func{System.Threading.Tasks.Task},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified asynchronous <paramref name="delegate"/> synchronously and
            returns a completed <see cref="T:System.Threading.Tasks.Task" /> while encapsulating any exceptions
            that might be thrown.
            </summary>        
            <param name="delegate">The delegate to invoke.</param>
            <param name="token">
            If specified, this token is checked before and after <paramref name="delegate"/> is executed,
            and a cancelled task is returned if cancellation has been requested.
            </param>
            <returns>A completed <see cref="T:System.Threading.Tasks.Task" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="delegate"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Run(System.Action,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="delegate"/> synchronously and
            returns a completed <see cref="T:System.Threading.Tasks.Task" /> while encapsulating any exceptions
            that might be thrown.
            </summary>
            <param name="delegate">The delegate to invoke.</param>
            <param name="token">
            If specified, this token is checked before and after <paramref name="delegate"/> is executed,
            and a cancelled task is returned if cancellation has been requested.
            </param>
            <returns>A completed <see cref="T:System.Threading.Tasks.Task" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="delegate"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Run``1(System.Func{``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="delegate"/> synchronously and
            returns a completed <see cref="T:System.Threading.Tasks.Task`1" /> while encapsulation any exceptions
            that might be thrown.
            </summary>
            <typeparam name="TResult">Type of the result of the delegate.</typeparam>
            <param name="delegate">The delegate to invoke.</param>
            <param name="token">
            If specified, this token is checked before and after <paramref name="delegate"/> is executed,
            and a cancelled task is returned if cancellation has been requested.
            </param>
            <returns>A completed <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="delegate"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.OrAbort(System.Threading.Tasks.Task,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})">
            <summary>
            Returns a task that completes as the specified <paramref name="task"/> is completed, unless
            the specified <paramref name="token"/> request cancellation before the task is completed or
            the specified <paramref name="timeout"/> expires. In that case, the returned task will complete
            in the cancelled state.
            </summary>
            <param name="task">The task to await.</param>
            <param name="token">Token that may signal cancellation of <paramref name="task"/>.</param>
            <param name="timeout">Optional timeout period that may also cancel the specified <paramref name="task"/>.</param>
            <returns>A new task representing the operation.</returns>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.WaitForCancellation(System.Threading.CancellationToken,System.Nullable{System.TimeSpan})">
            <summary>
            Creates and returns a <see cref="T:System.Threading.Tasks.Task"/> that will complete in the cancelled state as soon as the specified
            <paramref name="token"/> is signaled or as soon as the specified <paramref name="timeout"/> expires.
            </summary>
            <param name="token">
            The token that can be used to cancel and abort the operation immediately.
            </param>
            <param name="timeout">
            The maximum time to wait for the operation to be cancelled. If not specified, the timeout is infinite.
            </param>
            <returns>
            A task that will be completed as soon as <paramref name="token"/> is signaled or the specified
            <paramref name="timeout"/> expires.
            </returns>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Throw(System.Exception)">
            <summary>
            Creates and returns a new completed <see cref="T:System.Threading.Tasks.Task`1" /> that encapsulates
            the specified <paramref name="exception"/>.
            </summary>        
            <param name="exception">The exception to encapsulate.</param>
            <returns>A new completed <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exception"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Throw``1(System.Exception)">
            <summary>
            Creates and returns a new completed <see cref="T:System.Threading.Tasks.Task`1" /> that encapsulates
            the specified <paramref name="exception"/>.
            </summary>
            <typeparam name="TResult">Return-type of the <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
            <param name="exception">The exception to encapsulate.</param>
            <returns>A new completed <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exception"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Await(System.Threading.Tasks.Task,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Awaits the specified task, blocking the current thread, and unwraps any <see cref="T:System.AggregateException" />
            by rethrowing the first inner exception, just like the await-statement would do.
            </summary>
            <param name="task">The task to await.</param>
            <param name="token">Optional cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="task"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Await(System.Threading.Tasks.Task,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Awaits the specified task, blocking the current thread, and unwraps any <see cref="T:System.AggregateException" />
            by rethrowing the first inner exception, just like the await-statement would do.
            </summary>
            <param name="task">The task to await.</param>
            <param name="timeoutInMilliseconds">Maximum amount of time in milliseconds to wait for the task to complete.</param>
            <param name="token">Optional cancellation token.</param>
            <returns><c>true</c> if the Task completed execution within the allotted time; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="task"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="timeoutInMilliseconds"/> is not a valid timeout period.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Await(System.Threading.Tasks.Task,System.TimeSpan,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Awaits the specified task, blocking the current thread, and unwraps any <see cref="T:System.AggregateException" />
            by rethrowing the first inner exception, just like the await-statement would do.
            </summary>
            <param name="task">The task to await.</param>
            <param name="timeout">Maximum amount of time to wait for the task to complete.</param>
            <param name="token">Optional cancellation token.</param>
            <returns><c>true</c> if the Task completed execution within the allotted time; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="task"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.Await``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Awaits the specified task, blocking the current thread, and unwraps any <see cref="T:System.AggregateException" />
            by rethrowing the first inner exception, just like the await-statement would do.
            </summary>
            <param name="task">The task to await.</param>        
            <exception cref="T:System.ArgumentNullException">
            <paramref name="task"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.Threading.AsyncMethod.RethrowInnerException(System.AggregateException)">
            <summary>
            Re-throws the first inner exception of the specified <paramref name="exception"/> if it has any
            inner exceptions, without losing the stacktrace of this exception.
            </summary>
            <param name="exception">The exception to unwrap.</param>
            <returns><c>false</c> if the exception was not re-thrown.</returns>
            <exception cref="T:System.Exception">
            If <paramref name="exception"/> has any inner exceptions.
            </exception>
        </member>
        <member name="T:Kingo.Threading.Context`1">
            <summary>
            Represents a contextual container for a specific value. All instance methods on this class are thread-safe.
            </summary>
            <typeparam name="TValue">Type of the value to store.</typeparam>
        </member>
        <member name="M:Kingo.Threading.Context`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Threading.Context`1" /> class.
            </summary>
        </member>
        <member name="M:Kingo.Threading.Context`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.Threading.Context`1" /> class.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="P:Kingo.Threading.Context`1.Current">
            <summary>
            Returns the value of the item that is current with respect to the current thread.
            </summary>
        </member>
        <member name="M:Kingo.Threading.Context`1.OverrideThreadLocal(`0)">
            <summary>
            Sets the current value that is accessible by the current thread through <see cref="P:Kingo.Threading.Context`1.Current" />
            only as long as the scope is active.
            </summary>
            <param name="value">The value to set.</param>
            <returns>The scope that is to be disposed when ended.</returns>
        </member>
        <member name="M:Kingo.Threading.Context`1.OverrideAsyncLocal(`0)">
            <summary>
            Sets the current value that is accessible by all threads that share the same logical call context
            through <see cref="P:Kingo.Threading.Context`1.Current" /> as long as the scope is active.
            </summary>
            <param name="value">The value to set.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.InvalidOperationException">
            The call is made inside a thread local scope.
            </exception>
        </member>
        <member name="M:Kingo.Threading.Context`1.Override(`0)">
            <summary>
            Sets the current value that is accessible by all threads
            through <see cref="P:Kingo.Threading.Context`1.Current" /> as long as the scope is active.
            </summary>
            <param name="value">The value to set.</param>
            <returns>The scope that is to be disposed when ended.</returns>
            <exception cref="T:System.InvalidOperationException">
            The call is made inside an async local or thread local scope.
            </exception>
        </member>
        <member name="M:Kingo.Threading.Context`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Kingo.Threading.ContextScope`1">
            <summary>
            Represents a scope that is used to temporarily set the current value of a context.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="P:Kingo.Threading.ContextScope`1.Value">
            <summary>
            Returns the value that is managed by this scope.
            </summary>
        </member>
        <member name="M:Kingo.Threading.ContextScope`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
    </members>
</doc>
