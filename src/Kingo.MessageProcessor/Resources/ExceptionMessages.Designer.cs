//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kingo.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ExceptionMessages {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ExceptionMessages() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Kingo.Resources.ExceptionMessages", typeof(ExceptionMessages).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key of the event ({0}) must match the key of the aggregate ({1})..
        /// </summary>
        internal static string AggregateRoot_InvalidKey {
            get {
                return ResourceManager.GetString("AggregateRoot_InvalidKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version of the event ({0}) must be newer than the version of the aggregate ({1})..
        /// </summary>
        internal static string AggregateRoot_InvalidVersion {
            get {
                return ResourceManager.GetString("AggregateRoot_InvalidVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The connection is already closed..
        /// </summary>
        internal static string Connection_AlreadyClosed {
            get {
                return ResourceManager.GetString("Connection_AlreadyClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The connection is already open..
        /// </summary>
        internal static string Connection_AlreadyOpen {
            get {
                return ResourceManager.GetString("Connection_AlreadyOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More than one type found that could be used as an implementation of dependency &apos;{0}&apos;: {1}..
        /// </summary>
        internal static string DependencyClass_AmbigiousMatch {
            get {
                return ResourceManager.GetString("DependencyClass_AmbigiousMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message of type &apos;{0}&apos; could not be published because it is not valid. See ErrorTree for details..
        /// </summary>
        internal static string DomainEventBus_InvalidMessage {
            get {
                return ResourceManager.GetString("DomainEventBus_InvalidMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A handler for event &apos;{0}&apos; has already been registered..
        /// </summary>
        internal static string EventStream_HandlerAlreadyRegistered {
            get {
                return ResourceManager.GetString("EventStream_HandlerAlreadyRegistered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No event-handler was specified for domain-event of type &apos;{0}&apos;..
        /// </summary>
        internal static string EventStream_MissingEventHandler {
            get {
                return ResourceManager.GetString("EventStream_MissingEventHandler", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not restore aggregate of type &apos;{0}&apos; because it has no default constructor. Either declare a default constructor, or configure the factory to create the instance without calling a constructor..
        /// </summary>
        internal static string EventStreamHistory_ConstructorNotFound {
            get {
                return ResourceManager.GetString("EventStreamHistory_ConstructorNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not restore aggregate of type &apos;{0}&apos; because one of the specified events could not be applied to it. See inner exception for details..
        /// </summary>
        internal static string EventStreamHistory_InvalidEvents {
            get {
                return ResourceManager.GetString("EventStreamHistory_InvalidEvents", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Memento of type &apos;{0}&apos; did not return an instance of type &apos;{1}&apos;..
        /// </summary>
        internal static string EventStreamHistory_InvalidMemento {
            get {
                return ResourceManager.GetString("EventStreamHistory_InvalidMemento", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Version cannot be negative: {0}..
        /// </summary>
        internal static string IntXXVersion_NegativeValue {
            get {
                return ResourceManager.GetString("IntXXVersion_NegativeValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message is invalid. See ErrorTree for details..
        /// </summary>
        internal static string InvalidMessageException_InvalidMessage {
            get {
                return ResourceManager.GetString("InvalidMessageException_InvalidMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two or more attributes declared on MessageHandler &apos;{0}&apos; are assignable to &apos;{1}&apos;..
        /// </summary>
        internal static string MessageHandler_AmbiguousAttributeMatch {
            get {
                return ResourceManager.GetString("MessageHandler_AmbiguousAttributeMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A module in the query execution pipeline returned an invalid result. Expected result of type &apos;{0}&apos; but was &apos;{1}&apos;..
        /// </summary>
        internal static string MessageOut_InvalidMessageType {
            get {
                return ResourceManager.GetString("MessageOut_InvalidMessageType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot add a new mapping because the mapping has been switched to read-only state..
        /// </summary>
        internal static string MessageToStrategyMapping_IsReadOnly {
            get {
                return ResourceManager.GetString("MessageToStrategyMapping_IsReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot change this collection because it is read-only..
        /// </summary>
        internal static string ReadOnlyDictionary_NotSupported {
            get {
                return ResourceManager.GetString("ReadOnlyDictionary_NotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No aggregate of type &apos;{0}&apos; with the specified key ({1}) was found..
        /// </summary>
        internal static string Repository_AggregateNotFoundByKey {
            get {
                return ResourceManager.GetString("Repository_AggregateNotFoundByKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Aggregate of type &apos;{0}&apos; could not be updated because of a concurreny conflict. The expected version in the data store was &apos;{1}&apos;. .
        /// </summary>
        internal static string Repository_ConcurrenyException {
            get {
                return ResourceManager.GetString("Repository_ConcurrenyException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot delete aggregate of type &apos;{0}&apos; because the operation is not supported..
        /// </summary>
        internal static string Repository_DeleteNotSupported {
            get {
                return ResourceManager.GetString("Repository_DeleteNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Another aggregate with the same key already exists: &apos;{0}&apos;..
        /// </summary>
        internal static string Repository_DuplicateKey {
            get {
                return ResourceManager.GetString("Repository_DuplicateKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot update aggregate of type &apos;{0}&apos; because updates are not supported by repository &apos;{1}&apos;..
        /// </summary>
        internal static string Repository_UpdateNotSupported {
            get {
                return ResourceManager.GetString("Repository_UpdateNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No mapping exists for type &apos;{0}&apos;..
        /// </summary>
        internal static string TypeToContractMap_ContractNotFound {
            get {
                return ResourceManager.GetString("TypeToContractMap_ContractNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Both type &apos;{0}&apos; and type &apos;{1}&apos; are mapped to contract &apos;{2}&apos;..
        /// </summary>
        internal static string TypeToContractMap_SharedContract {
            get {
                return ResourceManager.GetString("TypeToContractMap_SharedContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No mapping exists for contract &apos;{0}&apos;..
        /// </summary>
        internal static string TypeToContractMap_TypeNotFound {
            get {
                return ResourceManager.GetString("TypeToContractMap_TypeNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto-increment of type &apos;{0}&apos; is not supported. Please override AggregateRoot&lt;,&gt;.NextVersion() or change the version type of the aggregate..
        /// </summary>
        internal static string Version_IncrementNotSupported {
            get {
                return ResourceManager.GetString("Version_IncrementNotSupported", resourceCulture);
            }
        }
    }
}
