<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kingo.MicroServices.Implementation</name>
    </assembly>
    <members>
        <member name="T:Kingo.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.AsyncMethodOperationStackTrace_IndexOutOfRange">
            <summary>
              Looks up a localized string similar to There is no element at index &apos;{0}&apos; (Count = {1})..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.EndpointAttribute_InvalidMessageKindSpecified">
            <summary>
              Looks up a localized string similar to Invalid MessageKind ({0}) specified. Endpoints only support commands and events..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.EndpointNameFormat_IllegalCharacter">
            <summary>
              Looks up a localized string similar to Name &apos;{0}&apos; contains illegal character &apos;{1}&apos; encountered at index &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.EndpointNameFormat_MissingClosingBracket">
            <summary>
              Looks up a localized string similar to Name &apos;{0}&apos; is missing the closing bracket for placeholder started at index &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.EndpointNameFormat_UnknownPlaceholderName">
            <summary>
              Looks up a localized string similar to Unknown placeholder specified: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MessageHandlerClass_CouldNotResolveMessageHandler">
            <summary>
              Looks up a localized string similar to Could not resolve message handler of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MessageIdFactory_MultipleFactoriesAddedForSameMessageType">
            <summary>
              Looks up a localized string similar to Cannot generate message-id for message of type &apos;{0}&apos; because multiple factories were configured for this message-type: {1}..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MicroProcessorBuilder_InvalidProcessorType">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; cannot be used as a MicroProcessor. Please provider a non-abstract, non-generic MicroProcessor-type..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MicroProcessorComponent_InvalidComponentLifetime">
            <summary>
              Looks up a localized string similar to Could not add component of type &apos;{0}&apos; to the service collection because it is configured with an unsupported lifetime ({1}) for this type..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MicroProcessorComponent_TypeNotSupported">
            <summary>
              Looks up a localized string similar to Cannot use instance of type &apos;{0}&apos; as a MicroProcessorComponent. Only non-abstract classes without generic parameters are supported..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MicroProcessorComponentInterface_InterfaceMethodNotFound">
            <summary>
              Looks up a localized string similar to Could not find implementation of method &apos;{0}.{1}(...)&apos; on type &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MicroServiceBus_CircularDependencyDetected">
            <summary>
              Looks up a localized string similar to Cannot publish the specified event(s) inside the constructor of a type that is registered as a &apos;{0}&apos;-type, because this causes a circular reference..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MicroServiceBusClient_EndpointNotSupported">
            <summary>
              Looks up a localized string similar to Cannot connect endpoint &apos;{0}&apos; (Name = {1}) to the service-bus because it is not supported by this client..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MicroServiceBusController_AlreadyStarted">
            <summary>
              Looks up a localized string similar to Controller of type &apos;{0}&apos; cannot be started because it has already been started..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MicroServiceBusController_CannotPublishEvents">
            <summary>
              Looks up a localized string similar to Controller of type &apos;{0}&apos; cannot publish the specified event(s) because it has not been (fully) started yet..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.MicroServiceBusController_CannotSendCommands">
            <summary>
              Looks up a localized string similar to Controller of type &apos;{0}&apos; cannot send the specified command(s) because it has not been (fully) started yet..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.StoreAndForwardQueueResolver_CannotFindConstructor">
            <summary>
              Looks up a localized string similar to Cannot resolve queue of type &apos;{0}&apos; because the resolver cannot find the appropriate constructor. Please make sure this type declares exactly one public constructor..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.StoreAndForwardQueueResolver_CircularDependencyDetected">
            <summary>
              Looks up a localized string similar to Cannot resolve queue of type &apos;{0}&apos; because a circular dependency was detected in the pipeline..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.UnitOfWork_EnlistmentTimeout">
            <summary>
              Looks up a localized string similar to The operation to enlist to the current unit of work (as a result of modification of aggregate of type &apos;{0}&apos;), was aborted because execution time exceeded the specified timeout ({1})..
            </summary>
        </member>
        <member name="P:Kingo.ExceptionMessages.UnitOfWork_InvalidMode">
            <summary>
              Looks up a localized string similar to The specified mode is invalid: {0}..
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.AsyncMethodOperation`1">
            <summary>
            Represents an <see cref="T:Kingo.MicroServices.IAsyncMethodOperation" /> that can be executed inside a <see cref="T:Kingo.MicroServices.MicroProcessor"/> pipeline.
            </summary>
            <typeparam name="TResult">Type of the result of the operation.</typeparam>
        </member>
        <member name="P:Kingo.MicroServices.AsyncMethodOperation`1.Method">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.AsyncMethodOperation`1.Message">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.AsyncMethodOperation`1.Context">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.AsyncMethodOperation`1.Token">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.AsyncMethodOperation`1.Type">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.AsyncMethodOperation`1.Kind">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.AsyncMethodOperation`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.AsyncMethodOperation`1.ExecuteAsync">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.BusinessRuleException">
            <summary>
            This type of exception is thrown when an attempted operation is not allowed by the application logic.
            </summary>    
        </member>
        <member name="M:Kingo.MicroServices.BusinessRuleException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.BusinessRuleException" /> class.
            </summary>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of the exception.</param>
        </member>
        <member name="M:Kingo.MicroServices.BusinessRuleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.BusinessRuleException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Kingo.MicroServices.BusinessRuleException.AsBadRequestException(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.ConflictException">
            <summary>
            This exception is thrown by a <see cref="T:Kingo.MicroServices.IMicroProcessor" /> when a command or query failed because a concurrency
            exception occurred while saving all changes. This type semantically maps to HTTP response code <c>409</c> (conflict).
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.ConflictException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.ConflictException" /> class.
            </summary>        
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>        
        </member>
        <member name="M:Kingo.MicroServices.ConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.ConflictException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Kingo.MicroServices.ConflictException.ErrorCode">
            <summary>
            Returns <c>409</c>.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.Controllers.EndpointNameFormat">
            <summary>
            Represents a specific format for the name of an endpoint.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameFormat.ResolveName(Kingo.MicroServices.IMicroServiceBusEndpoint)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameFormat.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameFormat.Parse(System.String)">
            <summary>
            Parses the specified <paramref name="format"/> and returns a new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameFormat"/> that
            can be used to resolve the name of a <see cref="T:Kingo.MicroServices.IMicroServiceBusEndpoint" />. The format can
            contain the placeholders [service], [handler] and [message], which will be used to insert the name of
            the service, message handler or message respectively.
            </summary>
            <param name="format">The format to parse.</param>
            <returns>A new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameFormat"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="format"/> is not a valid name-format.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.Controllers.EndpointNameResolver">
            <summary>
            Serves as a name-resolver for endpoints for a specific set of message types.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameResolver.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" /> class.
            </summary>
            <param name="defaultNameFormat">
            Indicates what the name-format of an endpoint is for messages of which the format
            is not explicitly configured.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="defaultNameFormat"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="defaultNameFormat"/> is not valid name-format.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameResolver.ToString">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.Controllers.EndpointNameResolver.DefaultNameFormat">
            <summary>
            Returns the default name-format of an endpoint; this format is applied when
            a specific name-format for a certain message is not specified.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameResolver.AddNameFormat``1(System.String)">
            <summary>
            Adds a specific name-format for messages of type <typeparamref name="TMessage"/>.
            </summary>
            <typeparam name="TMessage">Type of a message.</typeparam>
            <param name="format">The name-format to use for endpoints handling messages of type <typeparamref name="TMessage"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="format"/> is not a valid name-format.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameResolver.AddNameFormat(System.String,System.Type[])">
            <summary>
            Adds a specific name-format for messages which type is specified in <paramref name="messageTypes"/>.
            </summary>
            <param name="format">
            The name-format to use for endpoints handling messages which type is specified in <paramref name="messageTypes"/>.
            </param>
            <param name="messageTypes">
            A collection of message-type to match when resolving the correct name-format to use.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> or <paramref name="messageTypes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="format"/> is not a valid name-format.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameResolver.AddNameFormat(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Adds a specific name-format for messages which type is specified in <paramref name="messageTypes"/>.
            </summary>
            <param name="format">
            The name-format to use for endpoints handling messages which type is specified in <paramref name="messageTypes"/>.
            </param>
            <param name="messageTypes">
            A collection of message-type to match when resolving the correct name-format to use.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> or <paramref name="messageTypes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="format"/> is not a valid name-format.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.EndpointNameResolver.ResolveName(Kingo.MicroServices.IMicroServiceBusEndpoint)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.Controllers.IEndpointNameResolver">
            <summary>
            When implemented by a class, represents a component that can resolve the name of an endpoint.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.IEndpointNameResolver.ResolveName(Kingo.MicroServices.IMicroServiceBusEndpoint)">
            <summary>
            Resolves the name of the specified <paramref name="endpoint"/>. This name will be used
            to name/identify the name of the queue from which the messages are pulled for this endpoint.
            </summary>
            <param name="endpoint">An endpoint for which the name must be resolved.</param>
            <returns></returns>
        </member>
        <member name="T:Kingo.MicroServices.Controllers.IMicroProcessorBuilder">
            <summary>
            When implemented by a class, represents a builder that can be used to configure
            the <see cref="T:Kingo.MicroServices.IMicroProcessor" /> to use in your service.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Controllers.IMicroProcessorBuilder.MessageHandlers">
            <summary>
            Represents a collection of <see cref="T:Kingo.MicroServices.IMessageHandler`1"/> types that will be
            registered and used by the <see cref="T:Kingo.MicroServices.IMicroProcessor" />.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Controllers.IMicroProcessorBuilder.Queries">
            <summary>
            Represents a collection of <see cref="T:Kingo.MicroServices.IQuery`1"/> and <see cref="T:Kingo.MicroServices.IQuery`2"/> that will be
            registered and used by the <see cref="T:Kingo.MicroServices.IMicroProcessor" />.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Controllers.IMicroProcessorBuilder.MicroServiceBusControllers">
            <summary>
            Represents a collection of <see cref="T:Kingo.MicroServices.IMicroServiceBus"/> types that we be used to build a single
            <see cref="T:Kingo.MicroServices.IMicroServiceBus"/> instance to be used by the <see cref="T:Kingo.MicroServices.IMicroProcessor" />.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Controllers.IMicroProcessorBuilder.MessageIdFactory">
            <summary>
            Represents a collection of <see cref="T:Kingo.MicroServices.IMessageIdFactory`1" /> types that will be
            registered and used by the <see cref="T:Kingo.MicroServices.IMicroProcessor" />.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.IMicroProcessorBuilder.Add(Kingo.MicroServices.Controllers.MicroProcessorComponentCollection)">
            <summary>
            Adds the specified <paramref name="components"/> to be registered and used by the <see cref="T:Kingo.MicroServices.IMicroProcessor" />.
            </summary>
            <param name="components">The components to add.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="components"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.Controllers.IMicroServiceBusClient">
            <summary>
            Represents a service-bus client that allows messages to be sent and received to and from it.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.IMicroServiceBusClient.ConnectToEndpointAsync(Kingo.MicroServices.IMicroServiceBusEndpoint)">
            <summary>
            Connects the specified <paramref name="endpoint"/> to the service-bus.
            </summary>
            <param name="endpoint">The endpoint to connect.</param>
            <returns><c>true</c> if the endpoint was connected; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="endpoint"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.Controllers.IMicroServiceBusConnection">
            <summary>
            When implemented by a class, represents a connection to a service-bus.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.IMicroServiceBusConnection.Close">
            <summary>
            Closes the connection. 
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The connection has already been disposed.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.Controllers.MessageHandlerCollection">
            <summary>
            Represents a collection of message handler instances and types.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MessageHandlerCollection.AddInstance(System.Object)">
            <summary>
            Adds the specified <paramref name="messageHandler"/> as a singleton instance for every <see cref="T:Kingo.MicroServices.IMessageHandler`1"/>
            implementation it has. If <paramref name="messageHandler"/> does not implement this interface, it is simply ignored.
            </summary>
            <param name="messageHandler">The handler to register.</param>
            <returns><c>true</c> if the instance was added; otherwise <c>false</c>.</returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MessageHandlerCollection.AddInstance``1(System.Action{``0,Kingo.MicroServices.IMessageHandlerOperationContext},System.Boolean)">
            <summary>
            Adds the specified <paramref name="messageHandler" /> as a singleton instance. NB: this message handler will only
            receive internal messages (events).
            </summary>
            <typeparam name="TMessage">Type of the message that is handled by the specified <paramref name="messageHandler"/>.</typeparam>
            <param name="messageHandler">The handler to register.</param>
            <param name="acceptScheduledEvents">Indicates whether or not the handler accepts events that were scheduled.</param>
            <returns><c>true</c> if the instance was added; otherwise <c>false</c>.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MessageHandlerCollection.AddInstance``1(System.Func{``0,Kingo.MicroServices.IMessageHandlerOperationContext,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Adds the specified <paramref name="messageHandler" /> as a singleton instance.
            </summary>
            <typeparam name="TMessage">Type of the message that is handled by the specified <paramref name="messageHandler"/>.</typeparam>
            <param name="messageHandler">The handler to register.</param>
            <param name="acceptScheduledEvents">Indicates whether or not the handler accepts events that were scheduled.</param>
            <returns><c>true</c> if the instance was added; otherwise <c>false</c>.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MessageHandlerCollection.AddInstance``1(Kingo.MicroServices.IMessageHandler{``0})">
            <summary>
            Adds the specified <paramref name="messageHandler" /> as a singleton instance.
            </summary>
            <typeparam name="TMessage">Type of the message that is handled by the specified <paramref name="messageHandler"/>.</typeparam>
            <param name="messageHandler">The handler to register.</param>
            <returns><c>true</c> if the instance was added; otherwise <c>false</c>.</returns>  
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MessageHandlerCollection.Add(Kingo.MicroServices.MicroProcessorComponent)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MessageHandlerCollection.AddSpecificComponentsTo(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.Controllers.MessageIdFactoryCollection">
            <summary>
            Represents a collection of <see cref="T:Kingo.MicroServices.MessageIdFactoryType" /> types.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MessageIdFactoryCollection.AddInstance``1(System.Func{``0,System.String})">
            <summary>
            Adds the specified <paramref name="factory" /> to this collection.
            </summary>
            <typeparam name="TMessage">Type of the message that the specified <paramref name="factory"/> can generate identifiers for.</typeparam>
            <param name="factory">The factory to add.</param>
            <returns><c>true</c> if the <paramref name="factory"/> was added; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="factory"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MessageIdFactoryCollection.AddInstance``1(Kingo.MicroServices.IMessageIdFactory{``0})">
            <summary>
            Adds the specified <paramref name="factory" /> to this collection.
            </summary>
            <typeparam name="TMessage">Type of the message that the specified <paramref name="factory"/> can generate identifiers for.</typeparam>
            <param name="factory">The factory to add.</param>
            <returns><c>true</c> if the <paramref name="factory"/> was added; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="factory"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MessageIdFactoryCollection.Add(Kingo.MicroServices.MicroProcessorComponent)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MessageIdFactoryCollection.AddSpecificComponentsTo(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.Controllers.MicroProcessorComponentCollection">
            <summary>
            Serves as a base-class for collections of specific <see cref="T:Kingo.MicroServices.MicroProcessorComponent" /> types
            that are to be added to a <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroProcessorComponentCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.Controllers.MicroProcessorComponentCollection" /> class.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Controllers.MicroProcessorComponentCollection.Count">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroProcessorComponentCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroProcessorComponentCollection.Add(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Adds all types defined in the assemblies that match the specified search criteria to this collection.
            </summary>
            <param name="searchPattern">The pattern that is used to match specified files/assemblies.</param>
            <param name="path">A path pointing to a specific directory. If <c>null</c>, the <see cref="P:Kingo.Reflection.TypeSet.CurrentDirectory"/> is used.</param>
            <param name="searchOption">
            Indicates whether or not only the top-level directory is to be searched.        
            </param>
            <returns>A new set containing all types from the specified assemblies.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="searchPattern"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.IOException">
            An error occurred while reading files from the specified location(s).
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission to access the specified path or its files.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroProcessorComponentCollection.Add(System.Type[])">
            <summary>
            Adds all types of the specified <paramref name="types"/> that satisfy the constraints of this
            collection's component to this collection.
            </summary>
            <param name="types">The types to add.</param>
            <returns>The number of components that were added to this collection.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="types"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroProcessorComponentCollection.Add(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Adds all types of the specified <paramref name="types"/> that satisfy the constraints of this
            collection's component to this collection.
            </summary>
            <param name="types">The types to add.</param>
            <returns>The number of components that were added to this collection.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="types"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroProcessorComponentCollection.Add``1">
            <summary>
            Adds the specified <typeparamref name="TComponent "/> as a component if and only if this type
            satisfies the constraints of this collection's component type.
            </summary>
            <returns><c>true</c> if the type was added; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroProcessorComponentCollection.Add(System.Type)">
            <summary>
            Adds the specified <paramref name="type"/> as a component if and only if this type satisfies
            the constraints of this collection's component type.
            </summary>
            <param name="type">The type to add.</param>
            <returns><c>true</c> if the type was added; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroProcessorComponentCollection.Add(Kingo.MicroServices.MicroProcessorComponent)">
            <summary>
            Adds the specified <paramref name="component"/> to this collection if the same type wasn't added before.
            </summary>
            <param name="component">The component to add.</param>
            <returns><c>true</c> if the type was added; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroProcessorComponentCollection.AddSpecificComponentsTo(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds types and mappings to the specified <paramref name="services"/> that are specific to this collection.
            </summary>
            <param name="services">A service collection.</param>
            <returns>The resulting collection.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="services"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.Controllers.MicroServiceBusClient`1">
            <summary>
            Serves as a base-class implementation of the <see cref="T:Kingo.MicroServices.Controllers.IMicroServiceBusClient"/> interface.
            </summary>
            <typeparam name="TMessage">Type of the messages that are sent to or received from the service-bus.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.Controllers.MicroServiceBusClient`1" /> class.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.NameResolverMap">
            <summary>
            Returns the map that contains one endpoint name-resolver per message type.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.CreateCommandEndpointNameResolver">
            <summary>
            Creates and returns a new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" /> that will be used to resolve
            the name of each endpoint that handles <see cref="F:Kingo.MicroServices.MessageKind.Command">commands</see>.
            </summary>
            <returns>A new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" />.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.CreateEventEndpointNameResolver">
            <summary>
            Creates and returns a new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" /> that will be used to resolve
            the name of each endpoint that handles <see cref="F:Kingo.MicroServices.MessageKind.Event">events</see>.
            </summary>
            <returns>A new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" />.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.CreateQueryRequestEndpointNameResolver">
            <summary>
            Creates and returns a new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" /> that will be used to resolve
            the name of each endpoint that handles <see cref="F:Kingo.MicroServices.MessageKind.QueryRequest">(query) requests</see>.
            </summary>
            <returns>A new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" />.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.CreateQueryResponseEndpointNameResolver">
            <summary>
            Creates and returns a new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" /> that will be used to resolve
            the name of each endpoint that handles <see cref="F:Kingo.MicroServices.MessageKind.QueryResponse">(query) responses</see>.
            </summary>
            <returns>A new <see cref="T:Kingo.MicroServices.Controllers.EndpointNameResolver" />.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.ConnectToEndpointAsync(Kingo.MicroServices.IMicroServiceBusEndpoint)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.ConnectToCommandQueueAsync(Kingo.MicroServices.IMicroServiceBusEndpoint,System.String)">
            <summary>
            Connects the specified <paramref name="endpoint"/> to the associated command-queue of the service-bus.
            </summary>
            <param name="endpoint">The endpoint to connect.</param>
            <param name="endpointName">Name of the endpoint/queue to connect to.</param>
            <returns>The connection that has been made.</returns>
            <exception cref="T:System.ArgumentException">
            The specified <paramref name="endpoint"/> is not supported by this client.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.ConnectToEventQueueAsync(Kingo.MicroServices.IMicroServiceBusEndpoint,System.String)">
            <summary>
            Connects the specified <paramref name="endpoint"/> to the associated event-queue of the service-bus.
            </summary>
            <param name="endpoint">The endpoint to connect.</param>
            <param name="endpointName">Name of the endpoint/queue to connect to.</param>
            <returns>The connection that has been made.</returns>
            <exception cref="T:System.ArgumentException">
            The specified <paramref name="endpoint"/> is not supported by this client.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.ConnectToQueryRequestQueueAsync(Kingo.MicroServices.IMicroServiceBusEndpoint,System.String)">
            <summary>
            Connects the specified <paramref name="endpoint"/> to the associated query request-queue of the service-bus.
            </summary>
            <param name="endpoint">The endpoint to connect.</param>
            <param name="endpointName">Name of the endpoint/queue to connect to.</param>
            <returns>The connection that has been made.</returns>
            <exception cref="T:System.ArgumentException">
            The specified <paramref name="endpoint"/> is not supported by this client.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.ConnectToQueryResponseQueueAsync(Kingo.MicroServices.IMicroServiceBusEndpoint,System.String)">
            <summary>
            Connects the specified <paramref name="endpoint"/> to the associated query response-queue of the service-bus.
            </summary>
            <param name="endpoint">The endpoint to connect.</param>
            <param name="endpointName">Name of the endpoint/queue to connect to.</param>
            <returns>The connection that has been made.</returns>
            <exception cref="T:System.ArgumentException">
            The specified <paramref name="endpoint"/> is not supported by this client.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.NewEndpointNotSupportedException(Kingo.MicroServices.IMicroServiceBusEndpoint,System.String)">
            <summary>
            Creates and returns an exception that can be thrown when an attempt is made to connect to the specified
            <paramref name="endpoint"/> while this endpoint is not supported (e.g. the message kind is not supported).
            </summary>
            <param name="endpoint">The endpoint that is not supported by this client.</param>
            <param name="endpointName">Name of the endpoint/queue to connect to.</param>
            <returns>A new exception that indicates that the specified <paramref name="endpoint"/> is not supported.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="endpoint"/> or <paramref name="endpointName"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.SendCommandsAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessageToDispatch})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.SendAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sends all specified <paramref name="commands"/> to the appropriate service(s).
            By default, every command is sent one after another. If you wish to support sending
            entire batches at once, you may override this method to provide your own implementation.
            </summary>
            <param name="commands">The commands to send.</param>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.SendAsync(`0)">
            <summary>
            Sends the specified <paramref name="command"/>.
            </summary>
            <param name="command">The command to send.</param>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.PublishEventsAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessageToDispatch})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.PublishAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Publishes all specified <paramref name="events"/>. By default, every event is published
            one after another. If you wish to support publishing entire batches at once, you may
            override this method to provide your own implementation.
            </summary>
            <param name="events">The events to publish.</param>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.PublishAsync(`0)">
            <summary>
            Publishes the specified <paramref name="event"/>.
            </summary>
            <param name="event">The event to publish.</param>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.Pack(Kingo.MicroServices.IMessageToDispatch)">
            <summary>
            Packs the specified <paramref name="message"/> into a message that can be sent to the service-bus.
            </summary>
            <param name="message">The message to pack.</param>
            <returns>A message that is ready to be dispatched by the service-bus.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.Unpack(`0,Kingo.MicroServices.IMessageEnvelopeBuilder)">
            <summary>
            Unpacks the specified <paramref name="message"/> and returns the message to process by an endpoint.
            </summary>
            <param name="message">The message to unpack.</param>
            <param name="messageBuilder">A builder that can be used to build the message to return.</param>
            <returns>The contents of the specified <paramref name="message"/>.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.Close">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusClient`1.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.Controllers.MicroServiceBusConnection">
            <summary>
            Serves as a base-class implementation of the <see cref="T:Kingo.MicroServices.Controllers.IMicroServiceBusConnection"/> interface.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusConnection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.Controllers.MicroServiceBusConnection" /> class.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Controllers.MicroServiceBusConnection.CloseToken">
            <summary>
            Returns a token that is signaled when a request has been made to close this connection.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.Controllers.MicroServiceBusConnection.IsClosed">
            <summary>
            Indicates whether or not the connection has been closed.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusConnection.Close">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusConnection.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.Controllers.MicroServiceBusController">
            <summary>
            When implemented, represents a controller that can send and receive messages to and from a
            service-bus and routes any received message to a <see cref="T:Kingo.MicroServices.IMicroServiceBusEndpoint" />
            for further processing.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.#ctor(Kingo.MicroServices.IMicroProcessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.Controllers.MicroServiceBusController" /> class.
            </summary>
            <param name="processor">The processor that will be processing all commands and/or events.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="processor"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.StartAsync(System.Threading.CancellationToken)">
            <summary>
            The start method creates a new <see cref="T:Kingo.MicroServices.Controllers.IMicroServiceBusClient"/> and attempts to connect
            every <see cref="T:Kingo.MicroServices.IMicroServiceBusEndpoint"/> that is provided by the <see cref="T:Kingo.MicroServices.IMicroProcessor"/>
            to the service-bus through this client. If <paramref name="cancellationToken"/> is signaled before the
            client is fully created and connected, the operation is aborted and the controller remains in the
            stopped/disconnected state.
            </summary>
            <param name="cancellationToken">Token that can be used to abort the operation.</param>
            <exception cref="T:System.ObjectDisposedException">
            The controller has already been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The controller has already been started.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.StopAsync(System.Threading.CancellationToken)">
            <summary>
            The stop method closes and disposes the <see cref="T:Kingo.MicroServices.Controllers.IMicroServiceBusClient"/> gracefully,
            unless the specified <paramref name="cancellationToken"/> is signaled to abort the operation
            quickly.
            </summary>
            <param name="cancellationToken">Token that can be used to abort the operation.</param>
            <exception cref="T:System.ObjectDisposedException">
            The controller has already been disposed.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.SendCommandsAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessageToDispatch})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.PublishEventsAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessageToDispatch})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.CreateClientAsync">
            <summary>
            Creates and returns a new <see cref="T:Kingo.MicroServices.Controllers.IMicroServiceBusClient"/> that can be used send and receive
            messages to and from a service-bus.
            </summary>
            <returns>A new client.</returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusController.DefineServiceContract(Kingo.Reflection.TypeSet)">
            <summary>
            Creates and returns a <see cref="T:Kingo.Reflection.TypeSet"/> that defines which types are part of this service's service contract.
            </summary>
            <param name="serviceContract">The default service contract.</param>
            <returns>A <see cref="T:Kingo.Reflection.TypeSet"/> that contains all messages that are part of this service's service contract.</returns>
        </member>
        <member name="T:Kingo.MicroServices.Controllers.MicroServiceBusControllerCollection">
            <summary>
            Represents a collection of <see cref="T:Kingo.MicroServices.Controllers.MicroServiceBusController"/> types.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusControllerCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.Controllers.MicroServiceBusControllerCollection" /> class.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusControllerCollection.AddStoreAndForwardQueue``1">
            <summary>
            Adds <typeparamref name="TQueue"/> as a <see cref="T:Kingo.MicroServices.Controllers.StoreAndForwardQueue"/> that will be placed on top
            of the <see cref="T:Kingo.MicroServices.IMicroServiceBus"/> pipeline.
            </summary>
            <typeparam name="TQueue">The type to register as a controller.</typeparam>
            <returns>
            <c>true</c> if <typeparamref name="TQueue"/> was added as a controller; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusControllerCollection.AddStoreAndForwardQueue(System.Type)">
            <summary>
            Adds the specified <paramref name="type"/> as a <see cref="T:Kingo.MicroServices.Controllers.StoreAndForwardQueue"/> that will be placed on top
            of the <see cref="T:Kingo.MicroServices.IMicroServiceBus"/> pipeline, if and only if <paramref name="type"/> is a <see cref="T:Kingo.MicroServices.Controllers.StoreAndForwardQueue"/>.
            </summary>
            <param name="type">The type to register as a queue.</param>
            <returns>
            <c>true</c> if <paramref name="type"/> was added as a queue; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusControllerCollection.Add``1">
            <summary>
            Adds <typeparamref name="TController"/> as a <see cref="T:Microsoft.Extensions.Hosting.IHostedService" />.
            </summary>
            <typeparam name="TController">The type to register as a controller.</typeparam>
            <returns>
            <c>true</c> if <typeparamref name="TController"/> was added as a controller; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusControllerCollection.Add``1(System.Boolean)">
            <summary>
            Adds <typeparamref name="TController"/> as a <see cref="T:Microsoft.Extensions.Hosting.IHostedService" />.
            If <paramref name="isMainController"/> is <c>true</c>, the controller is also registered as
            a <see cref="T:Kingo.MicroServices.IMicroServiceBus" />.
            </summary>
            <typeparam name="TController">The type to register as a controller.</typeparam>
            <param name="isMainController">
            Indicates whether or not the specified controller is owned by the current service.
            If <c>true</c>, the specified controller <typeparamref name="TController"/> will be registered
            as the <see cref="T:Kingo.MicroServices.IMicroServiceBus"/> of this service.
            </param>
            <returns>
            <c>true</c> if <typeparamref name="TController"/> was added as a controller; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusControllerCollection.Add(System.Type,System.Boolean)">
            <summary>
            Adds the specified <paramref name="type"/> as a <see cref="T:Microsoft.Extensions.Hosting.IHostedService" /> if and only if
            <paramref name="type"/> is a <see cref="T:Kingo.MicroServices.Controllers.MicroServiceBusController" />.
            If <paramref name="isMainController"/> is <c>true</c>, the controller is also registered as
            a <see cref="T:Kingo.MicroServices.IMicroServiceBus" />.
            </summary>
            <param name="type">The type to register as a controller.</param>
            <param name="isMainController">
            Indicates whether or not the specified controller is owned by the current service.
            If <c>true</c>, the specified controller <paramref name="type"/> will be registered as the <see cref="T:Kingo.MicroServices.IMicroServiceBus"/>
            of this service.
            </param>
            <returns>
            <c>true</c> if <paramref name="type"/> was added as a controller; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusControllerCollection.Add(Kingo.MicroServices.MicroProcessorComponent)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusControllerCollection.AddSpecificComponentsTo(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusControllerType.Copy(System.Collections.Generic.IEnumerable{System.Type})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusControllerType.AddTransientTypeMappingTo(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.Controllers.MicroServiceBusControllerType.AddScopedTypeMappingTo(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.Controllers.QueryCollection">
            <summary>
            Represents a collection of query-types.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.QueryCollection.Add(Kingo.MicroServices.MicroProcessorComponent)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.Controllers.ServiceCollectionExtensions">
            <summary>
            Contains extension methods for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> instances.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.ServiceCollectionExtensions.AddMicroProcessor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Kingo.MicroServices.Controllers.IMicroProcessorBuilder})">
            <summary>
            Configures and registers a <see cref="T:Kingo.MicroServices.MicroProcessor" /> to use in this application or service.
            </summary>        
            <param name="services">A collection of services.</param>
            <param name="processorConfiguration">
            Optional configuration callback that can be used to configure the specific parts of the processor.
            </param>
            <returns>A configured services-collection.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="services"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.ServiceCollectionExtensions.AddMicroProcessor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Kingo.MicroServices.Controllers.IMicroProcessorBuilder})">
            <summary>
            Configures and registers a specific type of <see cref="T:Kingo.MicroServices.IMicroProcessor" /> to use in this application or service.
            </summary>
            <typeparam name="TProcessor">Type of the processor to register.</typeparam>
            <param name="services">A collection of services.</param>
            <param name="processorConfiguration">
            Optional configuration callback that can be used to configure the specific parts of the processor.
            </param>
            <returns>A configured service collection.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="services"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.Controllers.StoreAndForwardQueue">
            <summary>
            When implemented, represents a queue that is used to temporarily store all messages that are
            produced by a <see cref="T:Kingo.MicroServices.IMicroProcessor"/> operation, such that any mutations in the write-store
            can be persisted within the same transaction as the messages that are produced by the operation.
            The <see cref="T:Kingo.MicroServices.Controllers.StoreAndForwardQueue"/> uses a message pump, which function is controlled by
            the <see cref="M:Microsoft.Extensions.Hosting.IHostedService.StartAsync(System.Threading.CancellationToken)"/> and <see cref="M:Microsoft.Extensions.Hosting.IHostedService.StopAsync(System.Threading.CancellationToken)"/> functions,
            to read these messages from the queue in an independent, asynchronous process/thread, which then
            attempts to forwards all messages to another <see cref="T:Kingo.MicroServices.IMicroServiceBus" />.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.StoreAndForwardQueue.#ctor(Kingo.MicroServices.IMicroServiceBus)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.Controllers.StoreAndForwardQueue" /> class.
            </summary>
            <param name="microServiceBus">The <see cref="T:Kingo.MicroServices.IMicroServiceBus"/> to which all messages are to be forwarded.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="microServiceBus"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.MicroServices.Controllers.StoreAndForwardQueue.MicroServiceBus">
            <summary>
            Returns the <see cref="T:Kingo.MicroServices.IMicroServiceBus"/> to which all messages are to be forwarded.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.StoreAndForwardQueue.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Starts the message pump of this queue.
            </summary>
            <param name="cancellationToken">Token that can be used to abort the operation.</param>
            <exception cref="T:System.ObjectDisposedException">
            The queue has already been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The message pump has already been started.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.StoreAndForwardQueue.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stops the message pump of this queue.
            </summary>
            <param name="cancellationToken">Token that can be used to abort the operation.</param>
            <exception cref="T:System.ObjectDisposedException">
            The queue has already been disposed.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.StoreAndForwardQueue.SendCommandsAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessageToDispatch})">
            <summary>
            Stores all specified <paramref name="commands"/> in the queue.
            </summary>
            <param name="commands">The commands to store.</param>
            <exception cref="T:System.ObjectDisposedException">
            The queue has already been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="commands"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.Controllers.StoreAndForwardQueue.PublishEventsAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessageToDispatch})">
            <summary>
            Stores all specified <paramref name="events"/> in the queue.
            </summary>
            <param name="events">The events to store.</param>
            <exception cref="T:System.ObjectDisposedException">
            The queue has already been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="events"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.ExecuteAsyncMethod">
            <summary>
            When implemented, represents the <see cref="M:Kingo.MicroServices.IQuery`1.ExecuteAsync(Kingo.MicroServices.IQueryOperationContext)"/> or
            <see cref="M:Kingo.MicroServices.IQuery`2.ExecuteAsync(`0,Kingo.MicroServices.IQueryOperationContext)"/> method of a specific query.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.ExecuteAsyncMethod.Query">
            <summary>
            The query that implements this method.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.ExecuteAsyncMethod.MethodInfo">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.ExecuteAsyncMethod.MessageParameterInfo">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.ExecuteAsyncMethod.ContextParameterInfo">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.ExecuteAsyncMethodOperation`1">
            <summary>    
            Represents an operation of a <see cref="T:Kingo.MicroServices.IMicroProcessor"/> where a query ie being executed.    
            </summary>
            <typeparam name="TResponse">Type of the response of the query.</typeparam>
        </member>
        <member name="P:Kingo.MicroServices.ExecuteAsyncMethodOperation`1.Method">
            <summary>
            Returns the <see cref="M:Kingo.MicroServices.IQuery`1.ExecuteAsync(Kingo.MicroServices.IQueryOperationContext)"/> or <see cref="M:Kingo.MicroServices.IQuery`2.ExecuteAsync(`0,Kingo.MicroServices.IQueryOperationContext)"/>
            method that is being invoked in this operation.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.ExecuteAsyncMethodOperation`1.Context">
            <summary>
            Returns the context of this operation.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.ExecuteAsyncMethodOperation`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.ExecuteAsyncMethodOperation`1.ToAsyncMethodOperation">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.HandleAsyncMethod">
            <summary>
            Represents the <see cref="M:Kingo.MicroServices.IMessageHandler`1.HandleAsync(`0,Kingo.MicroServices.IMessageHandlerOperationContext)"/> method of a specific message handler.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.HandleAsyncMethod.ToString">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.HandleAsyncMethod.MessageHandler">
            <summary>
            The message handler that implements this method.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.HandleAsyncMethod.MethodInfo">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.HandleAsyncMethod.MessageParameterInfo">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.HandleAsyncMethod.ContextParameterInfo">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.HandleAsyncMethod`1.HandleAsync(`0,Kingo.MicroServices.IMessageHandlerOperationContext)">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.HandleAsyncMethodOperation">
            <summary>
            Represents an operation of a <see cref="T:Kingo.MicroServices.IMicroProcessor"/> where a message is being handled
            by a message handler.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.HandleAsyncMethodOperation.Method">
            <summary>
            Returns the <see cref="M:Kingo.MicroServices.IMessageHandler`1.HandleAsync(`0,Kingo.MicroServices.IMessageHandlerOperationContext)"/> method that is being invoked
            in this operation.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.HandleAsyncMethodOperation.Context">
            <summary>
            Returns the context of this operation.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.HandleAsyncMethodOperation.Type">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.HandleAsyncMethodOperation.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.HandleAsyncMethodOperation.ToAsyncMethodOperation">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.IAsyncMethod">
            <summary>
            When implemented by a class, represents a method that handles a specific message and is provided with
            a context for processing this message.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IAsyncMethod.ComponentType">
            <summary>
            Returns the message handler or query type this method has been implemented on.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IAsyncMethod.MethodInfo">
            <summary>
            Returns the <see cref="T:System.Reflection.MethodInfo"/> of the method.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IAsyncMethod.MessageParameterInfo">
            <summary>
            Returns the <see cref="T:System.Reflection.ParameterInfo" /> that represents the message to be handled.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IAsyncMethod.ContextParameterInfo">
            <summary>
            Returns the <see cref="T:System.Reflection.ParameterInfo" /> that represents the context that is supplied to the method.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IAsyncMethodOperation">
            <summary>
            When implemented by a class, represents an operation where a specific <see cref="T:Kingo.MicroServices.IAsyncMethod"/> is being executed.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IAsyncMethodOperation.Method">
            <summary>
            Returns the method that is being executed in this operation.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IAsyncMethodOperation.Context">
            <summary>
            Returns the context of this operation.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IAsyncMethodOperation`1">
            <summary>
            When implemented by a class, represents an operation where a specific <see cref="T:Kingo.MicroServices.IAsyncMethod"/> is being executed.
            </summary>
            <typeparam name="TResult">Type of the result of the operation.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.IAsyncMethodOperation`1.ToAsyncMethodOperation">
            <summary>
            Converts this operation to a generic <see cref="T:Kingo.MicroServices.AsyncMethodOperation`1"/>.
            </summary>
            <returns>The base operation of this operation.</returns>
        </member>
        <member name="T:Kingo.MicroServices.IAsyncMethodOperationStackTrace">
            <summary>
            When implemented by a class, represents a stack trace of operations that are currently being executed
            by a <see cref="T:Kingo.MicroServices.IMicroProcessor" />.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IAsyncMethodOperationStackTrace.CurrentOperation">
            <summary>
            Returns the operation that is currently being executed.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMessageBus">
            <summary>
            When implemented by a class, represent a bus to which events can be published.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IMessageBus.SendCommand(System.Object,System.Nullable{System.DateTimeOffset})">
            <summary>
            Schedules the specified <paramref name="command"/> to be sent on the service-bus.
            </summary>
            <param name="command">The command to send.</param>
            <param name="deliveryTime">
            If specified, indicates at what time the command should be sent on the service-bus.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="command"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.IMessageBus.PublishEvent(System.Object,System.Nullable{System.DateTimeOffset})">
            <summary>
            Schedules the specified <paramref name="event"/> to be published on the service-bus.
            </summary>
            <param name="event">The event to publish.</param>
            <param name="deliveryTime">
            If specified, indicates at what time the event should be published on the service-bus.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="event"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.IMessageHandler`1">
            <summary>
            When implemented by a class, handles messages of type <paramtyperef name="TMessage" />.
            </summary>
            <typeparam name="TMessage">Type of the message to handle.</typeparam>  
        </member>
        <member name="M:Kingo.MicroServices.IMessageHandler`1.HandleAsync(`0,Kingo.MicroServices.IMessageHandlerOperationContext)">
            <summary>
            Handles the specified <paramref name="message"/> asynchronously.
            </summary>
            <param name="message">A message.</param>        
            <param name="context">Context of the <see cref="T:Kingo.MicroServices.IMicroProcessor" /> that is currently handling the message.</param>
            <exception cref="T:Kingo.MicroServices.MessageHandlerOperationException">
            Something went wrong while processing the specified <paramref name="message"/>, such as
            the violation of a business rule.
            </exception> 
        </member>
        <member name="T:Kingo.MicroServices.IMessageHandlerOperationContext">
            <summary>
            When implemented by a class, represents the context of a <see cref="T:Kingo.MicroServices.IMessageHandler`1"/> operation.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMessageHandlerOperationContext.UnitOfWork">
            <summary>
            Represents the unit of work that is associated to the current operation.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMessageHandlerOperationContext.MessageBus">
            <summary>
            Represents the message bus that can be used to schedule commands to be sent or events to be published
            after the operation has completed.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMessageHandlerOperationResult">
            <summary>
            When implemented by a class, represents the result of handling a command or event.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMessageHandlerOperationResult.Messages">
            <summary>
            Returns all messages in the order they were (scheduled to be) sent or published.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMessageHandlerOperationResult.MessageHandlerCount">
            <summary>
            The number of message handlers that have handled the message.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMessageIdFactory`1">
            <summary>
            When implemented by a class, represents a factory of unique identifiers for a specific type of message.
            </summary>
            <typeparam name="TMessage">Type of message to generate the identifiers for.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.IMessageIdFactory`1.GenerateMessageIdFor(`0)">
            <summary>
            Generates a new identifier for the specified <paramref name="message"/>.
            </summary>
            <param name="message">Content of a message.</param>
            <returns>A new identifier based on the specified <paramref name="message"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.IMessageKindResolver">
            <summary>
            When implemented by a class, represents a convention for resolving the message kind based on
            the type of a message.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IMessageKindResolver.ResolveMessageKind(System.Type)">
            <summary>
            Determines whether the message of the specified <paramref name="messageType"/> is a
            <see cref="F:Kingo.MicroServices.MessageKind.Command"/> or an <see cref="F:Kingo.MicroServices.MessageKind.Event"/>.
            </summary>
            <param name="messageType">Type of a message.</param>
            <returns>
            <see cref="F:Kingo.MicroServices.MessageKind.Command"/> if the message is a command;
            <see cref="F:Kingo.MicroServices.MessageKind.Event"/> if the message is an event.
            </returns>
        </member>
        <member name="T:Kingo.MicroServices.IMicroProcessor">
            <summary>
            When implemented by a class, represents a processor that can process commands, events and queries.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessor.ServiceName">
            <summary>
            Returns the name of the service.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessor.ServiceProvider">
            <summary>
            Returns the service provider the processor uses to resolve its dependencies.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.AssignUser(System.Security.Principal.IPrincipal)">
            <summary>
            Configures the processor to use the specified <paramref name="user"/> for each operation as long as the
            returned scope is active.
            </summary>
            <param name="user">The principal to use.</param>
            <returns>A scope that can be disposed when the principal can be reset to its previous value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="user"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.CreateMessageBuilder">
            <summary>
            Creates and returns a new <see cref="T:Kingo.MicroServices.IMessageEnvelopeBuilder" /> that can be used to build new messages to process by this processor.
            </summary>
            <returns>A new <see cref="T:Kingo.MicroServices.IMessageEnvelopeBuilder" />.</returns>
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.CreateMicroServiceBusEndpoints">
            <summary>
            Creates and returns all endpoints that are configured to handle commands or events from a service bus.
            </summary>
            <returns>A collection of endpoints.</returns>
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.ExecuteCommandAsync``1(Kingo.MicroServices.IMessageHandler{``0},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes a command with a specified <paramref name="messageHandler"/>.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
            <param name="messageHandler">The message handler that will handle the command.</param>
            <param name="message">The command to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            </returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> or <paramref name="message"/> is <c>null</c>.
            </exception>       
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.ExecuteCommandAsync``1(Kingo.MicroServices.IMessageHandler{``0},Kingo.MicroServices.MessageEnvelope{``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes a command with a specified <paramref name="messageHandler"/>.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
            <param name="messageHandler">The message handler that will handle the command.</param>
            <param name="message">The command to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            </returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> or <paramref name="message"/> is <c>null</c>.
            </exception>       
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.HandleEventAsync``1(Kingo.MicroServices.IMessageHandler{``0},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Handles an event with a specified <paramref name="messageHandler"/>.
            </summary>
            <typeparam name="TEvent">Type of the event.</typeparam>
            <param name="messageHandler">The message handler that will handle the event.</param>
            <param name="message">The event to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            </returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> or <paramref name="message"/> is <c>null</c>.
            </exception>       
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.HandleEventAsync``1(Kingo.MicroServices.IMessageHandler{``0},Kingo.MicroServices.MessageEnvelope{``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Handles an event with a specified <paramref name="messageHandler"/>.
            </summary>
            <typeparam name="TEvent">Type of the event.</typeparam>
            <param name="messageHandler">The message handler that will handle the event.</param>
            <param name="message">The event to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            </returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> or <paramref name="message"/> is <c>null</c>.
            </exception>       
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.ExecuteQueryAsync``1(Kingo.MicroServices.IQuery{``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TResponse">Type of the message returned by the query.</typeparam>        
            <param name="query">The query to execute.</param> 
            <param name="token">Optional token that can be used to cancel the operation.</param>                        
            <returns>The result that carries the response returned by the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>         
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.ExecuteQueryAsync``2(Kingo.MicroServices.IQuery{``0,``1},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TRequest">Type of the message going into the query.</typeparam>
            <typeparam name="TResponse">Type of the message returned by the query.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="message">Message containing the parameters of this query.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>The result that carries the response returned by the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> or <paramref name="message"/> is <c>null</c>.
            </exception>         
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessor.ExecuteQueryAsync``2(Kingo.MicroServices.IQuery{``0,``1},Kingo.MicroServices.MessageEnvelope{``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TRequest">Type of the message going into the query.</typeparam>
            <typeparam name="TResponse">Type of the message returned by the query.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="message">Message containing the parameters of this query.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>The result that carries the response returned by the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> or <paramref name="message"/> is <c>null</c>.
            </exception>         
        </member>
        <member name="T:Kingo.MicroServices.IMicroProcessorComponentConfiguration">
            <summary>
            When implemented by a class, represents the configuration for a component.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorComponentConfiguration.Lifetime">
            <summary>
            Indicates the lifetime of the component.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorComponentConfiguration.ServiceTypes">
            <summary>
            Returns all service types for which this component is registered.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMicroProcessorOperation">
            <summary>
            When implemented by a class, represents an operation of a <see cref="T:Kingo.MicroServices.IMicroProcessor" />.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOperation.Message">
            <summary>
            Returns the message that is being handled or executed. Returns <c>null</c>
            if this operation refers to the execution of a <see cref="T:Kingo.MicroServices.IQuery`1"/>.        
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOperation.Token">
            <summary>
            Returns the token that indicates whether or not cancellation of the operation is requested.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOperation.Type">
            <summary>
            Indicates whether this operation is invoking a message handler or executing a query.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOperation.Kind">
            <summary>
            Indicates whether this operation is an internal or external operation.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMicroProcessorOperation`1">
            <summary>
            When implemented by a class, represents an operation of a <see cref="T:Kingo.MicroServices.IMicroProcessor" /> that can
            be executed.
            </summary>
            <typeparam name="TResult">Type of the result of this operation.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessorOperation`1.ExecuteAsync">
            <summary>
            Executes this operation.
            </summary>
            <returns>The result of this operation.</returns>
        </member>
        <member name="T:Kingo.MicroServices.IMicroProcessorOperationContext">
            <summary>
            When implemented by a class, represents the context of a <see cref="T:Kingo.MicroServices.IMicroProcessor" /> operation.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOperationContext.User">
            <summary>
            Gets the user that is executing the current operation.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOperationContext.StackTrace">
            <summary>
            Returns a stack trace of all operations that are currently being executed.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOperationContext.ServiceProvider">
            <summary>
            Returns the <see cref="T:System.IServiceProvider" /> of this context.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOperationContext.QueryProcessor">
            <summary>
            Returns the processor that can be used to execute (sub)queries during an operation.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMicroProcessorOperationResult`1">
            <summary>
            Represents the result of a message handler or query invocation in the pipeline.
            </summary>
            <typeparam name="TValue">Type of the result.</typeparam>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOperationResult`1.Value">
            <summary>
            Obtains the value of this result.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMicroProcessorOptions">
            <summary>
            When implemented by a class, represents a set of options that can be set to configure the behavior of a <see cref="T:Kingo.MicroServices.MicroProcessor" />.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOptions.UnitOfWorkMode">
            <summary>
            Gets or sets the <see cref="P:Kingo.MicroServices.IMicroProcessorOptions.UnitOfWorkMode" />.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroProcessorOptions.Endpoints">
            <summary>
            Gets the options for the endpoints.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IMicroProcessorServiceProvider">
            <summary>
            When implemented by a class, represents a <see cref="T:System.IServiceProvider"/> that manages
            the dependencies of a processor;
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IMicroProcessorServiceProvider.CreateScope">
            <summary>
            Creates and returns a new <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScope"/> that manages the lifetime
            of scoped dependencies.
            </summary>
            <returns>A new <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScope"/>.</returns>
        </member>
        <member name="T:Kingo.MicroServices.IMicroServiceBus">
            <summary>
            When implemented by a class, represents a service bus that can publish messages.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IMicroServiceBus.SendCommandsAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessageToDispatch})">
            <summary>
            Sends all specified <paramref name="commands" /> to the appropriate service(s).
            </summary>
            <param name="commands">A collection of commands.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="commands"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.IMicroServiceBus.PublishEventsAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessageToDispatch})">
            <summary>
            Publishes all specified <paramref name="events" />.
            </summary>
            <param name="events">A collection of events.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="events"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.IMicroServiceBusEndpoint">
            <summary>
            When implemented by a class, represents an endpoint that handles a specific command or event.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroServiceBusEndpoint.ServiceName">
            <summary>
            Returns the name of the service this endpoint is part of.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroServiceBusEndpoint.MessageHandlerType">
            <summary>
            Returns the type of the message handler this endpoint is implemented on.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroServiceBusEndpoint.MethodInfo">
            <summary>
            Returns the <see cref="T:System.Reflection.MethodInfo"/> of the method.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroServiceBusEndpoint.MessageParameterInfo">
            <summary>
            Returns the <see cref="T:System.Reflection.ParameterInfo" /> that represents the message to be handled.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroServiceBusEndpoint.ContextParameterInfo">
            <summary>
            Returns the <see cref="T:System.Reflection.ParameterInfo" /> that represents the context that is supplied to the method.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IMicroServiceBusEndpoint.MessageKind">
            <summary>
            Indicates whether this endpoint handles a command or an event.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IMicroServiceBusEndpoint.InvokeAsync(Kingo.MicroServices.IMessageEnvelope,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Invokes the method of the associated message handler with the specified <paramref name="message" />
            and returns its result.
            </summary>
            <param name="message">The message to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            If the specified <paramref name="message"/>  is not supported by this endpoint, it is ignored and an empty
            result will be returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="T:Kingo.MicroServices.InternalEventBusEndpointAttribute">
            <summary>
            When applied to an implementation of the <see cref="M:Kingo.MicroServices.IMessageHandler`1.HandleAsync(`0,Kingo.MicroServices.IMessageHandlerOperationContext)"/>
            method, indicates that the message-handler will receive events from the internal processor
            bus.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.InternalEventBusEndpointAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.InternalEventBusEndpointAttribute" /> class.
            </summary>
            <param name="acceptScheduledEvents">Indicates whether or not the handler accepts events that were scheduled.</param>
        </member>
        <member name="P:Kingo.MicroServices.InternalEventBusEndpointAttribute.AcceptScheduledEvents">
            <summary>
            Indicates whether or not the handler accepts events that were scheduled.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IQuery`1">
            <summary>
            When implemented by a class, represents a query that accepts a message
            and returns a result in the form of a <typeparamref name="TResponse"/>.
            </summary>    
            <typeparam name="TResponse">Type of the message that is returned by this query.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.IQuery`1.ExecuteAsync(Kingo.MicroServices.IQueryOperationContext)">
            <summary>
            Executes the query.
            </summary>   
            <param name="context">Context of the <see cref="T:Kingo.MicroServices.IMicroProcessor" /> that is currently executing the query.</param>    
            <returns>The result of this query.</returns>        
        </member>
        <member name="T:Kingo.MicroServices.IQuery`2">
            <summary>
            When implemented by a class, represents a query that accepts a message
            and returns a result in the form of a <typeparamref name="TResponse"/>.
            </summary>
            <typeparam name="TRequest">Type of the message that is consumed by this query.</typeparam>
            <typeparam name="TResponse">Type of the message that is returned by this query.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.IQuery`2.ExecuteAsync(`0,Kingo.MicroServices.IQueryOperationContext)">
            <summary>
            Executes the query.
            </summary>
            <param name="message">Message containing the parameters of this query.</param>
            <param name="context">Context of the <see cref="T:Kingo.MicroServices.IMicroProcessor" /> that is currently executing the query.</param>
            <returns>The result of this query.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.IQueryOperationContext">
            <summary>
            When implemented by a class, represents the context of a <see cref="T:Kingo.MicroServices.IQuery`2"/> operation.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IQueryOperationResult`1">
            <summary>
            When implemented by a class, represents the result of executing a query.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.IQueryOperationResult`1.Response">
            <summary>
            The response of the query.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.IQueryProcessor">
            <summary>
            When implemented by a class, represents a processor specifically for queries.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IQueryProcessor.ExecuteQueryAsync``1(Kingo.MicroServices.IQuery{``0})">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result.
            </summary>
            <typeparam name="TResponse">Type of the response of the query.</typeparam>
            <param name="query">The query to execute.</param>
            <returns>The response of the query.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.IQueryProcessor.ExecuteQueryAsync``2(Kingo.MicroServices.IQuery{``0,``1},``0)">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result.
            </summary>
            <typeparam name="TRequest">Type of the request of the query.</typeparam>
            <typeparam name="TResponse">Type of the response of the query.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="message">Message that carries the parameters of the query.</param>
            <returns>The response of the query.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> or <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.IQueryProcessor.ExecuteQueryAsync``2(Kingo.MicroServices.IQuery{``0,``1},Kingo.MicroServices.MessageEnvelope{``0})">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result.
            </summary>
            <typeparam name="TRequest">Type of the request of the query.</typeparam>
            <typeparam name="TResponse">Type of the response of the query.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="message">Message that carries the parameters of the query.</param>
            <returns>The response of the query.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> or <paramref name="message"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.IUnitOfWork">
            <summary>
            When implemented by a class, represents a unit of work that manages different <see cref="T:Kingo.MicroServices.IUnitOfWorkResourceManager">
            resource managers</see>.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.IUnitOfWork.EnlistAsync(Kingo.MicroServices.IUnitOfWorkResourceManager)">
            <summary>
            Enlists the specified <paramref name="resourceManager"/> with this unit of work so that it can be flushed at the appropriate time.
            Note that this operation may flush the specified <paramref name="resourceManager"/> immediately.
            </summary>
            <param name="resourceManager">The resource manager to enlist.</param>        
            <exception cref="T:System.ArgumentNullException">
            <paramref name="resourceManager"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.IUnitOfWork.FlushAsync">
            <summary>
            Flushes all pending changes by signalling to all enlisted <see cref="T:Kingo.MicroServices.IUnitOfWorkResourceManager">resource managers</see>
            that they can flush or persist their changes.
            </summary>        
        </member>
        <member name="T:Kingo.MicroServices.IUnitOfWorkResourceManager">
            <summary>
            When implemented by a class, represents a unit of work that can be flushed.
            </summary>    
        </member>
        <member name="P:Kingo.MicroServices.IUnitOfWorkResourceManager.ResourceId">
            <summary>
            Identifies the resource that is managed by this resource manager, such as a database, file or blob storage.
            This value may be <c>null</c> if the resource is undefined.
            </summary>
            <remarks>
            The resource-id is used by the <see cref="T:Kingo.MicroServices.IUnitOfWork"/> to determine which managers manage specific resources, so that it
            can optimize the flush-cycle by flushing the managers of different resources in parallel thereby optimizing I/O performance.
            Those resource managers that manage the same resource (such as multiple repositories using the same database), or resource
            managers of which the resource is undefined (resource id is <c>null</c>), will be flushed sequentially.
            </remarks>
        </member>
        <member name="M:Kingo.MicroServices.IUnitOfWorkResourceManager.RequiresFlush">
            <summary>
            Indicates whether or not the unit of work maintains any changes that need to flushed.
            </summary>
            <returns>
            <c>true</c> if the current instance needs to be flushed; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Kingo.MicroServices.IUnitOfWorkResourceManager.FlushAsync">
            <summary>
            Flushes any pending changes to the underlying infrastructure.
            </summary>
            <exception cref="T:Kingo.MicroServices.ConflictException">
            A concurrency exception occurred.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.MessageBus.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MessageBusExtensions">
            <summary>
            Contains extension-methods for instances of type <see cref="T:Kingo.MicroServices.IMessageBus" />.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MessageBusExtensions.SendCommand(Kingo.MicroServices.IMessageBus,System.Object,System.TimeSpan)">
            <summary>
            Schedules a command for a specific time relative to the current date and time.
            </summary>
            <param name="bus">A message bus.</param>
            <param name="command">The command to send.</param>
            <param name="delta">
            The period that determines when the command should be delivered relative to the current date and time.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bus"/> or <paramref name="command"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.MessageBusExtensions.PublishEvent(Kingo.MicroServices.IMessageBus,System.Object,System.TimeSpan)">
            <summary>
            Schedules an event for a specific time relative to the current date and time.
            </summary>
            <param name="bus">A message bus.</param>
            <param name="event">The event to publish.</param>
            <param name="delta">
            The period that determines when the event should be delivered relative to the current date and time.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bus"/> or <paramref name="event"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.MessageHandlerComponent">
            <summary>
            Represent a component that implements one or more variations of the <see cref="T:Kingo.MicroServices.IMessageHandler`1"/> interface.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MessageHandlerComponent.Interfaces">
            <summary>
            Returns the <see cref="T:Kingo.MicroServices.IMessageHandler`1"/> interfaces that are implemented by this message handler.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerComponent.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerComponent.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MessageHandlerDecorator`1">
            <summary>
            Represents a decorator of message handlers.
            </summary>
            <typeparam name="TMessage">Type of the message to handle.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerDecorator`1.#ctor(Kingo.MicroServices.IMessageHandler{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MessageHandlerDecorator`1" /> class.
            </summary>
            <param name="messageHandler">The message handler to decorate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.MicroServices.MessageHandlerDecorator`1.MessageHandler">
            <summary>
            The message handler to decorate.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerDecorator`1.HandleAsync(`0,Kingo.MicroServices.IMessageHandlerOperationContext)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerDecorator`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerDecorator`1.Decorate(System.Action{`0,Kingo.MicroServices.IMessageHandlerOperationContext})">
            <summary>
            Wraps the specified delegate into a <see cref="T:Kingo.MicroServices.IMessageHandler`1" /> instance.
            </summary>
            <param name="messageHandler">The delegate to wrap.</param>
            <returns>
            A <see cref="T:Kingo.MicroServices.IMessageHandler`1"/> that wraps the specified <paramref name="messageHandler"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerDecorator`1.Decorate(System.Func{`0,Kingo.MicroServices.IMessageHandlerOperationContext,System.Threading.Tasks.Task})">
            <summary>
            Wraps the specified delegate into a <see cref="T:Kingo.MicroServices.IMessageHandler`1" /> instance.
            </summary>
            <param name="messageHandler">The delegate to wrap.</param>
            <returns>
            A <see cref="T:Kingo.MicroServices.IMessageHandler`1"/> that wraps the specified <paramref name="messageHandler"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messageHandler"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.MessageHandlerInterface">
            <summary>
            Represent a specific, closed version of the <see cref="T:Kingo.MicroServices.IMessageHandler`1"/> interface.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MessageHandlerInterface.MessageType">
            <summary>
            The message type of the message that is handled by the <see cref="T:Kingo.MicroServices.IMessageHandler`1"/>.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.MessageHandlerOperation">
            <summary>
            Represents an operation where a <see cref="T:Kingo.MicroServices.MicroProcessor"/> invokes one or more message handlers to handle a message.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MessageHandlerOperation.Token">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MessageHandlerOperation.Type">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MessageHandlerOperationContext">
            <summary>
            Represents the context in which a <see cref="T:Kingo.MicroServices.MicroProcessor"/> invokes a <see cref="T:Kingo.MicroServices.IMessageHandler`1"/>.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MessageHandlerOperationContext.UnitOfWork">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MessageHandlerOperationContext.MessageBus">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MessageHandlerOperationException">
            <summary>
            An exception of this type is to be thrown by application code when something predictable went wrong while handling a message.
            The <see cref="T:Kingo.MicroServices.IMicroProcessor" /> will catch exceptions of this type and convert it to a <see cref="T:Kingo.MicroServices.BadRequestException" />
            or <see cref="T:Kingo.MicroServices.InternalServerErrorException" /> based on whether or was executing a command or handling an event.   
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MessageHandlerOperationException" /> class.
            </summary>
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MessageHandlerOperationException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerOperationException.AsBadRequestException(System.String)">
            <summary>
            Creates and returns this exception as a <see cref="T:Kingo.MicroServices.BadRequestException"/>, indicating that
            the current exception occurred because of a bad client request.
            </summary>        
            <param name="message">Message describing the context of the newly created message.</param>
            <returns>A new <see cref="T:Kingo.MicroServices.BadRequestException"/> with its <see cref="P:System.Exception.InnerException"/> set to this instance.</returns>        
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerOperationException.AsInternalServerErrorException(System.String)">
            <summary>
            Creates and returns this exception as a <see cref="T:Kingo.MicroServices.InternalServerErrorException"/>, indicating that
            the current exception occurred because of an internal server error.        
            </summary>        
            <param name="message">Message describing the context of the newly created message.</param>
            <returns>A new <see cref="T:Kingo.MicroServices.InternalServerErrorException"/> with its <see cref="P:System.Exception.InnerException"/> set to this instance.</returns>        
        </member>
        <member name="T:Kingo.MicroServices.MessageHandlerOperationResult">
            <summary>
            Represents the result of a <see cref="T:Kingo.MicroServices.IMessageHandler`1"/> operation executed by a <see cref="T:Kingo.MicroServices.IMicroProcessor" />.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MessageHandlerOperationResult.Empty">
            <summary>
            Represents an empty result.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MessageHandlerOperationResult.Messages">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MessageHandlerOperationResult.MessageHandlerCount">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MessageHandlerOperationResult.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MessageHandlerOrQueryInterface`2">
            <summary>
            When implemented, represents a specific variant of the <see cref="T:Kingo.MicroServices.IMessageHandler`1"/>, <see cref="T:Kingo.MicroServices.IQuery`1"/>
            or <see cref="T:Kingo.MicroServices.IQuery`2"/> interface.
            </summary>
            <typeparam name="TComponent">Type of the associated component.</typeparam>
            <typeparam name="TMethod">Type of the associated method.</typeparam>
        </member>
        <member name="T:Kingo.MicroServices.MessageIdFactoryComponent">
            <summary>
            Serves as a base-class for components that implement one or more variations of the <see cref="T:Kingo.MicroServices.IMessageIdFactory`1"/> interface.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MessageIdFactoryInterface.MessageType">
            <summary>
            The message type of the message that is handled by the <see cref="T:Kingo.MicroServices.IMessageHandler`1"/>.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessor">
            <summary>
            Represents a basic implementation of a <see cref="T:Kingo.MicroServices.IMicroProcessor" />.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MicroProcessor" /> class.
            </summary>                     
            <param name="serviceProvider">
            Service-provider that will be used to resolve message-handlers, their dependencies and other components.
            </param>        
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.AssignUser(System.Security.Principal.IPrincipal)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.CreatePrincipal(System.Security.Principal.IPrincipal)">
            <summary>
            Creates and returns a <see cref="T:System.Security.Claims.ClaimsPrincipal" /> based on the specified <paramref name="user"/>.
            </summary>
            <param name="user">The principal to convert to a <see cref="T:System.Security.Claims.ClaimsPrincipal"/>.</param>
            <returns>A new <see cref="T:System.Security.Claims.ClaimsPrincipal"/> based on the specified <paramref name="user"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="user"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessor.ServiceProvider">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.CreateMessageBuilder">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.ResolveMicroServiceBus">
            <summary>
            Resolves the <see cref="T:Kingo.MicroServices.IMicroServiceBus"/> that is used to publish all produced commands and events.
            </summary>
            <returns>A resolved <see cref="T:Kingo.MicroServices.IMicroServiceBus"/>.</returns>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.CreateMicroServiceBusEndpoints">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.ExecuteCommandAsync``1(Kingo.MicroServices.IMessageHandler{``0},``0,System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.ExecuteCommandAsync``1(Kingo.MicroServices.IMessageHandler{``0},Kingo.MicroServices.MessageEnvelope{``0},System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.HandleEventAsync``1(Kingo.MicroServices.IMessageHandler{``0},``0,System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.HandleEventAsync``1(Kingo.MicroServices.IMessageHandler{``0},Kingo.MicroServices.MessageEnvelope{``0},System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.ExecuteQueryAsync``1(Kingo.MicroServices.IQuery{``0},System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.ExecuteQueryAsync``2(Kingo.MicroServices.IQuery{``0,``1},``0,System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.ExecuteQueryAsync``2(Kingo.MicroServices.IQuery{``0,``1},Kingo.MicroServices.MessageEnvelope{``0},System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.ExecuteWriteOperationAsync(Kingo.MicroServices.MessageHandlerOperation)">
            <summary>
            Executes the specified (write) <paramref name="operation"/> and returns its result. If the operation
            produces any commands or events, all messages are sent or published on the resolved <see cref="T:Kingo.MicroServices.IMicroServiceBus" />.
            </summary>        
            <param name="operation">The operation to execute.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.ExecuteReadOperationAsync``1(Kingo.MicroServices.QueryOperation{``0})">
            <summary>
            Executes the specified (read) <paramref name="operation"/> and returns its result.
            </summary>
            <typeparam name="TResponse">Type of the response of the query.</typeparam>
            <param name="operation">The operation to execute.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessor.ExecuteOperationAsync``1(Kingo.MicroServices.MicroProcessorOperation{``0})">
            <summary>
            Executes the specified <paramref name="operation"/> and returns its result.
            </summary>
            <typeparam name="TResult">Type of the result of the operation.</typeparam>
            <param name="operation">The operation to execute.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorComponent">
            <summary>
            Represents a type that can be registered as a component of a <see cref="T:Kingo.MicroServices.MicroProcessor" />.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponent.#ctor(Kingo.MicroServices.MicroProcessorComponent,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MicroProcessorComponent" /> class.
            </summary>
            <param name="component">Component to copy.</param>
            <param name="serviceTypes">A collection of service-types.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="component"/> or <paramref name="serviceTypes"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorComponent.Type">
            <summary>
            Type of the component.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponent.Copy(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Copies the current component while assigning the <paramref name="serviceTypes"/> to it.
            </summary>
            <param name="serviceTypes">A collection of service types to assign to the copied component.</param>
            <returns>The copied component.</returns>
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorComponent.Lifetime">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorComponent.ServiceTypes">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponent.AddTo(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object)">
            <summary>
            Adds this component to the specified <paramref name="services"/> with a mapping from all <see cref="P:Kingo.MicroServices.MicroProcessorComponent.ServiceTypes"/>.
            </summary>
            <param name="services">A collection of services this component will be added to.</param>
            <param name="instance">
            If specified, a direct mapping to this instance is made; otherwise a type
            mapping with the appropriate <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceLifetime"/> is made.
            </param>
            <returns>The updated service collection.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="services"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponent.AddTransientTypeMappingTo(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds a type-mapping to the specified <paramref name="services"/> for this component based on a transient lifetime.
            </summary>
            <param name="services">A collection of services this component will be added to.</param>
            <returns>The updated service collection.</returns>
            <exception cref="T:System.InvalidOperationException">
            This component does not support the <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient"/> lifetime.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponent.AddScopedTypeMappingTo(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds a type-mapping to the specified <paramref name="services"/> for this component based on a scoped lifetime.
            </summary>
            <param name="services">A collection of services this component will be added to.</param>
            <returns>The updated service collection.</returns>
            <exception cref="T:System.InvalidOperationException">
            This component does not support the <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped"/> lifetime.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponent.AddSingletonTypeMappingTo(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds a type-mapping to the specified <paramref name="services"/> for this component based on a singleton lifetime.
            </summary>
            <param name="services">A collection of services this component will be added to.</param>
            <returns>The updated service collection.</returns>
            <exception cref="T:System.InvalidOperationException">
            This component does not support the <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton"/> lifetime.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponent.NewLifetimeNotSupportedException">
            <summary>
            Creates and returns an exception that indicates that this component
            could not be added to a <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> because the <see cref="P:Kingo.MicroServices.MicroProcessorComponent.Lifetime"/> configured for
            this component is not supported for this type.
            </summary>
            <returns>A new exception to throw.</returns>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponent.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponent.Equals(Kingo.MicroServices.MicroProcessorComponent)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponent.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponent.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorComponentAttribute">
            <summary>
            This attribute can be declared on any class or struct to configure its registration and run-time behavior.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponentAttribute.#ctor(Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MicroProcessorComponentAttribute" /> class.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorComponentAttribute.Lifetime">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorComponentAttribute.ServiceTypes">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponentAttribute.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorComponentInterface">
            <summary>
            When implemented, represents a specific variant of the <see cref="T:Kingo.MicroServices.IMessageHandler`1"/>, <see cref="T:Kingo.MicroServices.IQuery`1"/>
            or <see cref="T:Kingo.MicroServices.IQuery`2"/> interface.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorComponentInterface.Type">
            <summary>
            Type of the interface.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponentInterface.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponentInterface.Equals(Kingo.MicroServices.MicroProcessorComponentInterface)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponentInterface.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorComponentInterface.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorEndpointOptions">
            <summary>
            Represents a set of options that can be set for the endpoints of a <see cref="T:Kingo.MicroServices.MicroProcessor" />.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorEndpointOptions.ServiceName">
            <summary>
            Gets or sets the name of the (micro)service.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorEndpointOptions.MessageKindResolver">
            <summary>
            Gets or sets the <see cref="T:Kingo.MicroServices.IMessageKindResolver" /> used to resolve the message kind
            of endpoints of which the message kind was left unspecified.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorExtensions">
            <summary>
            Contains extension methods for the <see cref="T:Kingo.MicroServices.IMicroProcessor" /> interface.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorExtensions.ExecuteCommandAsync``1(Kingo.MicroServices.IMicroProcessor,System.Action{``0,Kingo.MicroServices.IMessageHandlerOperationContext},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes a command with a specified <paramref name="messageHandler"/>.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
            <param name="processor">The processor used to execute the command.</param>
            <param name="messageHandler">The message handler that will handle the command.</param>
            <param name="message">The command to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            </returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="processor"/>, <paramref name="messageHandler"/> or <paramref name="message"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorExtensions.ExecuteCommandAsync``1(Kingo.MicroServices.IMicroProcessor,System.Func{``0,Kingo.MicroServices.IMessageHandlerOperationContext,System.Threading.Tasks.Task},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes a command with a specified <paramref name="messageHandler"/>.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
            <param name="processor">The processor used to execute the command.</param>
            <param name="messageHandler">The message handler that will handle the command.</param>
            <param name="message">The command to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            </returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="processor"/>, <paramref name="messageHandler"/> or <paramref name="message"/> is <c>null</c>.
            </exception>         
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorExtensions.HandleEventAsync``1(Kingo.MicroServices.IMicroProcessor,System.Action{``0,Kingo.MicroServices.IMessageHandlerOperationContext},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Handles an event with a specified <paramref name="messageHandler"/>.
            </summary>
            <typeparam name="TEvent">Type of the event.</typeparam>
            <param name="processor">The processor used to handle the event.</param>
            <param name="messageHandler">The message handler that will handle the event.</param>
            <param name="message">The event to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            </returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="processor"/>, <paramref name="messageHandler"/> or <paramref name="message"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorExtensions.HandleEventAsync``1(Kingo.MicroServices.IMicroProcessor,System.Func{``0,Kingo.MicroServices.IMessageHandlerOperationContext,System.Threading.Tasks.Task},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Handles an event with a specified <paramref name="messageHandler"/>.
            </summary>
            <typeparam name="TEvent">Type of the event.</typeparam>
            <param name="processor">The processor used to handle the event.</param>
            <param name="messageHandler">The message handler that will handle the event.</param>
            <param name="message">The event to handle.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>
            The result of the operation, which includes all published events and the number of message handlers that were invoked.
            </returns> 
            <exception cref="T:System.ArgumentNullException">
            <paramref name="processor"/>, <paramref name="messageHandler"/> or <paramref name="message"/> is <c>null</c>.
            </exception>         
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorExtensions.ExecuteQueryAsync``1(Kingo.MicroServices.IMicroProcessor,System.Func{Kingo.MicroServices.IQueryOperationContext,``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TResponse">Type of the message returned by the query.</typeparam>   
            <param name="processor">A processor.</param>     
            <param name="query">The query to execute.</param>               
            <param name="token">Optional token that can be used to cancel the operation.</param>          
            <returns>The result that carries the response returned by the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="processor"/>, <paramref name="query"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorExtensions.ExecuteQueryAsync``1(Kingo.MicroServices.IMicroProcessor,System.Func{Kingo.MicroServices.IQueryOperationContext,System.Threading.Tasks.Task{``0}},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TResponse">Type of the message returned by the query.</typeparam> 
            <param name="processor">A processor.</param>       
            <param name="query">The query to execute.</param>               
            <param name="token">Optional token that can be used to cancel the operation.</param>          
            <returns>The result that carries the response returned by the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="processor"/>, <paramref name="query"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorExtensions.ExecuteQueryAsync``2(Kingo.MicroServices.IMicroProcessor,System.Func{``0,Kingo.MicroServices.IQueryOperationContext,``1},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TRequest">Type of the message going into the query.</typeparam>
            <typeparam name="TResponse">Type of the message returned by the query.</typeparam>
            <param name="processor">A processor.</param>
            <param name="query">The query to execute.</param>
            <param name="message">Message containing the parameters of this query.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>The result that carries the response returned by the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="processor"/>, <paramref name="query"/> or <paramref name="message"/> is <c>null</c>.
            </exception>          
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorExtensions.ExecuteQueryAsync``2(Kingo.MicroServices.IMicroProcessor,System.Func{``0,Kingo.MicroServices.IQueryOperationContext,System.Threading.Tasks.Task{``1}},``0,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes the specified <paramref name="query"/> using the specified <paramref name="message"/> and returns its result asynchronously.
            </summary>
            <typeparam name="TRequest">Type of the message going into the query.</typeparam>
            <typeparam name="TResponse">Type of the message returned by the query.</typeparam>
            <param name="processor">A processor.</param>
            <param name="query">The query to execute.</param>
            <param name="message">Message containing the parameters of this query.</param>
            <param name="token">Optional token that can be used to cancel the operation.</param>
            <returns>The result that carries the response returned by the <paramref name="query"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="processor"/>, <paramref name="query"/> or <paramref name="message"/> is <c>null</c>.
            </exception>        
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorOperation">
            <summary>
            When implemented, represents an operation of a <see cref="T:Kingo.MicroServices.IMicroProcessor" />.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorOperation.Message">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorOperation.Token">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorOperation.Type">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorOperation.Kind">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorOperation.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorOperation`1">
            <summary>
            When implemented, represents an operation of a <see cref="T:Kingo.MicroServices.IMicroProcessor" /> that can be executed.
            </summary>
            <typeparam name="TResult">Type of the result of this operation.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorOperation`1.ExecuteAsync">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorOperationContext">
            <summary>
            Represents the context in which a <see cref="T:Kingo.MicroServices.MicroProcessor"/> operates.
            </summary>    
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorOperationContext.User">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorOperationContext.StackTrace">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorOperationContext.ServiceProvider">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.MicroProcessorOperationContext.QueryProcessor">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroProcessorOperationContext.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorOperationKind">
            <summary>
            Represents the kinds of operations a processor can execute (i.e. internal or external).
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MicroProcessorOperationKind.RootOperation">
            <summary>
            Represents an operation that was triggered by an external message or request. Root operations always
            represent the first operation on the <see cref="T:Kingo.MicroServices.IAsyncMethodOperationStackTrace" />.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MicroProcessorOperationKind.BranchOperation">
            <summary>
            Represents an operation that was triggered by another operation.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.MicroProcessorOperationType">
            <summary>
            Represents a specific operation type performed by a <see cref="T:Kingo.MicroServices.IMicroProcessor" />.
            </summary>    
        </member>
        <member name="F:Kingo.MicroServices.MicroProcessorOperationType.MessageHandlerOperation">
            <summary>
            Represents an operation in which a message handler is invoked to handle
            a message. This operation type is also known as a write operation.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.MicroProcessorOperationType.QueryOperation">
            <summary>
            Represents an operation in which a query is invoked to return a response.
            This operation type is also known as a read operation.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.MicroServiceBus">
            <summary>
            Represents a basic implementation of the <see cref="T:Kingo.MicroServices.IMicroServiceBus" /> interface.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroServiceBus.SendCommandsAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessageToDispatch})">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.MicroServiceBus.PublishEventsAsync(System.Collections.Generic.IEnumerable{Kingo.MicroServices.IMessageToDispatch})">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.MicroServiceBusEndpointAttribute">
            <summary>
            When applied to an implementation of the <see cref="M:Kingo.MicroServices.IMessageHandler`1.HandleAsync(`0,Kingo.MicroServices.IMessageHandlerOperationContext)"/>
            method, indicates that the message-handler will receive commands or events from the service bus.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroServiceBusEndpointAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MicroServiceBusEndpointAttribute" /> class.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroServiceBusEndpointAttribute.#ctor(Kingo.MicroServices.MessageKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MicroServiceBusEndpointAttribute" /> class.
            </summary>
            <param name="messageKind">If specified, indicates what kind of message is handled by this endpoint.</param>
        </member>
        <member name="P:Kingo.MicroServices.MicroServiceBusEndpointAttribute.MessageKind">
            <summary>
            Gets or sets the message kind of the message that is handled by this endpoint.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.MicroServiceBusEndpointNameAttribute">
            <summary>
            When applied to a message or message handler, defines the name of this message type
            or message handler type that is to be used in the name of the service bus endpoint,
            if the name-format includes the name of a message or message handler.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroServiceBusEndpointNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.MicroServiceBusEndpointNameAttribute" /> class.
            </summary>
            <param name="name">The name of the message or message handler.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.MicroServices.MicroServiceBusEndpointNameAttribute.Name">
            <summary>
            The name of the message or message handler.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.MicroServiceBusExtensions">
            <summary>
            Contains extension method for instance of type <see cref="T:Kingo.MicroServices.IMicroServiceBus" />.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.MicroServiceBusExtensions.DispatchAsync(Kingo.MicroServices.IMicroServiceBus,System.Collections.Generic.IEnumerable{Kingo.MicroServices.MessageToDispatch})">
            <summary>
            Sends all commands and publishes all events that are part of the specified
            <paramref name="messages"/> collection.
            </summary>
            <param name="bus">The bus that will dispatch the messages.</param>
            <param name="messages">A collection of commands and events to send and publish.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bus"/> or <paramref name="messages"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.NotFoundException">
            <summary>
            This exception is thrown by a <see cref="T:Kingo.MicroServices.IMicroProcessor" /> when a query failed to execute because the
            requested data or resource was not found. This type semantically maps to HTTP response code <c>404</c>.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.NotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.NotFoundException" /> class.
            </summary>        
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>        
        </member>
        <member name="M:Kingo.MicroServices.NotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.NotFoundException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Kingo.MicroServices.NotFoundException.ErrorCode">
            <summary>
            Returns <c>404</c>.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.QueryComponent">
            <summary>
            Represent a component that implements one or more variations of the <see cref="T:Kingo.MicroServices.IQuery`1"/> or
            <see cref="T:Kingo.MicroServices.IQuery`2"/> interfaces.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.QueryComponent.Interfaces">
            <summary>
            Returns the <see cref="T:Kingo.MicroServices.IQuery`1"/> ans <see cref="T:Kingo.MicroServices.IQuery`2"/> interfaces
            that are implemented by this query.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.QueryComponent.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.QueryComponent.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.QueryDecorator`1">
            <summary>
            Represents a decorator of queries.
            </summary>
            <typeparam name="TResponse">Type of the response of the query.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`1.#ctor(Kingo.MicroServices.IQuery{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.QueryDecorator`1" /> class.
            </summary>
            <param name="query">The query to decorate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.MicroServices.QueryDecorator`1.Query">
            <summary>
            The query to decorate.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`1.ExecuteAsync(Kingo.MicroServices.IQueryOperationContext)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`1.Decorate(System.Func{Kingo.MicroServices.IQueryOperationContext,`0})">
            <summary>
            Wraps the specified delegate into a <see cref="T:Kingo.MicroServices.IQuery`1" /> instance.
            </summary>
            <param name="query">The delegate to wrap.</param>
            <returns>
            A <see cref="T:Kingo.MicroServices.IQuery`1"/> that wraps the specified <paramref name="query"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`1.Decorate(System.Func{Kingo.MicroServices.IQueryOperationContext,System.Threading.Tasks.Task{`0}})">
            <summary>
            Wraps the specified delegate into a <see cref="T:Kingo.MicroServices.IQuery`1" /> instance.
            </summary>
            <param name="query">The delegate to wrap.</param>
            <returns>
            A <see cref="T:Kingo.MicroServices.IQuery`1"/> that wraps the specified <paramref name="query"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.QueryDecorator`2">
            <summary>
            Represents a decorator of queries.
            </summary>
            <typeparam name="TRequest">Type of the request of the query.</typeparam>
            <typeparam name="TResponse">Type of the response of the query.</typeparam>
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`2.#ctor(Kingo.MicroServices.IQuery{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.QueryDecorator`2" /> class.
            </summary>
            <param name="query">The query to decorate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Kingo.MicroServices.QueryDecorator`2.Query">
            <summary>
            The query to decorate.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`2.ExecuteAsync(`0,Kingo.MicroServices.IQueryOperationContext)">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`2.ToString">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`2.Decorate(System.Func{`0,Kingo.MicroServices.IQueryOperationContext,`1})">
            <summary>
            Wraps the specified delegate into a <see cref="T:Kingo.MicroServices.IQuery`2" /> instance.
            </summary>
            <param name="query">The delegate to wrap.</param>
            <returns>
            A <see cref="T:Kingo.MicroServices.IQuery`2"/> that wraps the specified <paramref name="query"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Kingo.MicroServices.QueryDecorator`2.Decorate(System.Func{`0,Kingo.MicroServices.IQueryOperationContext,System.Threading.Tasks.Task{`1}})">
            <summary>
            Wraps the specified delegate into a <see cref="T:Kingo.MicroServices.IQuery`2" /> instance.
            </summary>
            <param name="query">The delegate to wrap.</param>
            <returns>
            A <see cref="T:Kingo.MicroServices.IQuery`2"/> that wraps the specified <paramref name="query"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Kingo.MicroServices.QueryInterface">
            <summary>
            Represent a specific, closed version of the <see cref="T:Kingo.MicroServices.IQuery`1"/> or
            <see cref="T:Kingo.MicroServices.IQuery`2"/> interface.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.QueryInterface.RequestType">
            <summary>
            The request message type. This returns <c>null</c> if this interface represents an instance of the
            <see cref="T:Kingo.MicroServices.IQuery`1"/> interface.
            </summary>
        </member>
        <member name="P:Kingo.MicroServices.QueryInterface.ResponseType">
            <summary>
            The response message type.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.QueryOperation`1">
            <summary>
            Represents an operation where a <see cref="T:Kingo.MicroServices.MicroProcessor"/> executes a query.
            </summary>
            <typeparam name="TResponse">Type of the response of the query.</typeparam>
        </member>
        <member name="P:Kingo.MicroServices.QueryOperation`1.Token">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.QueryOperation`1.Type">
            <inheritdoc />
        </member>
        <member name="P:Kingo.MicroServices.QueryOperation`1.Kind">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.QueryOperation`1.ExecuteAsync">
            <inheritdoc />
        </member>
        <member name="M:Kingo.MicroServices.QueryOperation`1.CreateMethodOperation(Kingo.MicroServices.MicroProcessorOperationContext)">
            <summary>
            Creates and returns a new <see cref="T:Kingo.MicroServices.ExecuteAsyncMethodOperation`1"/> for the query that is to be executed.
            </summary>
            <param name="context">Context of the operation.</param>
            <returns>A new operation that is ready to be executed.</returns>
        </member>
        <member name="T:Kingo.MicroServices.QueryOperationContext">
            <summary>
            Represents the context in which a <see cref="T:Kingo.MicroServices.MicroProcessor"/> executes a query.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.QueryOperationResult`1">
            <summary>
            Represents the result of executing a query by a <see cref="T:Kingo.MicroServices.IMicroProcessor" />.
            </summary>
            <typeparam name="TResponse">Type of the returned response message.</typeparam>
        </member>
        <member name="P:Kingo.MicroServices.QueryOperationResult`1.Response">
            <summary>
            The response that was returned by the query.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.QueryOperationResult`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:Kingo.MicroServices.UnauthorizedRequestException">
            <summary>
            This exception is thrown by a <see cref="T:Kingo.MicroServices.IMicroProcessor" /> when a command or query failed because the client
            was not authorized to execute it. This type semantically maps to HTTP response code <c>401</c>.
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.UnauthorizedRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.UnauthorizedRequestException" /> class.
            </summary>        
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>        
        </member>
        <member name="M:Kingo.MicroServices.UnauthorizedRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.UnauthorizedRequestException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Kingo.MicroServices.UnauthorizedRequestException.ErrorCode">
            <summary>
            Returns <c>401</c>.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.UnitOfWorkMode">
            <summary>
            Represents a specific mode of the unit of work that a <see cref="T:Kingo.MicroServices.MicroProcessor" /> uses to store and flush changes.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.UnitOfWorkMode.Disabled">
            <summary>
            Indicates that every <see cref="T:Kingo.MicroServices.IUnitOfWorkResourceManager">resource manager</see> is flushed immediately when it enlists itself.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.UnitOfWorkMode.SingleThreaded">
            <summary>
            Indicates that all enlisted <see cref="T:Kingo.MicroServices.IUnitOfWorkResourceManager">resource managers</see> are flushed one after the other.
            </summary>
        </member>
        <member name="F:Kingo.MicroServices.UnitOfWorkMode.MultiThreaded">
            <summary>
            Indicates that all <see cref="T:Kingo.MicroServices.IUnitOfWorkResourceManager">resource managers</see> will be grouped by their
            <see cref="P:Kingo.MicroServices.IUnitOfWorkResourceManager.ResourceId" />, and different groups may be flushed simultaneously using
            different threads.
            </summary>
        </member>
        <member name="T:Kingo.MicroServices.UnprocessableEntityException">
            <summary>
            This exception is thrown by a <see cref="T:Kingo.MicroServices.IMicroProcessor" /> when a command failed to execute because because the operation was illegal.
            This type semantically maps to HTTP response code <c>422</c> (unprocessable entity).
            </summary>
        </member>
        <member name="M:Kingo.MicroServices.UnprocessableEntityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.UnprocessableEntityException" /> class.
            </summary>        
            <param name="message">Message of the exception.</param>
            <param name="innerException">Cause of this exception.</param>        
        </member>
        <member name="M:Kingo.MicroServices.UnprocessableEntityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kingo.MicroServices.UnprocessableEntityException" /> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Kingo.MicroServices.UnprocessableEntityException.ErrorCode">
            <summary>
            Returns <c>422</c>.
            </summary>
        </member>
    </members>
</doc>
